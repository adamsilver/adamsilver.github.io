<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Adam Silver, specialising in UX, Front-end Engineering and Strategy, London, UK.</title>
	<link href="http://localhost:4000/atom.xml" rel="self"/>
	<link href="http://localhost:4000/"/>
	<updated>2016-11-22T14:32:00+00:00</updated>
	<id>http://localhost:4000</id>
	<author>
		<name>Adam Silver</name>
	</author>

	
		<entry>
			<title>Browsers are different but so what?</title>
			<link href="http://localhost:4000/articles/browsers-are-different-but-so-what/"/>
			<updated>2016-09-01T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/browsers-are-different-but-so-what</id>
			<content type="html">&lt;p&gt;You know, it’s funny, when the web came along, we used the medium of print to set expectations for how things should be.&lt;/p&gt;

&lt;p&gt;When you print out a business card it always looks the same, no matter who you are or where you are. It’s a physical thing.&lt;/p&gt;

&lt;p&gt;This is not the case with browsers. Browsers are not identical to each other. They are largely similar, but they still have plenty of differences. Just like Mac and Windows. Both computers can be used to perform very similar tasks. But they &lt;em&gt;are&lt;/em&gt; different.&lt;/p&gt;

&lt;p&gt;When people first encountered this difference on the web they would be like “WTF”. Founders, business owners, testers and even designers and developers (you know the very people that are meant to know this shit ) all included.&lt;/p&gt;

&lt;p&gt;This reaction is based on a belief system , the belief that the browser should behave a certain way, in this case like print.&lt;/p&gt;

&lt;p&gt;The funny thing about belief systems, is that even if they are wrong, it doesn’t really matter right?&lt;/p&gt;

&lt;p&gt;Well, kinda. Let me explain:&lt;/p&gt;

&lt;p&gt;It’s true that if people paying for the project believe a website should look identical, then that’s what front-end developers (and testers etc) will be tasked with. And this is exactly what happened to me and many other people working in the industry.&lt;/p&gt;

&lt;p&gt;It’s false because people’s beliefs change due to new experiences and education. Over time people learnt that the browser is different. It’s special and uniquely powerful. It’s not print.&lt;/p&gt;

&lt;p&gt;This often leads to the realisation that the idea of making things look identical and “perfect” in all browsers is not only Sisyphean, but that it’s not required or even &lt;em&gt;valuable&lt;/em&gt; to the user on the other end. I guess what I am trying say is users don’t care!&lt;/p&gt;

&lt;p&gt;Most people use one or two browsers. And even if they use more than that, it still doesn’t matter, because users don’t even notice — they don’t care about your website like you do — they just want to use the service and get back to their day. And even if they did notice, so what?&lt;/p&gt;

&lt;p&gt;Furthermore, those subtle differences would be the same across all the websites they browse to in that browser. For example, radio buttons are rendered slightly different in IE9. But that will be the case for every website that uses radios. It becomes an expectation and one that in almost all scenarios doesn’t hurt the experience.&lt;/p&gt;

&lt;p&gt;If a client or tester or whoever else says “But [insert browser] does it like this…” this is typically a huge waste of time. My response is almost always “Yes, is that a problem?”. Invariably there is no actual reason to worry about this at all.&lt;/p&gt;

&lt;p&gt;Case in point. On a recent project a download attribute was added to a link:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=”/path/to/file.pdf” download&amp;gt;Download PDF file&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without this, some browsers — depending on the file-type — will load that file in the browser like a web page. This is the case for a PDF file for example.&lt;/p&gt;

&lt;p&gt;This attribute ensures that the file is to be treated as a download in the traditional sense i.e. downloaded into a folder on the user’s machine.
The “problem” is that when the file can’t be found, FireFox displays a “special” screen that explains that it can’t be downloaded. Other browsers just show the regular 404 page served by the website typically “We can’t find what you’re looking for” etc.&lt;/p&gt;

&lt;p&gt;Is this a problem? Of course not. Firefox will do this for all websites that use the download attribute. Arguably it’s an enhancement for FireFox Users — lucky them! In the future FireFox might change the behaviour. Maybe Chrome copies them. Maybe none of this happens. Who knows and who cares? Users don’t.&lt;/p&gt;

&lt;p&gt;My point is this. The web is its own thing. It has its own ways. This is not something to be feared. There is nothing to bat into shape. The web and the browser is to be embraced to the user’s advantage.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Developing better templates with an outside-in approach</title>
			<link href="http://localhost:4000/articles/developing-better-templates-with-an-outside-in-approach/"/>
			<updated>2016-08-08T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/developing-better-templates-with-an-outside-in-approach</id>
			<content type="html">&lt;p&gt;When we design websites, we start with a user problem and translate that into a set of screens and flows.&lt;/p&gt;

&lt;p&gt;Next, we translate these screens into front-end code. We look at the best way to split up the design into pages,
&lt;a href=&quot;http://maintainablecss.com/chapters/modules/&quot;&gt;modules&lt;/a&gt; and components.&lt;/p&gt;

&lt;p&gt;After this, we integrate data and logic into a template to be displayed to the user on-screen. The object that contains this data and logic is called a
&lt;em&gt;View-Model&lt;/em&gt; — it’s a Model designed &lt;em&gt;for&lt;/em&gt; the View.&lt;/p&gt;

&lt;p&gt;You can’t design a View-Model without first understanding the requirements of the View itself. And you can’t understand the requirements of the View without first understanding the visual and interaction design requirements et cetera.&lt;/p&gt;

&lt;p&gt;Sometimes, a View-Model is poorly designed, neglected or designed from the
inside-out. This often means it exposes too much low-level logic — something
which makes a template unnecessarily difficult to work with. This is best
demonstrated with a simple example.&lt;/p&gt;

&lt;p&gt;Take a &lt;em&gt;Welcome Message&lt;/em&gt; module: it contains a piece of text and a link, and it renders differently under three scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user is anonymous.&lt;/li&gt;
  &lt;li&gt;The user is authenticated and has supplied their name.&lt;/li&gt;
  &lt;li&gt;The user is authenticated but hasn’t supplied their name.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/templates/anon.png&quot; alt=&quot;Anonymous user&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Anonymous user&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated with a name&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Authenticated with a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/templates/recognised-no-name.png&quot; alt=&quot;Authenticated without a name&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Authenticated without a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Consider the following template (built in
&lt;a href=&quot;http://paularmstrong.github.io/swig/&quot;&gt;Swig&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if isLoggedIn %}
    {% if firstName &amp;amp;&amp;amp; lastName %}
        &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
            &amp;lt;p&amp;gt;Hello {{firstName}} {{lastName}}&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;{{signOutLink.href}}&quot;&amp;gt;{{signOutLink.text}}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
    {% else %}
        &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
            &amp;lt;p&amp;gt;Welcome back&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;{{signOutLink.href}}&quot;&amp;gt;{{signOutLink.text}}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
    {% endif %}
{% else %}
    &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
        &amp;lt;p&amp;gt;Welcome&amp;lt;/p&amp;gt;
        &amp;lt;a href=&quot;{{signInLink.href}}&quot;&amp;gt;{{signInLink.text}}&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Forget for the moment that you might be able to factor out the nested
if-statement — and, that you could reuse the HTML by abstracting it into a
partial — this template is overly &lt;em&gt;complicated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It exposes low-level information that the template does not need to know in
order to do its job. It’s been designed from little pieces, from the inside-out.&lt;/p&gt;

&lt;p&gt;For example, there is nothing in the design that requires knowledge of the first name and last name separately (as they are styled the same) and there is no need to determine if the user is authenticated.&lt;/p&gt;

&lt;p&gt;Instead, consider the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=”welcomeMessage”&amp;gt;
    &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
    &amp;lt;a href=”{{link.href}}”&amp;gt;{{link.text}}&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The View-Model has been designed from the outside-in; it contains just what the template needs in order to render itself. And because there is always a message and a link, there is no need for conditionality. This template is dumb-by-design, and leaves complex logic to reside somewhere more appropriate in the stack.&lt;/p&gt;

&lt;p&gt;In comparison to the original, this template is just four lines compared to 18 and consists mostly of HTML, making this template much easier to work with. As an added bonus, the logic that no-longer resides in the template can be unit-tested. For example, we can now test that the message is “Welcome &lt;name&gt;” when the user is authenticated.&lt;/name&gt;&lt;/p&gt;

&lt;p&gt;This gives a glimpse as to the impact a well-designed View-Model can have on the maintainability of a template.&lt;/p&gt;

&lt;p&gt;With this in-mind let’s have a look at the common scenarios we need to design for when developing a template.&lt;/p&gt;

&lt;h3 id=&quot;when-a-module-has-dynamic-properties&quot;&gt;1. When a module has dynamic properties&lt;/h3&gt;

&lt;p&gt;When data or text is dynamic it will reside somewhere else in a system e.g. a database. In fact, even if it is &lt;em&gt;static&lt;/em&gt; it may still reside somewhere else for internationalisation or maintenance purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s important is that the template should not concern itself with where
this data comes from — it’s just information exposed via the View-Model.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking the design as follows:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated with a name&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Authenticated with a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The View-Model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  message: &quot;Hello Adam Silver&quot;,
  link: { href: &quot;/sign-out&quot;, text: &quot;Sign out&quot; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=”welcomeMessage”&amp;gt;
  &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
  &amp;lt;a href=”{{link.href}}”&amp;gt;{{link.text}}&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The message consists of text that may ultimately be retrieved from resource
files and a database. Perhaps the link’s href property could come from a routes configuration object etc.&lt;/p&gt;

&lt;p&gt;Regardless, the template doesn’t care — it leaves this responsibility to other parts of the system. The View-Model is lean and provides just enough information for the View to render itself.&lt;/p&gt;

&lt;h3 id=&quot;when-a-module-has-conditionality&quot;&gt;2. When a module has conditionality&lt;/h3&gt;

&lt;p&gt;Conditionally showing a portion of a View involves display-logic. The simplest of its type is based on a condition: if-this-show-that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The important thing to remember, is that a template shouldn’t have to know why something is shown or not. It should just know whether it should.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ll modify the original requirements so that it &lt;em&gt;only&lt;/em&gt; displays a welcome
message when the the user is authenticated and has supplied their name:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated and name is supplied&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Authenticated and name is supplied&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When the message should be shown, the View-Model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  showMessage: true,
  message: &quot;Hello Adam Silver&quot;,
  link: { href: &#39;/sign-out&#39;, text: &#39;Sign out&#39; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the message is hidden the View-Model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  showMessage: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if showMessage %}
  &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
    &amp;lt;p&amp;gt;Welcome&amp;lt;/p&amp;gt;
    &amp;lt;a href=&quot;{{signInLink.href}}&quot;&amp;gt;{{signInLink.text}}&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the explicit boolean property determines whether it’s shown. Don’t be
tempted to expose lower-level logic that the template uses to infer visibility.&lt;/p&gt;

&lt;h3 id=&quot;when-showing-a-collection-of-items&quot;&gt;3. When showing a collection of items&lt;/h3&gt;

&lt;p&gt;When showing a number of similar items you will need to loop over a collection or array. As an example, let’s display a list of restaurants by area.&lt;/p&gt;

&lt;p&gt;The View-Model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  restaurants: [{
      name: &quot;Pizza House&quot;,
      address: &quot;...&quot;
  }, ...]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;restaurants&quot;&amp;gt;
  {% for restaurant in restaurants %}
    &amp;lt;div class=”restaurant”&amp;gt;
      &amp;lt;h2&amp;gt;{{restaurant.name}}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{{restaurant.address}}&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  {% endfor %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often with loops, you will only show the items if there are items in the
collection. You may be tempted to interrogate the size of the collection in the template as follows:&lt;/p&gt;

&lt;p&gt;Whilst this isn’t the end of the world, it can lead to maintenance problems.
Instead, continue to use the approach used in the previous example by explicitly checking a boolean property &lt;em&gt;before&lt;/em&gt; iterating over the loop:&lt;/p&gt;

&lt;p&gt;This way templates are consistent, and the logic behind the conditionality can evolve over time without having to change the template — perhaps the restaurants are only shown to authenticated users for example.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Ultimately, templates should be easy-to-read and consist mostly of HTML and just enough information in order to support the display-logic. They shouldn’t have to infer display-logic from other properties and they shouldn’t have to care where this data comes from such as a database or cookie.&lt;/p&gt;

&lt;p&gt;Architecting a system is difficult and sometimes that difficulty bleeds out into the template. This creates problems for the developers who maintain them (mostly front-end developers).&lt;/p&gt;

&lt;p&gt;This is why logic-less templates are popular. They attempt to enforce the
separation of concerns between back-end and front-end. You don’t need to use a logic-less template engine to reap the benefits. You can architect your View-Models in much the same way regardless.&lt;/p&gt;

&lt;p&gt;Designing a View-Model &lt;em&gt;for&lt;/em&gt; the View allows more logic to be unit-tested and drastically improves the maintainability of your templates.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Buttons shouldn't have a hand cursor</title>
			<link href="http://localhost:4000/articles/buttons-shouldnt-have-a-hand-cursor/"/>
			<updated>2016-07-15T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/buttons-shouldnt-have-a-hand-cursor</id>
			<content type="html">&lt;p&gt;There is this belief that the hand cursor means ‘clickable’, but this is incorrect and potentially problematic. My hope is that by the end of the article, you’ll never want to use the hand cursor for buttons ever again.&lt;/p&gt;

&lt;h2 id=&quot;the-hand-does-not-mean-clickable&quot;&gt;The hand does not mean clickable&lt;/h2&gt;

&lt;p&gt;It’s no accident that browsers don’t give buttons (and other elements) a hand cursor — it’s because they’re not meant to. Take a look at the following screenshot:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/buttons/chrome.jpeg&quot; alt=&quot;Chrome on Mac OS&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Chrome on Mac OS&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Almost every element is interactive and clickable — the menu, the tabs, the whitespace, the browser buttons, the bookmark bar and Google’s search box — but, none of them have a hand cursor.&lt;/p&gt;

&lt;p&gt;There are more interactive and clickable elements not shown above— select menus, sliders, checkboxes, radios, labels, images, empty space (e.g right click — view source) and text — again, none of them have a hand cursor.&lt;/p&gt;

&lt;p&gt;The same goes for any computer you have ever used. You can tap, drag, select, press, left click and right click on a plethora of different elements including buttons. However, buttons are not afforded by a hand cursor displaying on hover.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/buttons/license.jpeg&quot; alt=&quot;“License Agreement” is a link and uses the hand cursor. The buttons don’t.&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;“License Agreement” is a link and uses the hand cursor. The buttons don’t.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Affordance is provided by the way something looks regardless of the cursor. Remember, the cursor is only available when hovering with a pointing device such as a mouse.&lt;/p&gt;

&lt;p&gt;This is why, for example, &lt;a href=&quot;http://danieldelaney.net/checkboxes&quot;&gt;checkboxes are never round&lt;/a&gt; (and radios are never square). This is also why links are typically underlined. This is why links do, in fact, have a hand cursor.&lt;/p&gt;

&lt;h2 id=&quot;what-the-authorities-say&quot;&gt;What the authorities say&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dn742466%28v=vs.85%29.aspx&quot;&gt;Microsoft’s Design Guidelines&lt;/a&gt; talk about weak affordance:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Text and graphics links use a hand […] pointer […] because of their weak affordance. While links may have other visual clues to indicate that they are links (such as underlines and special placement), displaying the hand pointer on hover is the definitive indication of a link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To avoid confusion, it is imperative not to use the hand pointer for other purposes. For example, command buttons already have a strong affordance, so they don’t need a hand pointer. The hand pointer must mean “this target is a link” and nothing else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/Pointers.html&quot;&gt;Apple’s Human Interface Guidelines&lt;/a&gt; explain that the hand cursor should be used when “the content is a URL link”. &lt;a href=&quot;https://www.w3.org/TR/CSS21/ui.html#propdef-cursor&quot;&gt;W3C User Interface Guidelines&lt;/a&gt; says the same thing again with “The cursor is a pointer that indicates a link”.&lt;/p&gt;

&lt;h2 id=&quot;the-hand-cursor-is-for-links&quot;&gt;The hand cursor is for links&lt;/h2&gt;

&lt;p&gt;The hand (and often underlined text) signifies a link. Links are not buttons. Links came along with the web. To help users understand that they are different, they are given the hand cursor. It serves as an extra clue. Here’s why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clicking a link opens a web page or resource.&lt;/li&gt;
  &lt;li&gt;(On desktop) I can right-click on a link and do many things (that I can’t do with a button). Open in new tab/window, save a link, copy address, add to reading list, bookmark it and more.&lt;/li&gt;
  &lt;li&gt;(On mobile devices) I can tap and hold on a link and get a similar context menu as per the previous point.&lt;/li&gt;
  &lt;li&gt;A link also tells me that I am just going somewhere else. I am not modifying any data or making changes in anyway (like a button is likely to do).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When a button has the hand cursor, it subtly suggests that the user is interacting with a link when they’re not. If you want to give visual feedback when the user hovers, you can do so with other style changes such as background colour. A well-designed button does not need a hand cursor to help the user realise it does something.&lt;/p&gt;

&lt;p&gt;The hand cursor is reserved for links. This is because they are unique in their behaviour. Browsers and Operating Systems have done the work for you — because contrary to popular belief — browsers know best.&lt;/p&gt;

&lt;p&gt;Links have always been handled this way since the web came along — this is the convention of the web that you need not innovate on. You can rest easy knowing that browsers have you covered. This leaves you and your team to solve real problems.&lt;/p&gt;

&lt;!--
http://ux.stackexchange.com/questions/3788/default-cursor-on-mouse-over-of-a-button-is-not-a-hand-pointer
--&gt;
</content>
		</entry>
	
		<entry>
			<title>Always use a label</title>
			<link href="http://localhost:4000/articles/always-use-a-label/"/>
			<updated>2016-07-01T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/always-use-a-label</id>
			<content type="html">&lt;p&gt;Sometimes designers oversimplify a form by removing the labels. The problem is
that &lt;a href=&quot;http://uxmyths.com/post/115783813605/myth-34-simple-minimal&quot;&gt;minimal does not always mean it’s
simple&lt;/a&gt; — which is
certainly the case for labels. Labels, in fact, are an essential part of
designing easy-to-use forms. Here’s why:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A) Sighted users will see the instructions&lt;/strong&gt; and know what to do. Without a
label this is challenging at best.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/1.png&quot; alt=&quot;The visual label helps sighted users understand what to type&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;The visual label helps sighted users understand what to type&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;B) Visually-impaired users will hear the instructions&lt;/strong&gt; when using a
screen reader. Without a label this is impossible.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/2.png&quot; alt=&quot;“Username” will be read out by screen readers&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;“Username” will be read out by screen readers&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;C) Motor-impaired users will find it easier&lt;/strong&gt; to activate a control using a
mouse or finger, due to the hit region increasing in size. This is because
clicking (or tapping) a label acts as if the user clicked the control itself.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/3.png&quot; alt=&quot;Larger hit area helps motor-impaired users activate a control&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Larger hit area helps motor-impaired users activate a control&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;but-sortsizecolourquantity-menus-dont-need-labels-do-they&quot;&gt;But sort/size/colour/quantity menus don’t need labels do they?&lt;/h2&gt;

&lt;p&gt;They do and unfortunately, it’s rather common to find missing labels on product forms.
&lt;a href=&quot;http://www.asos.com/ASOS/ASOS-Oversized-Long-Sleeve-T-Shirt-With-Mock-Underlayer/Prod/pgeproduct.aspx?iid=6593813&amp;amp;cid=13084&amp;amp;sh=0&amp;amp;pge=0&amp;amp;pgesize=36&amp;amp;sort=-1&amp;amp;clr=Grey&amp;amp;totalstyles=604&amp;amp;gridsize=3&quot;&gt;ASOS&lt;/a&gt; suffers from this problem as you can see below:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/asos.jpeg&quot; alt=&quot;ASOS’ product form omits labels on drop downs&quot; width=&quot;100%&quot; style=&quot;max-width: 350px&quot; /&gt;
		&lt;figcaption&gt;ASOS’ product form omits labels on drop downs&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Instead of a label, they rely on the first &lt;em&gt;option&lt;/em&gt; in the menu to provide meaning. Whilst this is &lt;em&gt;sort of * okay for *visual&lt;/em&gt; users in the non-selected state, it &lt;em&gt;does&lt;/em&gt; suffer from points B and C — &lt;em&gt;and&lt;/em&gt; A when a value has been selected — as is the case with the colourmenu as shown above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.houseoffraser.co.uk/Polo+Ralph+Lauren+Short-Sleeve+V-Neck+T-Shirt/233780500,default,pd.html&quot;&gt;House of Fraser&lt;/a&gt; shows a label with their quantity menu improving usabilty for everyone:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/hof.jpeg&quot; alt=&quot;House of Fraser has a label for their quantity menu&quot; width=&quot;100%&quot; style=&quot;max-width: 350px&quot; /&gt;
		&lt;figcaption&gt;House of Fraser has a label for their quantity menu&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;but-a-simple-search-form-doesnt-need-a-label-does-it&quot;&gt;But a simple search form doesn’t need a label does it?&lt;/h2&gt;

&lt;p&gt;It does and unfortunately, search forms are often designed without a label. As
an example you can see &lt;a href=&quot;http://www.selfridges.com/&quot;&gt;Selfridges &lt;/a&gt;below:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/selfridges.png&quot; alt=&quot;Selfridges’ search form omits the label&quot; width=&quot;100%&quot; style=&quot;max-width: 350px;&quot; /&gt;
		&lt;figcaption&gt;Selfridges’ search form omits the label&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Instead of a label, they rely on the submit button (in this case a magnifying glass) and the placeholder to provide meaning. But this is unnecessarily difficult to use for less abled people — and of course —&lt;a href=&quot;https://medium.com/simple-human/10-reasons-why-placeholders-are-problematic-f8079412b960&quot;&gt;placeholders should not be used as a replacement for
labels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/author/adamsilver/&quot;&gt;Smashing Magazine&lt;/a&gt; shows that including a label can be both beautiful &lt;em&gt;and&lt;/em&gt; functional at the same time:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/labels/smashing.jpeg&quot; alt=&quot;Smashing Magazine’s search form uses a label&quot; width=&quot;100%&quot; style=&quot;max-width: 350px;&quot; /&gt;
		&lt;figcaption&gt;Smashing Magazine’s search form uses a label&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Accommodating labels into a visual design can be challenging but &lt;a href=&quot;https://medium.com/simple-human/the-design-challenge-6b2d5346da7a&quot;&gt;shying away from the challenge&lt;/a&gt; is not the answer. Embrace the challenge, don’t over simplify. And of course, &lt;strong&gt;always use a label.&lt;/strong&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Why placeholders are problematic</title>
			<link href="http://localhost:4000/articles/why-placeholders-are-problematic/"/>
			<updated>2016-06-16T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/why-placeholders-are-problematic</id>
			<content type="html">&lt;p&gt;Since placeholders arrived on the scene, they have been rapidly adopted to provide hints and instructions to help users fill in forms. Whilst this sounds good, it is actually problematic due to the way the placeholder behaves — there is one ‘space’ containing two values: the hint and the value.&lt;/p&gt;

&lt;p&gt;It pretty much comes down to the fact that the valuable information put in placeholders is not always available. And what is worse, is when they are used as a &lt;em&gt;replacement&lt;/em&gt; for labels. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;disappearing-placeholder-text-is-easy-to-forget&quot;&gt;1. Disappearing placeholder text is easy to forget&lt;/h2&gt;

&lt;p&gt;Because the placeholder disappears as the user starts typing, the user can easily forget the requirements of the field. This is especially the case on more complex fields.&lt;/p&gt;

&lt;p&gt;For a login form, you may be tempted to omit labels because you think the fields are obvious, but why even risk making it harder for people to use, in the name of &lt;a href=&quot;http://uxmyths.com/post/115783813605/myth-34-simple-minimal&quot;&gt;minimalism&lt;/a&gt;? The aim is to make something as easy as possible.&lt;/p&gt;

&lt;h2 id=&quot;not-all-browsers-support-placeholders&quot;&gt;2. Not all browsers support placeholders&lt;/h2&gt;

&lt;p&gt;Whilst the majority of browsers support placeholders, some people use browsers that don’t, &lt;a href=&quot;https://adactio.com/journal/10665&quot;&gt;and remember the web is for everyone&lt;/a&gt;. People using a browser without placeholder support, will see a blank box — which if there are no labels, makes it impossible to fill out.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/2.jpeg&quot; alt=&quot;Caniuse.com Placeholder support&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Caniuse.com Placeholder support&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pre-populated-values-are-hard-to-understand&quot;&gt;3. Pre-populated values are hard to understand&lt;/h2&gt;

&lt;p&gt;When a form is loaded with real values — as would be the case with an &lt;em&gt;edit details&lt;/em&gt; form, for example — it’s very difficult to understand what the value means without a label. See the example below:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/3.png&quot; alt=&quot;Pre-populated values without labels are hard to understand&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Pre-populated values without labels are hard to understand&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reviewing-a-long-form-is-difficult&quot;&gt;4. Reviewing a long form is difficult&lt;/h2&gt;

&lt;p&gt;If someone has filled in a long form and wants to go back to review what they entered, the user will have to have remembered what each field wanted. Also, some browsers autocomplete entries incorrectly which can exacerbate the problem.&lt;/p&gt;

&lt;h2 id=&quot;erroneous-fields-are-harder-to-fix&quot;&gt;5. Erroneous fields are harder to fix&lt;/h2&gt;

&lt;p&gt;A form containing errors is now harder to fix, because the information lacks
context without labels. For example, see the field below:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/5.png&quot; alt=&quot;Error message lacks context when the label is missing.&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Error message lacks context when the label is missing.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;figcaption_hack&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The error message explains that a number is required, but not the &lt;em&gt;type&lt;/em&gt; of number. In this case the error message needs to be unnecessarily verbose i.e.
“&lt;em&gt;Expiry date must use numbers only&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;However, a field with a label doesn’t suffer from such problems:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/5b.png&quot; alt=&quot;Error message with a label for context.&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Error message with a label for context.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;some-browsers-will-remove-placeholder-text-on-focus&quot;&gt;6. Some browsers will remove placeholder text on focus&lt;/h2&gt;

&lt;p&gt;When browsers first implemented placeholders, they would disappear as soon as the user focused. This meant that the user would have no time to read the instructions before typing, which resulted in users having to read &lt;em&gt;ahead&lt;/em&gt; of the currently focused input.&lt;/p&gt;

&lt;p&gt;Whilst most browsers only hide the placeholder when the user starts &lt;em&gt;typing&lt;/em&gt;, some browsers still have this original behaviour.&lt;/p&gt;

&lt;h2 id=&quot;placeholder-text-may-be-mistaken-for-a-value&quot;&gt;7. Placeholder text may be mistaken for a value&lt;/h2&gt;

&lt;p&gt;People may scan empty fields in order to know what they have missed, but the difference in placeholder contrast is so subtle that it can make a field &lt;em&gt;appear&lt;/em&gt; complete. This can result in a user skipping a required field, only to be shown an error later on, once the form is validated.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/7.png&quot; alt=&quot;The difference between a placeholder and a value is subtle&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;The difference between a placeholder and a value is subtle&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;they-have-insufficient-contrast&quot;&gt;8. They have insufficient contrast&lt;/h2&gt;

&lt;p&gt;Placeholder copy is afforded by being slightly greyed out which is problematic for two reasons. First, it’s hard to notice the difference in colour (as discussed above). Second, the colours are of insufficient contrast making it hard to read for people with vision impairments.&lt;/p&gt;

&lt;h2 id=&quot;screen-readers-may-not-announce-them&quot;&gt;9. Screen readers may not announce them&lt;/h2&gt;

&lt;p&gt;Placeholders may not be read out by screen readers which is the visual
equivalent of a meaningless blank box. Labels are &lt;em&gt;always&lt;/em&gt; read out.&lt;/p&gt;

&lt;h2 id=&quot;a-missing-label-reduces-the-size-of-the-hit-area&quot;&gt;10. A missing label reduces the size of the hit area&lt;/h2&gt;

&lt;p&gt;This means that people with fine motor skill impairments will find it harder to
apply focus to a field withtheir finger or mouse.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/10.png&quot; alt=&quot;No label means a smaller hit area.&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;No label means a smaller hit area.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;placeholder-text-is-limited-to-the-size-of-the-field&quot;&gt;11. Placeholder text is limited to the size of the field&lt;/h2&gt;

&lt;p&gt;Placeholder text is cut off if it goes beyond the size of the field so you’re
constrained as to what kind of hint or instruction to put there. Labels don’t
suffer from this problem.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/placeholders/11.png&quot; alt=&quot;Placeholder copy gets cropped.&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Placeholder copy gets cropped.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;but-its-okay-if-they-are-used-in-addition-to-labels-right&quot;&gt;But it’s okay if they are used in addition to labels right?&lt;/h2&gt;

&lt;p&gt;Not particularly. Its certainly better but it’s still problematic.&lt;/p&gt;

&lt;p&gt;If a piece of text adds value to a user experience — in this case by helping the user fill out a form , either by showing an additional hint, input format or example of what goes in the field — then it would be better if it didn’t suffer from all the problems discussed above.&lt;/p&gt;

&lt;p&gt;On the other hand, if the placeholder is used in addition to a label, and doesn’t contain any vital information, then why have it in the first place as it’s seemingly not adding any value to the experience?&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Each of the problems discussed above cause friction for people trying to fill in a form — the sort of friction that drains peoples energy — the sort of friction that a great user experience strives to eliminate.&lt;/p&gt;

&lt;p&gt;If you’re trying to help the user, the best place to start is to &lt;a href=&quot;https://medium.com/simple-human/always-use-a-label-a39ceab554e6#.r15yzj7p7&quot;&gt;always include a clear, always-visible
label&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On occasion, a placeholder — in &lt;em&gt;addition&lt;/em&gt; to label — &lt;em&gt;might&lt;/em&gt; be helpful, but use them judiciously and if in doubt, test with different people, under
different circumstances and different browsers.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>How we cut our MVP in half to launch KIDLY</title>
			<link href="http://localhost:4000/articles/how-we-cut-our-mvp-in-half-to-launch-kidly/"/>
			<updated>2016-05-20T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/how-we-cut-our-mvp-in-half-to-launch-kidly</id>
			<content type="html">&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/kidly.jpg&quot; alt=&quot;The team&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;The team&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For the last 9 months, we at KIDLY have been designing and building a brand new online shop with the following tagline…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The best stuff for baby, all in one place”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last week we launched silently to our many early adopters who we call VIPs. To do this we had to cut our original MVP in HALF!&lt;/p&gt;

&lt;p&gt;This has been a challenging process because our Chief James, has a hugely ambitious and wonderful vision for KIDLY — a vision that has his team just as excited about the future as he is.&lt;/p&gt;

&lt;p&gt;If you consider that the ‘Original’ MVP (defined over 6 months ago) was already
a small slice of the vision, this meant that what was a 50% reduction to our MVP
to &lt;em&gt;us&lt;/em&gt;, probably felt more like a 75% reduction for &lt;em&gt;James&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To give you some context as to what this all means in real terms, I need to tell
you about our ‘Original’ MVP.&lt;/p&gt;

&lt;h2 id=&quot;our-original-mvp&quot;&gt;Our ‘Original’ MVP&lt;/h2&gt;

&lt;p&gt;Besides our teaser site (just to get pre-launch sign ups), the Original MVP,
defined around September 2015, consisted of designing and building a brand new
responsive mobile-first bespoke e-commerce platform with the following feature
set:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browse:&lt;/strong&gt; Homepage, category page, sub category page, brand page, brand
directory and product pages. Basket page. Each product list page had filters and
pagination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial:&lt;/strong&gt; Article list page, article page, articles by tag whereby a tag
related to a browse sections of the site and article pages would link to
featured products i.e. editorial is weaved into product and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Account:&lt;/strong&gt; Managing your account, profile, child data, referral schemes, sign
in, sign up, forgot password flows, returns flow etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checkout:&lt;/strong&gt; Guest and logged in user flows. Capture+ integration for typing
addresses. More than one method for delivery. PayPal and standard card
integration (using Stripe) and the other usual bits you find in checkout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static pages:&lt;/strong&gt; About, privacy policy, 404, 500, help and many more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credit mechanism:&lt;/strong&gt; This included users getting credit for completing their
profile, referring friends — then redeeming against their order automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent test:&lt;/strong&gt; Every single product was sent to a real parent for testing
before being added to the site on every product page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And much more:&lt;/strong&gt; things such as Zendesk and Intercom integration. Launching
our own brand of KIDLY products. Custom photography for every single product. To
start with 1000 products across 18 categories etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin:&lt;/strong&gt; All of the above was to be supported by a rich web application — this
included the management of products, categories, brands, articles as well as
integration with the warehouse and 2 courier companies.&lt;/p&gt;

&lt;h2 id=&quot;the-original-deadline&quot;&gt;The original deadline&lt;/h2&gt;

&lt;p&gt;Our original launch date for this was &lt;em&gt;pencilled&lt;/em&gt; in for &lt;strong&gt;February 2016&lt;/strong&gt; and we began working on the MVP in &lt;strong&gt;September 2015&lt;/strong&gt; with a &lt;strong&gt;tiny team of just 6 people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We didn’t manage to launch in Feb — we didn’t really get close to that. It’s worth noting that this was an &lt;em&gt;internal&lt;/em&gt; soft target to aim for — &lt;em&gt;not&lt;/em&gt; hitting it was never going to be the “end of the world” etc.&lt;/p&gt;

&lt;p&gt;Regardless, I still want to discuss why I think we ‘failed’ because that’s where all of this gets interesting.&lt;/p&gt;

&lt;h2 id=&quot;why-we-failed&quot;&gt;Why we ‘failed’?&lt;/h2&gt;

&lt;p&gt;I put &lt;em&gt;failed&lt;/em&gt; in quotation marks because it wasn’t a critical failure as such. This is more of a “why we didn’t get as much done as we might have” type thing. Here’s why I think that was:&lt;/p&gt;

&lt;h3 id=&quot;the-original-mvp-was-too-big-in-the-first-place&quot;&gt;1. The Original MVP was too big in the first place&lt;/h3&gt;

&lt;p&gt;Self explanatory really. When something is too big, it’s just too big. The
problem wasn’t that it was too big, it was that it took us a while to come to
terms with that — something I will explain shortly.&lt;/p&gt;

&lt;h3 id=&quot;we-had-a-fixed-deadline-and-a-fixed-scope&quot;&gt;2. We had a fixed deadline &lt;em&gt;and&lt;/em&gt; a fixed scope.&lt;/h3&gt;

&lt;p&gt;You can have either a fixed deadline or a fixed scope but not both — we inadvertently set ourselves up for failure.&lt;/p&gt;

&lt;h3 id=&quot;we-zoomed-in-to-details-too-early&quot;&gt;3. We zoomed in to details too early&lt;/h3&gt;

&lt;p&gt;What I mean by this is that every single piece of copy, every pixel and every
micro interaction was scrutinised over and over. Ultimately it
was near-death by a thousand cuts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Nobody cares about your product as much as you do”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of designing overall flows, screens and
&lt;a href=&quot;https://medium.com/swlh/the-nine-states-of-design-5bfe9b3d6d85#.9wrs8ne3o&quot;&gt;states&lt;/a&gt;,
we were spending up to several weeks zooming in on these micro details. We were
shooting for perfect when there is no perfect.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, these details are important, details that our customers appreciated in the end, but when everything is a
priority, &lt;em&gt;nothing&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;Also, when you have a huge array of features, a small team and are prone to
zooming in like this, it results in failure. But fortunately failure often leads
to success…&lt;/p&gt;

&lt;h2 id=&quot;what-happened-next&quot;&gt;What happened next?&lt;/h2&gt;

&lt;p&gt;April was fast approaching and by this time we were getting itchy. We had cut a
few minor items off the backlog but not enough to stop our &lt;em&gt;t-shirt-sized&lt;/em&gt;
estimate indicating a July launch date — something we wouldn’t accept.&lt;/p&gt;

&lt;p&gt;You have to remember that we had thousands of VIPs, some of which vocalised
their eagerness for us to launch, so they could spend their credit with us. It
was difficult disappointing our VIPs — we even had to send them elsewhere to buy
the products until our shop was ready.&lt;/p&gt;

&lt;p&gt;We had to do something…&lt;/p&gt;

&lt;h2 id=&quot;the-best-thing-to-happen-to-us&quot;&gt;The best thing to happen to us&lt;/h2&gt;

&lt;p&gt;We could all feel some pain from many angles. We had been working on this for months and not seeing the fruits of our labour. We had our customers getting irritated because they wanted to buy stuff from us and of course we weren’t making any money. We also didn’t know if our product was any good as nobody had seen it (though we had a good idea it would be).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have to get this thing live in 4 weeks” — James&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;James called us into a meeting and basically said “We have to get this thing
live in 4 weeks — I don’t care how we do it, it’s important for KIDLY, it’s
important for our customers and it’s important for morale!”.&lt;/p&gt;

&lt;p&gt;Having so much to do and so little time to do it, forced us
into positive action—to &lt;em&gt;prioritise&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We knew this meeting was coming so we had come prepared to provide
suggestions to this problem.&lt;/p&gt;

&lt;p&gt;When James said &lt;em&gt;“Is everyone happy that we can do this in 4 weeks?”&lt;/em&gt; everyone stayed silent.&lt;/p&gt;

&lt;p&gt;Then James turned to me and said &lt;em&gt;“Adam?”&lt;/em&gt; — I will always wonder why he asked &lt;em&gt;me :).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I said &lt;em&gt;“the only way on earth that we can deliver this thing in 4 weeks is to launch behind closed doors i.e. behind a login”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I didn’t think this would go down too well because of reasons already explained and also the fact that this would introduce friction for our users — the sort of friction that would normally have us striving so hard to eliminate from the experience.&lt;/p&gt;

&lt;p&gt;But it &lt;em&gt;did!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And then, the team kept firing even more suggestions at each other. We were all on-board, all excited — I mean we were excited anyway, but now we had this plan and this deadline just around the corner, and we thought we would either do it, or get close to doing it. Each reduction complimented each other.&lt;/p&gt;

&lt;p&gt;We already “knew” that KIDLY was going to be great when we launched — this way it was just going to happen a whole lot quicker. We had now inadvertently set ourselves up for success.&lt;/p&gt;

&lt;h2 id=&quot;but-why-did-we-launch-behind-a-login&quot;&gt;But, why did we launch behind a login?&lt;/h2&gt;

&lt;p&gt;Our VIPs already had access to their account page. They could already login, complete their profile, and refer friends — it’s just they couldn’t shop yet.&lt;/p&gt;

&lt;p&gt;Ensuring that users had to be logged in to view the shop had 3 huge benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It drastically reduced the complexity of the site as we only needed to cater for
logged in states. This meant that we could remove guest checkout from the
backlog. We didn’t have to worry about SEO and social sharing, and of course it
reduced the amount of development.&lt;/li&gt;
  &lt;li&gt;We could launch just to our VIPs which would also bring an aire of exclusivity
to the experience — they are VIPs after all.&lt;/li&gt;
  &lt;li&gt;Launching to VIPs only meant that we reduced the risk and enabled us to receive
vital feedback before opening up to public.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-else-did-we-suggest&quot;&gt;What else did we suggest?&lt;/h2&gt;

&lt;p&gt;Here’s the other big things we suggested:&lt;/p&gt;

&lt;h3 id=&quot;we-halved-the-amount-of-products&quot;&gt;1. We halved the amount of products&lt;/h3&gt;

&lt;p&gt;Instead of launching with 1000 products we decided it would be okay to launch
with less than half of that. This itself had two far reaching benefits:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, we halved the effort required to produce and upload content.This includes copywriting, photography, uploading product information and of course testing each and every product. And of course ensuring that we had enough stock for each of those products.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, we could significantly reduce the complexity of the site. For example we no longer needed sub categories — there was going to be less than 40 products on each category page, so why offer people the ability to drill down? In a similar vein, we no longer needed filtering or pagination.&lt;/p&gt;

&lt;h3 id=&quot;we-removed-brand-pages&quot;&gt;2. We removed brand pages&lt;/h3&gt;

&lt;p&gt;Brand pages are a nice-to-have feature but we still took the option to cut these out. In doing so we removed “super” brand, “simple” brand and brand directory pages. This also meant that our navigation was simplified — customers could only shop by category. Easy.&lt;/p&gt;

&lt;h3 id=&quot;no-paypal&quot;&gt;3. No PayPal&lt;/h3&gt;

&lt;p&gt;This was a big decision for us as we know how important PayPal is to increasing conversion in checkout. We already had to integrate Stripe and just didn’t have the capacity for this. It’s high up on the post launch backlog though.&lt;/p&gt;

&lt;h2 id=&quot;we-succeeded&quot;&gt;We succeeded!&lt;/h2&gt;

&lt;p&gt;We didn’t quite manage to launch in the 4 weeks we were given, but we got very close indeed.&lt;/p&gt;

&lt;p&gt;In the end we launched in 5 weeks, and even that was down to a third party courier not being able to test returns labels in time for us to start shipping.&lt;/p&gt;

&lt;p&gt;It must be said that James and the team achieved what felt impossible to achieve. It has been very enjoyable working with the team, especially in the last 4 weeks as I have witnessed the progression of this success.&lt;/p&gt;

&lt;h2 id=&quot;what-our-customers-said&quot;&gt;What our customers said&lt;/h2&gt;

&lt;p&gt;We have had some wonderful feedback from our many VIPs. Here is just some of that feedback:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Love the site, really easy to navigate and ordering was a doddle, my face normally sinks if PayPal isn’t involved but checkout was so quick.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“So so pleased with the speed of delivery, honestly didn’t expect them to arrive so quickly. So far so good on the website, I love the layout, the clean lines, and ease of use.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Awesome imagery, love the list of products with the big photos and the Ideas section. And many products look gorgeous.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-about-the-results&quot;&gt;What about the results?&lt;/h2&gt;

&lt;p&gt;We have had a good sales rates (can’t disclose numbers) and a phenomenally successful conversion from basket at 26%.&lt;/p&gt;

&lt;p&gt;This is still early days and these stats are based on low numbers overall, but early signs are great. Especially considering that we haven’t even told all of our VIPs that we’re open yet — we staggered the announcement, again to reduce risk.&lt;/p&gt;

&lt;h2 id=&quot;what-did-we-learn&quot;&gt;What did we learn?&lt;/h2&gt;

&lt;p&gt;Here are all the things we learnt from this experience:&lt;/p&gt;

&lt;h3 id=&quot;everyones-idea-of-mvp-is-different&quot;&gt;1. Everyones idea of MVP is different&lt;/h3&gt;

&lt;p&gt;James’ idea of MVP and my idea of MVP are quite different. We have often disagreed on macro and micro aspects of the product but that’s to be expected not only because we are different people but because we are bound to see KIDLY from different perspectives.&lt;/p&gt;

&lt;p&gt;James is running an entire company and bringing every piece of the puzzle together. He has to consider the overall vision at all times during every small and large decision.&lt;/p&gt;

&lt;p&gt;Couple that with the aim to provide a level of service to rival Amazon and you start to understand reducing various parts of an MVP might be difficult at the best of times.&lt;/p&gt;

&lt;p&gt;For me it was more about getting this thing live and in front of our customers as soon as possible because the real feedback on product design starts then. So I was more trigger happy to kill off features.&lt;/p&gt;

&lt;p&gt;But ultimately, what is right for KIDLY is somewhere in between. There is no “right” or “wrong” MVP — you just have to get your team on the same page and as soon as possible.&lt;/p&gt;

&lt;h3 id=&quot;good-enough-is-good-enough&quot;&gt;2. “Good enough” is good enough&lt;/h3&gt;

&lt;p&gt;During the first few months at KIDLY James gave us &lt;em&gt;Rework&lt;/em&gt; by Jason Fried, to read. In it there is a chapter explaining the concept of “Good Enough”.&lt;/p&gt;

&lt;p&gt;If you can accept early on that perfect doesn’t exist, you can get the macro things done earlier. This in turn is good for momentum and morale because as a team you feel like your moving forwards at a positive rate. Without momentum you can lose motivation.&lt;/p&gt;

&lt;p&gt;If you avoid details early on then you get to have a rough copy of your product holistically. This is beneficial because a product is normally experienced as a whole not in piecemeal.&lt;/p&gt;

&lt;p&gt;If it feels wrong holistically you can rectify without destroying the detail. If it feels right you can go ahead and dive into the detail. Win Win.&lt;/p&gt;

&lt;h3 id=&quot;bite-off-half-of-what-you-think-you-can-chew&quot;&gt;3. Bite off half of what you think you can chew&lt;/h3&gt;

&lt;p&gt;Whatever it is you think you are capable of achieving, stop and remove 50% of it right there and then. Get rid of the other half until the first half is complete. Obviously “half” is a horizontal slice as opposed to a vertical slice.&lt;/p&gt;

&lt;h3 id=&quot;give-your-teams-problems-to-solve-not-solutions-to-adopt&quot;&gt;4. Give your teams problems to solve, not solutions to adopt.&lt;/h3&gt;

&lt;p&gt;When it came to crunch time, James gave us a difficult problem and empowered us to make it work. There is nothing like challenge, accountability and trust to unite a team, in order to set yourself up for success. James showed great leadership which lead us to success quickly.&lt;/p&gt;

&lt;h3 id=&quot;its-either-a-fixed-deadline-or-a-fixed-scope-not-both&quot;&gt;5. It’s either a fixed deadline or a fixed scope, not both!&lt;/h3&gt;

&lt;p&gt;There is nothing more to say here.&lt;/p&gt;

&lt;h3 id=&quot;pressure-forces-you-to-think-creatively&quot;&gt;6. Pressure forces you to think creatively&lt;/h3&gt;

&lt;p&gt;Pressure can ignite an individual or a team to think differently, and accept the (what might have previously been deemed) unacceptable.&lt;/p&gt;

&lt;p&gt;I never thought we could launch in 4 weeks and I didn’t think we would go for such a tiny version of our Original MVP. But we managed both of those things.&lt;/p&gt;

&lt;h3 id=&quot;a-lack-of-features-can-be-a-very-good-thing&quot;&gt;7. A lack of features can be a very good thing&lt;/h3&gt;

&lt;p&gt;If you go by just the feedback, sales and conversion so far, it would be easy to think that the product is great as it is — that’s because it &lt;em&gt;is&lt;/em&gt; great as it is — even with half an MVP. It just goes to show that &lt;em&gt;less&lt;/em&gt; is often &lt;em&gt;better&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-next-for-kidly&quot;&gt;What’s next for KIDLY?&lt;/h2&gt;

&lt;p&gt;To be expected after launch, we have been fixing bugs and improving UX but now we’re starting the next big phase of KIDLY — opening up the shop to the public.&lt;/p&gt;

&lt;p&gt;We will be taking everything we have learnt with us, continuing to make parents lives easier, by bringing you the best stuff for your baby all in one place.&lt;/p&gt;

&lt;p&gt;To quote James again, this is just the beginning — &lt;a href=&quot;http://kidly.co.uk/&quot;&gt;watch this
space&lt;/a&gt;.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Hello UX designer</title>
			<link href="http://localhost:4000/articles/hello-ux-designer/"/>
			<updated>2016-05-17T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/hello-ux-designer</id>
			<content type="html">&lt;p&gt;I always get a little frustrated if an individual thinks they are solely responsible for UX because actually that’s not true.&lt;/p&gt;

&lt;p&gt;Things are always better when people work together. The world wouldn’t be what it is today if it wasn’t for humans working together to achieve what would previously seem impossible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“UX means User Experience which, in turn, means everything a human experiences when interacting with your product or service. Everything.”
&lt;br /&gt;—&lt;cite&gt;Benedikt Lehnert&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you’re in the office, look to your left and right—they are responsible for UX and guess what, so are you. Here are some examples…&lt;/p&gt;

&lt;p&gt;If you communicate to your customers over social media or work in customer support…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you ensure the application architecture is designed for speed, reliability and iteration, by considering things like CQRS, Micro services and caching…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you write copy for websites and emails or strategise around when to send communication…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you translate designs into responsive and progressively enhanced front-end solutions and advise on what doesn’t work well cross-browser…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you conduct user research…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you test software for quality…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you facilitate the iterative process for regular improvement…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And if you design UIs…&lt;strong&gt;yes you too, are responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about it&lt;/strong&gt;…what good is a beautiful UI if it takes 10 seconds to load or contains crappy content? What good is it if you have a great content, but a terrible customer service? What good is it if everything is great except for the fact the website is unstable and goes down frequently? The answer is of course &lt;strong&gt;not much good!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whoever you are, you’re responsible for UX. I look forward to working with you.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Embracing simplicity</title>
			<link href="http://localhost:4000/articles/embracing-simplicity/"/>
			<updated>2016-03-06T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/embracing-simplicity</id>
			<content type="html">&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/enhanceconf.jpg&quot; alt=&quot;Enhanceconf Q&amp;amp;A&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/psd/&quot;&gt;Paul Downey&lt;/a&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;I had the honour of speaking at &lt;a href=&quot;http://enhanceconf.com/&quot;&gt;Enhanceconf&lt;/a&gt; 2016 — a conference dedicated to Progressive Enhancement. It was a pleasure speaking about a subject close to my heart and I was really chuffed with peoples feedback. Here are my &lt;a href=&quot;https://speakerdeck.com/adamsilver/embracing-simplicity&quot;&gt;slides&lt;/a&gt; and below is the video along with the transcript:&lt;/em&gt;&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;415&quot; src=&quot;https://www.youtube.com/embed/UlzG6-fI00g&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I want to start by using our imagination.&lt;/p&gt;

&lt;p&gt;I want you to imagine your life with less.&lt;/p&gt;

&lt;p&gt;Less tooling. Less libraries. Less frameworks. Less debugging. Less noise. Less debates.&lt;/p&gt;

&lt;p&gt;Less bullshit.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/bullshit.jpg&quot; alt=&quot;Enhanceconf Q&amp;amp;A&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;&lt;a href=&quot;http://deathtobullshit.com&quot;&gt;Death To Bullshit&lt;/a&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The kind of bullshit &lt;a href=&quot;http://bradfrost.com&quot;&gt;Brad Frost&lt;/a&gt; talks about. Less of the superfluous. Less of the unnecessary. Less of the unnecessarily complex.&lt;/p&gt;

&lt;p&gt;All of this while browsers get better and connections get faster, with no effort on your part whatsoever.&lt;/p&gt;

&lt;p&gt;What you might be imagining is a more straightforward tech stack, particularly on the front-end side. And maybe a better experience — one that embraces the web and its conventions, rather than one that tries to trample all over it or enhance it too much.&lt;/p&gt;

&lt;p&gt;With all of this complexity out of the way we would be able to focus on the basics which might just make the biggest difference to our product and make our lives as designers and developers a little easier too.&lt;/p&gt;

&lt;p&gt;I’ve always been obsessed with simplicity, I think as designers and developers we have simplicity somewhat baked into us. We just need to unlock it.&lt;/p&gt;

&lt;p&gt;One early memory I have of this was when I was 15 or 16 years old revising for my maths GCSE.&lt;/p&gt;

&lt;p&gt;When it was time to revise I would find the quietest place in our house which was our dining room. We had this large dining table — it could seat 10 or so people.&lt;/p&gt;

&lt;p&gt;I would go in there with just my essentials: my calculator, pencil case and mock exam paper. Even though I only needed a small part of this table, I would declutter the physical space so that I could declutter my mental space.&lt;/p&gt;

&lt;p&gt;Today, this is what my desktop looks like…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/desktop.jpg&quot; alt=&quot;My desktop&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;My desktop&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clutter free. I am an Alfred keystroke away from my favourite application.&lt;/p&gt;

&lt;p&gt;And, this is what my home screen looks like…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/homescreen.jpg&quot; alt=&quot;My homescreen&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;My homescreen&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clutter free again, and my most used apps in close proximity to my thumb.&lt;/p&gt;

&lt;p&gt;And when I am at work, I meticulously close down program after program after I have finished using it which gives me two benefits on the same theme. The first is that I only have open what I need allowing me to focus. The second is that the computer works better when it’s doing less.&lt;/p&gt;

&lt;p&gt;So when we’re both doing less, we both work better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, web design and development is hard. How can we make it simpler for ourselves and for our users?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s true that simple is &lt;em&gt;complicated&lt;/em&gt; but sometimes simple is &lt;strong&gt;&lt;em&gt;simple&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it’s this latter variety of simple that I want to focus on today because I think that’s what we’re missing. I think there is a huge opportunity to do the simple things and get big results.&lt;/p&gt;

&lt;p&gt;Now, you might be wondering about what all this has to do with Progressive Enhancement?&lt;/p&gt;

&lt;p&gt;Well, Progressive Enhancement revolves around people. People consuming an experience or people designing and building an experience to be consumed. And if there is one thing I know about people it’s that we love complicated.&lt;/p&gt;

&lt;p&gt;We hone in on complicated and skip the basics and I recently came across a story with the same theme that I want to share with you…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/gawande.jpg&quot; alt=&quot;Atul Gawande&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Atul Gawande, Professor of Surgery, Harvard Medical School&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Atul Gawande, Professor of Surgery, Harvard Medical School
This is Atul Gawande. He is the professor of surgery at Harvard Medical School.
&lt;br /&gt;&lt;br /&gt;The World Health Organisation asked him to help reduce the number of deaths during surgery.
&lt;br /&gt;&lt;br /&gt;Did we need more training or more technology?
&lt;br /&gt;&lt;br /&gt;Gawande found they were looking in the wrong place.
He talked to experts in other high-risk professions, such as aviation.
&lt;br /&gt;&lt;br /&gt;What he discovered was that there are usually three main problems.
&lt;br /&gt;&lt;br /&gt;1) Problems of ignorance.
&lt;br /&gt;&lt;br /&gt;2) Problems of technology.
&lt;br /&gt;&lt;br /&gt;3) Problems of ineptitude.
&lt;br /&gt;&lt;br /&gt;All surgical attention had been focused on the first two.
&lt;br /&gt;&lt;br /&gt;They had solved the problem of ignorance: the average surgeon now had ten to 15 years of training.
&lt;br /&gt;&lt;br /&gt;They had solved the problem of technology: surgeons performed up to 4,000 different procedures and prescribed up to 6,000 drugs.
&lt;br /&gt;&lt;br /&gt;But, unlike the aviation industry, they had ignored the third problem.
&lt;br /&gt;&lt;br /&gt;The problem that highly skilled people often make basic mistakes.
&lt;br /&gt;&lt;br /&gt;In the airline industry, this was covered by checklists.
&lt;br /&gt;&lt;br /&gt;Before any pilot takes off, he and his co-pilot run through a checklist.
&lt;br /&gt;&lt;br /&gt;“Brakes — set. Autopilot — disconnected. Fuel level — set”
&lt;br /&gt;&lt;br /&gt;Double-checking the absolute basics don’t get overlooked.
&lt;br /&gt;&lt;br /&gt;Gawande recommended checklists before surgical procedures.
&lt;br /&gt;&lt;br /&gt;Reading aloud and checking off the basics:
&lt;br /&gt;&lt;br /&gt;“Patient’s identity. Name and area for procedure. Known allergies”
&lt;br /&gt;&lt;br /&gt;At first, surgical staff resisted because it felt demeaning.
&lt;br /&gt;&lt;br /&gt;But then the results came in.
&lt;br /&gt;&lt;br /&gt;At the end of the trial, death rates across the hospitals tested had fallen by 47 per cent.
&lt;br /&gt;&lt;br /&gt;If they had seen that result from any drug or technology, it would have been hailed as a miracle cure.
&lt;br /&gt;&lt;br /&gt;But, here, the result came by checking the most basic things.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Because the basics were actually the most important of all.&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;It’s a normal human reaction to forget the importance of getting the basic things right.
&lt;br /&gt;&lt;br /&gt;Human beings get &lt;strong&gt;seduced by complexity&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is exactly what’s happening in our industry. We’re so hypnotised by complexity, we forget the basics.&lt;/p&gt;

&lt;p&gt;We’re so busy worrying about the Javascript this, the framework that, the AJAX, the carousel etc.&lt;/p&gt;

&lt;p&gt;We’re often just rebuilding the same thing we did last year, this year in a new technology or architecture, and I am not sure this is adding value.&lt;/p&gt;

&lt;p&gt;Now, there are many reasons we do complicated. I want to share two interesting ones with you today.&lt;/p&gt;

&lt;p&gt;The first reason is &lt;strong&gt;contribution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We feel that if we put a lot of effort in, then we get a lot of value out but this is often not the case.&lt;/p&gt;

&lt;p&gt;And to demonstrate, I want to share with you a portion of an article I read recently by my friend &lt;a href=&quot;http://www.theluckystrike.co.uk/embracing-simplicity/&quot;&gt;Mark Jenkins&lt;/a&gt;, a designer here in London. It’s entitled “&lt;a href=&quot;https://medium.com/simple-human/contribution-3dff1af38ba4#.nl9814tbr&quot;&gt;Contribution&lt;/a&gt;” and it’s a tale of two designers —&lt;strong&gt; Designer A&lt;/strong&gt; and &lt;strong&gt;Designer B&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Designer A&lt;/strong&gt; spends an hour of their time making 5 screens because they know they need to design 5 screens. They’re not trying to change the world, they achieve what they set out to do.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; takes an entire day to make one screen because they are obsessed with moving pixels, but they are stuck. They can’t let go.
&lt;br /&gt;&lt;br /&gt;They end up doing less because of their own insecurities about their contribution.
&lt;br /&gt;&lt;br /&gt;They create the same thing over and over, they end up with unfinished design(s) or they go right back to the beginning.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; understands that there’s no ‘perfect’.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; believes ‘perfection’ exists, their belief of perfect is jaded by their own inability to understand the solution to the problem.
&lt;br /&gt;&lt;br /&gt;In some cases, they are making a solution for a non existent problem.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; thinks (differently).
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; overthinks.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt;’s contribution is greater because they think about the necessary.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt;’s contribution is lower because they think about the unnecessary.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; is a blocker. To themselves (and the rest of their team).
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; relies on what they know.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; relies on what they don’t know.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; releases early to learn. Then goes back to improve.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; releases late. They learn less because they believe they have perfected something, without testing.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; works with context.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; has no context.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; learns.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; thinks they don’t have to learn.
&lt;br /&gt;&lt;br /&gt;Both A and B are designers. However, there is a HUGE difference between the two of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I guess if I wanted to sum this up nicely for you it would be that value only has a value when it’s value is valued.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/value.jpg&quot; alt=&quot;Value only has a value when it&#39;s value is valued&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And in the case of enhancements, I am not so sure all the enhancements we go about adding are creating better experiences.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/boots.jpg&quot; alt=&quot;Boots logo&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;One example I have of this was when I was working on Boots.com back in 2008, in particular their checkout flow. It was designed as a single page checkout.&lt;/p&gt;

&lt;p&gt;It had all the enhancements including Accordions, AJAX, client-side validation, no page refreshes. As you go through each step, the accordions would expand and collapse.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/boots_single.jpg&quot; alt=&quot;Boots.com single-page checkout diagram&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Boots.com single-page checkout diagram&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We put in so much effort upfront in order to design, build, test, release and finally user test. When we did, we found out that it didn’t work well at all. The effort we put in was far greater than the value we got out.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/boots_page.jpg&quot; alt=&quot;Boots.com multi-page checkout diagram&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Boots.com multi-page checkout diagram&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So we ended up reverting to the basics. Each accordion step became it’s own page with very few enhancements. And the results were extremely positive.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/justeat.jpg&quot; alt=&quot;Just Eat logo&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And as history repeats itself, almost 6 years later, I was working at Just Eat. We had a single page checkout too and we were tasked with improving conversion within the checkout flow.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/justeat_checkout.jpg&quot; alt=&quot;Multi-page checkout on Just Eat&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Multi-page checkout on Just Eat&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So we did the same thing. We put each step onto its own page. Each page had plenty of white-space. Each page had a page refresh. And there was a very clear single focus per page. There was a sprinkling of client-side form validation to save a server round-trip.&lt;/p&gt;

&lt;p&gt;All of this resulted in almost 2 million extra orders per year. That’s orders, not revenue.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/twomillion.jpg&quot; alt=&quot;Two million extra orders per year&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And this is what 2 million people look like.&lt;/p&gt;

&lt;p&gt;Everyone benefited. The business and the users clearly benefited.&lt;/p&gt;

&lt;p&gt;You could say that I became less marketable because my CV was far less “wow” — instead of “Built rich single page checkout with all the fancies”, it became “Built 4 web pages with a form on each”.&lt;/p&gt;

&lt;p&gt;But it’s a little but like how the surgeons found it demeaning to do the most basic things and we saw what results they achieved. And afterall, it’s not about me or my CV, it’s about the results and the human being at the end of them.&lt;/p&gt;

&lt;p&gt;Then comes &lt;strong&gt;technology&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;Technology is easy to complicate. One very simple example of this is the use of Jekyll. For those unaware, Jekyll is a static website generator written in Ruby. It’s geared towards blogs so it basically produces a bunch of articles where each article is made of some simple HTML.&lt;/p&gt;

&lt;p&gt;It’s great because it is just static, has no moving parts. No need for an application server and to note I use it myself.&lt;/p&gt;

&lt;p&gt;The problem comes when we want to add dynamic content such as comments.&lt;/p&gt;

&lt;p&gt;What I typically see is the use of Disqus, a Javascript library that asynchronously loads and injects comments in as an enhancement.&lt;/p&gt;

&lt;p&gt;And of course this type of enhancement has many failure points and when it does fail there are no comments. Now, you could say that this is an acceptable degradation point in that at least everyone gets the article.&lt;/p&gt;

&lt;p&gt;But if you think about it, comments can be really valuable and a comment is just text like the article itself. So ultimately this type of enhancement is completely unnecessary and detrimental to the user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why do we do this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We do this because it makes our lives as developers easier — it’s so easy to throw a piece of Javascript at it.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/problem.jpg&quot; alt=&quot;Make it your problem, not your users.&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But ultimately we have put our needs before the needs of the user which as &lt;a href=&quot;https://adactio.com/links/10335&quot;&gt;Jeremy Keith&lt;/a&gt; says…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I had to choose between making something my problem and making something the users problem, I would make it mine every time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this for me is bang on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what can we do with just the basics?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well I have already alluded to this somewhat with the Boots and Just Eat case studies. But I am thinking about text, links, forms, pages, headings, paragraphs etc.&lt;/p&gt;

&lt;p&gt;And if we hone in on just text for a moment…&lt;/p&gt;

&lt;p&gt;Is the copy legible? Are we choosing the right font? The right font-size, letter spacing, line height? Are we humanising our copy, making it appropriate for the audience? Have we got too much or too little text? Are we showing it at the right time.&lt;/p&gt;

&lt;p&gt;You see, there is so much to explore with just the basics.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/essential.jpg&quot; alt=&quot;Mobile first is really just essential only&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I am also thinking mobile first, which to &lt;em&gt;me&lt;/em&gt; just means small screen first, which to me just &lt;em&gt;really&lt;/em&gt; means essential first, which to me just really &lt;em&gt;really&lt;/em&gt; means essential only.&lt;/p&gt;

&lt;p&gt;And this has been a real boon for the industry because it has forced us to cater for small screens and picking what is truly essential to the experience which scales up easily to big screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We must stop fearing the page refresh and stop fearing white space.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we trim the fat for all, and when we build these things in the right way the page refresh (something we have always had) goes unnoticed and can be responsible for some amazingly simple experiences.&lt;/p&gt;

&lt;p&gt;And I am not saying that we should oversimplify, nor that there isn’t a place for complicated. But if “ten” is complicated, and “one” is simple, we spend way to much time near the ten mark and I think we need to bring it closer to one at least by default.&lt;/p&gt;

&lt;p&gt;With regards to Progressive Enhancement…&lt;/p&gt;

&lt;p&gt;Progressive Enhancement is not a prescription to enhance. It’s a wonderful strategy should we determine that an enhancement is going to add value. We don’t actually have to enhance — we can choose not to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how might we get this into our everyday processes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We all know the benefits of iterative development and user-testing and I think Progressive Enhancement lends itself perfectly to this.&lt;/p&gt;

&lt;p&gt;I suggest we design and develop the core experience. Then release and test with users. At this point, you might find that this core experience is all that is needed. Great — move on to the next feature.&lt;/p&gt;

&lt;p&gt;If it doesn’t work well enough, we can iterate. I suggest we practice thoughtful reduction rather than mindless addition by exploring the basics a little deeper. If it works now, great — now move on.&lt;/p&gt;

&lt;p&gt;If this still doesn’t work you have my permission to enhance.&lt;/p&gt;

&lt;p&gt;But the great thing here is that you have delivered little and often, learnt little often which is great for team morale and momentum. And of course we know along the way that our effort is adding value in terms of team knowledge and product user experience.&lt;/p&gt;

&lt;p&gt;It is also great because it can reduce the emotional attachment we are prone to. As designers and developers if we put a lot of upfront effort in then we get more attached to our work. If we let the results do the talking, then we remove this problem which again is great for morale and momentum.&lt;/p&gt;

&lt;p&gt;And small steps can result in small wins, and small wins are worth celebrating.&lt;/p&gt;

&lt;p&gt;But small steps can result in big wins, which are again well worth celebrating.&lt;/p&gt;

&lt;p&gt;Ultimately, this is what I want for us, this is what I want for the industry, and this is what I want for our users.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;It was a pleasure to speak and share my knowledge and experiences alongside the others who were there: &lt;a href=&quot;https://twitter.com/thatnatbuckley&quot;&gt;Nat Buckley&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/anna_debenham&quot;&gt;Anna Debenham&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/stilkov&quot;&gt;Stefan Tilkov&lt;/a&gt;, &lt;a href=&quot;Forbes Lindesay&quot;&gt;Forbes Lindesay&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/OliverJAsh&quot;&gt;Oliver Joseph Ash&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/StuCoxMedia&quot;&gt;Stu Cox&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil Hawksworth&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bruised_blood&quot;&gt;Stephen Waller&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jensimmons&quot;&gt;Jen Simmons&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/USA2DAY&quot;&gt;Robin Christopherson&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/radiomorillo&quot;&gt;Stephanie Morillo&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/AaronGustafson&quot;&gt;Aaron Gustafson&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/adactio&quot;&gt;Jeremy Keith&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally I want to thank &lt;a href=&quot;https://twitter.com/simonmcmanus&quot;&gt;Simon McManus&lt;/a&gt; for inviting me to talk and a brilliantly organised conference — thank you!&lt;/em&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Why hover menus are problematic</title>
			<link href="http://localhost:4000/articles/why-hover-menus-are-problematic/"/>
			<updated>2015-12-27T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/why-hover-menus-are-problematic</id>
			<content type="html">&lt;p&gt;Hover menus are very popular on the web. People think they are popular because they “aid discoverability” and “save users a click”, the latter of which is a common &lt;a href=&quot;http://uxmyths.com/post/654026581/myth-all-pages-should-be-accessible-in-3-clicks&quot;&gt;UX fallacy&lt;/a&gt;. The thing is, hover menus are problematic and here’s why:&lt;/p&gt;

&lt;h2 id=&quot;the-hover-tunnel-and-accidental-deactivation&quot;&gt;1. The hover tunnel and accidental deactivation&lt;/h2&gt;

&lt;p&gt;When a user opens a menu, they can’t intuitively move the mouse directly to a sub menu item because this will accidentally close the menu — either by leaving the menu or activating another menu by accident. This makes the menu very hard and frustrating to use which &lt;strong&gt;drains peoples energy&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover1.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;The menu accidentally closes when you move directly from Companies to the latest article&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover2.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;To keep the menu open, you must move the mouse carefully down and then across&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;understanding-user-intention-and-accidental-activation&quot;&gt;2. Understanding user intention and accidental activation&lt;/h2&gt;

&lt;p&gt;Hovering is not an intention to activate. It is at most a &lt;em&gt;suggestion&lt;/em&gt; that the user &lt;em&gt;might&lt;/em&gt; interact with something. Technically, the user is always hovering. This is why hover states are beneficial to the user, such as a change of cursor (browsers do this by default) and a change of style.&lt;/p&gt;

&lt;p&gt;With hover, a user can accidentally open a menu even though they never intended it and when this happens it obscures the content behind disrupting the experience.&lt;/p&gt;

&lt;p&gt;Also, if a user intends to click a link within a page, when the menu pops open just before clicking that link, the user may end up navigating away accidentally. I have seen this happen several times and it’s a poor experience.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover3.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;User wants to click link below the menu but...&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover4.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;...the menu opens accidentally so the user clicks &quot;Energy&quot; instead&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Often to work around these issues, a small delay is added before showing a menu, but this induces another problem — when the user does intend to activate the menu, they have to wait for the delay to finish which makes the menu feel unresponsive again causing further frustration.&lt;/p&gt;

&lt;h2 id=&quot;accessibility-and-fine-motor-skills&quot;&gt;3. Accessibility and fine motor skills&lt;/h2&gt;

&lt;p&gt;Items on the bottom of the menu are hard to click because the user might accidentally move the mouse off leaving the user to reopen the menu again.&lt;/p&gt;

&lt;h2 id=&quot;touch-enabled-devices-and-responsive-design&quot;&gt;4. Touch-enabled devices and Responsive Design&lt;/h2&gt;

&lt;p&gt;There is no hover on touch-enabled devices (unless the user plugs in a pointing device). And touch-enabled devices are everywhere and they come in all shapes and sizes.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Instead of focusing on device classification, focus on device capability. You can’t control who will access your website and with what device so it’s advisable to design for touch, mouse, finger, keyboard interchangeably.&lt;/p&gt;

&lt;p&gt;The simplest solution is to show a menu via click. Click works when the user taps, when the user clicks with the mouse, and when the user tabs via keyboard and presses enter.&lt;/p&gt;

&lt;p&gt;Also with click, once activated it stays open &lt;em&gt;until&lt;/em&gt; the user clicks elsewhere which solves the tunnel problem altogether. And because clicking or tapping is a clear intention, there is no accidental activation/deactivation solving all the aforementioned problems above.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Why we stopped tasking</title>
			<link href="http://localhost:4000/articles/why-we-stopped-tasking/"/>
			<updated>2015-12-15T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/why-we-stopped-tasking</id>
			<content type="html">&lt;p&gt;Scrum advocates the breaking down of stories into tasks because: it helps to estimate more accurately, encourages collaboration and helps to show granular progress.&lt;/p&gt;

&lt;p&gt;This used to make sense to me until I was working with someone who convinced me and the rest of the development team to stop tasking altogether. Once we did, we never looked back. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;we-gained-60-hours-back-per-sprint&quot;&gt;1. We gained 60 hours back per sprint&lt;/h2&gt;
&lt;p&gt;At least 50% of our Sprint Planning sessions involved breaking down stories into tasks. When we stopped tasking, the sessions went down from about five hours to less than two. And considering our team had over 20 people we gained a lot of development time.&lt;/p&gt;

&lt;h2 id=&quot;defining-tasks-ahead-of-time-is-inaccurate&quot;&gt;2. Defining tasks ahead of time is inaccurate&lt;/h2&gt;

&lt;p&gt;When coding it is inevitable that the solution will change as development unearths unforeseen scenarios and opportunity for improvement. This is why tasking is inaccurate.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Weeks of programming can save you hours of planning.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t bother, give yourself more time to code instead.&lt;/p&gt;

&lt;h2 id=&quot;many-tasks-are-repetitive&quot;&gt;3. Many tasks are repetitive&lt;/h2&gt;

&lt;p&gt;Different stories typically require similar tasks: unit tests, a controller action, a view template, some JS enhancement, some styling etc. Specifying these as tasks wasn’t helpful to us. We knew what we had to do and we had a clear Definition of Done and Acceptance Criteria, which ensured the smooth delivery of each story.&lt;/p&gt;

&lt;h2 id=&quot;many-tasks-are-carried-out-in-parallel&quot;&gt;4. Many tasks are carried out in parallel&lt;/h2&gt;

&lt;p&gt;Often many tasks are carried at at the same time. For example we would typically write HTML &amp;amp; CSS together as well as writing JS &amp;amp; unit tests together. Often the JS enhanced version would need extra HTML and CSS. This meant that most (if not all) tasks moved from in-progress to complete at the same time meaning we didn’t show granular progress. We may as well have moved the entire story which is what we did in the end.&lt;/p&gt;

&lt;h2 id=&quot;our-estimates-didnt-improve-because-of-tasking&quot;&gt;5. Our estimates didn’t improve because of tasking&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://illustratedagile.com/2012/11/13/the-5-stages-of-user-story-sizing/&quot;&gt;Estimation is based on several things&lt;/a&gt;. Most importantly estimation comes from experience. Experience working together with a team you know well, on a particular project within a particular organisation. Only then will you have a predictable velocity.&lt;/p&gt;

&lt;h2 id=&quot;the-board-was-easier-to-use&quot;&gt;6. The board was easier to use&lt;/h2&gt;

&lt;p&gt;Removing the tasks instantly decluttered the board. No longer did we cram hundreds of tasks into each swim lane. Instead we had a single card per story. Our board was easy to understand, use and explain.&lt;/p&gt;

&lt;h2 id=&quot;we-wasted-less-paper&quot;&gt;7. We wasted less paper&lt;/h2&gt;
&lt;p&gt;Silly but true! A lot less trees were killed when stopped tasking.&lt;/p&gt;

&lt;h2 id=&quot;collaboration-was-achieved-by-the-overall-process&quot;&gt;8. Collaboration was achieved by the overall process&lt;/h2&gt;

&lt;p&gt;Our team didn’t need tasks to enable collaboration. We sat in close proximity, had regular, useful and well-timed meetings, we paired when appropriate and had regular productive feedback loops.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Why Infinite Scrolling is probably a bad idea</title>
			<link href="http://localhost:4000/articles/why-infinite-scrolling-is-probably-a-bad-idea/"/>
			<updated>2015-11-24T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/why-infinite-scrolling-is-probably-a-bad-idea</id>
			<content type="html">&lt;p&gt;On more than one occasion I have found myself trying to convince team-mates that Infinite Scrolling and its close relative &lt;em&gt;Show More&lt;/em&gt; is more likely to degrade the experience than improve upon it. I thought I would jot down my notes on the matter and share them with you. Here they are:&lt;/p&gt;

&lt;h2 id=&quot;the-footer-becomes-unusable&quot;&gt;1. The footer becomes unusable&lt;/h2&gt;

&lt;p&gt;People understand what a footer is and that it is likely to contain links to important secondary information. Infinite scrolling means the footer keeps getting pushed just out of reach by the freshly loaded content.&lt;/p&gt;

&lt;h2 id=&quot;performance-degrades&quot;&gt;2. Performance degrades&lt;/h2&gt;

&lt;p&gt;If you’re using infinite scrolling on a long page, you’re constantly loading more and more content into memory. This will have a negative impact on page performance, since the browser has much more work to do in order to render the page.&lt;/p&gt;

&lt;p&gt;Also, the page needs to listen constantly for scroll events which can cause client-side performance problems.&lt;/p&gt;

&lt;h2 id=&quot;analytics-is-harder-to-implement&quot;&gt;3. Analytics is harder to implement&lt;/h2&gt;

&lt;p&gt;Due to the way infinite scrolling works, dropping some Google Analytics code into the page isn’t going to give you much insight. Therefore you will need to write your own analytics implementation to track newly loaded content. This is then more costly to develop, maintain and test.&lt;/p&gt;

&lt;h2 id=&quot;bookmarking-and-the-back-button-become-problematic&quot;&gt;4. Bookmarking and the back button become problematic&lt;/h2&gt;

&lt;p&gt;You can’t easily bookmark a segment of results to come back to or share with your friends.&lt;/p&gt;

&lt;p&gt;Even if you do manage it and you end up bookmarking segment 15 (where each segment is say 40 items) then when you return to that bookmark, you suffer from long page-load times.
Similarly, you can’t use the back button as it doesn’t go back to the previous segment of results. Instead it goes back to the previous page.&lt;/p&gt;

&lt;h2 id=&quot;people-may-suffer-from-choice-paralysis&quot;&gt;5. People may suffer from choice paralysis&lt;/h2&gt;

&lt;p&gt;With very long pages people can feel paralysed by the amount of content and choices—infinite scrolling may well cause inaction and in-turn, lower click through rates. Just see &lt;a href=&quot;http://danwin.com/2013/01/infinite-scroll-fail-etsy/&quot;&gt;what happened to Etsy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-scrollbar-becomes-unusable-and-untrustworthy&quot;&gt;6. The scrollbar becomes unusable and untrustworthy&lt;/h2&gt;

&lt;p&gt;The scroll bar inevitably becomes very small and hard to use. It’s hard to place your mouse on the scrollbar and the slightest movement might scroll a large part of the page when you only wanted to scroll a little bit.&lt;/p&gt;

&lt;p&gt;Even worse, the scrollbar plays a trick on users as it displays the page length inaccurately — the scrollbar will be near the bottom and then suddenly when the items are loaded in, it will jump up and reveal there is now more content to scroll through. &lt;strong&gt;It’s dishonest design to tell people that they’re almost done when they’re not&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-generally-hard-to-use&quot;&gt;7. It’s generally hard to use&lt;/h2&gt;

&lt;p&gt;Design is about communication. When someone arrives at a set of results, they want to instantly be able to understand what’s going on…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What am I looking at?&lt;br /&gt;
How do I get to the next set of results?&lt;br /&gt;
How many results are there?&lt;br /&gt;
How long will it take me to browse through them all?&lt;br /&gt;
Should I bother to browse through them?&lt;br /&gt;
Or should I search again?&lt;br /&gt;
Or should I try filtering instead?&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the user doesn’t understand the answers to these questions, they will have a feeling of unrest, uncertainty and disorientation. When they do know the answers to these questions, they can make informed and quick decisions, without losing energy.&lt;/p&gt;

&lt;p&gt;With pagination, people can anticipate the effort required to browse through the results. There is a happy sense of completion when a page is finished. There is a clear end. Pagination gives people control to decide whether or not to continue to the next page.&lt;/p&gt;

&lt;p&gt;Also, smaller pages, means a faster, more focused, less overwhelming experience with none of the pitfalls described above. People don’t mind clicking links (to new pages) as long as each click is meaningful and leads them closer to their desired goal.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Designing honestly for the web</title>
			<link href="http://localhost:4000/articles/designing-honestly-for-the-web/"/>
			<updated>2015-10-09T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/designing-honestly-for-the-web</id>
			<content type="html">&lt;p&gt;I have been designing and building websites for over half of my life now. During this time I have witnessed designers, developers and businesses designing dishonestly over and over again.&lt;/p&gt;

&lt;p&gt;There are many aspects of dishonest design. This article hones in on just one of these — the aspect that ignores the platform you are designing for. In the context of the web, I call it “bending the web”.&lt;/p&gt;

&lt;p&gt;I must admit, I have been known to bend it on more than a few occasions myself over the course of my career. I think that’s okay though because only by experiencing or reading about the mistakes we make, can we avoid them in the future. Here are some examples in which I have bent the web:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I used tables for layout.&lt;/li&gt;
  &lt;li&gt;I have given submit buttons the same “hand” cursor as a link.&lt;/li&gt;
  &lt;li&gt;I created a custom file input so that it looked “nicer”.&lt;/li&gt;
  &lt;li&gt;I have hidden labels to build a “cleaner” UI.&lt;/li&gt;
  &lt;li&gt;I have used a select box for navigation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“A Dao of Web Design” written by John Allsopp over one and half decades ago, has some timeless insights that gives us more than a clue, as to why this happens and continues to happen today.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If you’ve never watched early television programs, it’s instructive viewing. Television was at that time often referred to as “radio with pictures,” and that’s a pretty accurate description. Much of television followed the format of popular radio at that time.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And just like the relationship between television and radio, there is a relationship between print and web.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In print the designer is god. An enormous industry has emerged from WYSIWYG, and many of the web’s designers are grounded in the beliefs and practices, the ritual of that medium. As designers we need to rethink this role, to abandon control, and seek a new relationship with the page.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;We don’t like change and we can’t let go of control.&lt;/strong&gt; We take our long, deep-rooted belief and experience in a previous medium, and try and make the new one conform to that belief and experience, however misguided and problematic that is.&lt;/p&gt;

&lt;p&gt;When the web came along, we believed we should have the same visual control as we did in print design. Today, it seems, we still have this same, misguided belief. Today we don’t just think it should behave like print, but also more app like etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what does this have to do with dishonest design?&lt;/strong&gt; When we bend the web we are designing dishonestly. And when we design dishonestly we tend to design an unfriendly, often unintuitive experience — which can actually break the inherent features of the web. The very same features which make the web so simple, so powerful, so amazing.&lt;/p&gt;

&lt;p&gt;And truth be told, it comes down to ignorance. &lt;em&gt;I&lt;/em&gt; was ignorant. &lt;em&gt;You&lt;/em&gt; have been ignorant. The question is are you &lt;em&gt;still?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The web and the web browser gives us an amazing set of tools, not to be trifled with. Elements such as links, buttons, pages, forms, back buttons, bookmarking, images, videos, headings, paragraphs, on focus outlines etc.&lt;/p&gt;

&lt;p&gt;Do you honestly understand what all these elements mean to the browser? And how different browsers utilise these elements to the benefit of the user? Or do you see visual manifestations of these features and try to change them or trample over them?&lt;/p&gt;

&lt;p&gt;Do you look at what other websites do on your Macbook Pro and iPhone 6 and think “if it’s good enough for them, it’s good enough for me”?
Do you sometimes design without a thought for how the browser does it?&lt;/p&gt;

&lt;p&gt;Designing a UI that works well on a different platform, but when using it on the web comes with a host of problems (think &lt;a href=&quot;/articles/why-infinite-scrolling-is-probably-a-bad-idea/&quot;&gt;infinite scroll&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Have you ever used, designed or built a drop down select menu without a submit button? I have. When you select an option, the page refreshes and this simple bending comes with a host of &lt;a href=&quot;/articles/misusing-the-select-control/&quot;&gt;problems for the user&lt;/a&gt;. The point is, a select box is meant to be used for input, not for navigation; that is what links are for.&lt;/p&gt;

&lt;p&gt;Another useful thing about the web, is that browsers and devices get better all the time. When you design honestly, the experience gets better and better all by itself with zero effort from the designer — for proof just interact with a form on your mobile and notice how the device helps you do that.&lt;/p&gt;

&lt;p&gt;Designing dishonestly not only costs the user, but costs the developer time and the business money. &lt;strong&gt;You might get away with the odd bit of dishonest design, but why would you want to?&lt;/strong&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Writing Javascript that conforms to Progressive Enhancement</title>
			<link href="http://localhost:4000/articles/writing-javascript-that-conforms-to-progressive-enhancement/"/>
			<updated>2015-08-16T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/writing-javascript-that-conforms-to-progressive-enhancement</id>
			<content type="html">&lt;p&gt;The Javascript element of Progressive Enhancement, is quite possibly the most important and misunderstood aspect of client-side Javascript development, period.&lt;/p&gt;

&lt;p&gt;This article addresses these misunderstandings and provides techniques that can be considered cutting-edge, even though they have been around for a very long time and have been forgotten.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The problems we have with websites are ones we create ourselves”
&lt;br /&gt;— &lt;cite&gt;Motherfuckingwebsite.com&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The beauty of the web is that by default, it is accessible to &lt;em&gt;everyone&lt;/em&gt;. It’s us developers that come along and ruin it. I think most people have the right intention, which is to serve the users first, but often we fail in implementation which we’ll explore shortly.&lt;/p&gt;

&lt;p&gt;But before we do, what is the best way to define what Progressive Enhancement &lt;em&gt;really&lt;/em&gt; is? I think the following description does it justice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Progressive Enhancement is the approach of providing a baseline &lt;strong&gt;core&lt;/strong&gt; experience for everyone; and creating a better &lt;strong&gt;enhanced&lt;/strong&gt; experience for people who use a more capable browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst Progressive Enhancement doesn’t just pertain to Javascript, it is definitely the technology that developers tend to struggle with the most. We just can’t seem to answer the following question with sophistication:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“How am I meant to write Javascript in a Progressive Enhancement way?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst this question is not the easiest one to answer, answers do exist, and they are not &lt;em&gt;that&lt;/em&gt; difficult once you have taken the time to truly understand them.&lt;/p&gt;

&lt;h2 id=&quot;progressive-enhancement-myths&quot;&gt;Progressive Enhancement Myths&lt;/h2&gt;

&lt;p&gt;There are many &lt;a href=&quot;http://www.sitepoint.com/javascript-dependency-backlash-myth-busting-progressive-enhancement/&quot;&gt;myths about Progressive Enhancement&lt;/a&gt;. I want to point out 3 in particular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Unobtrusive Javascript is not Progressive Enhancement&lt;/strong&gt;. Simply placing your Javascript code in external files, does not, in any way, address the problem of Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prepraring for users that disable Javascript is barely scratching the surface&lt;/strong&gt;. It’s true — some people disable Javascript but there are so many other reasons why Javascript &lt;em&gt;is&lt;/em&gt; going to fail as &lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;Everyone has Javascript, Right?&lt;/a&gt; explains. The last point in that article is most common and most important: &lt;strong&gt;using Javascript that the browser doesn’t recognise&lt;/strong&gt;. Which leads on to…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Unlike HTML and CSS, Javascript does not degrade gracefully without developer intervention.&lt;/strong&gt; HTML and CSS degrade (or enhance depending on the way you see things) without any extra effort. Consider &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;border-radius&lt;/code&gt;. When unsupported, the input reverts to a standard text control and forgoes curved borders. With Javascript, the browser will error when it tries to execute code it doesn’t understand. As an example, try running the following in IE8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var form = document.forms[0];
form.attachEvent(&#39;submit&#39;, function() {
    window.event.returnValue = false;
    var widgets = document.getElementsByClassName(&#39;widget&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above errors because IE8 doesn’t support the retrieving of elements by class name. The problem here is that the page didn’t &lt;em&gt;fully&lt;/em&gt; enhance. The user didn’t get the enhanced experience. Nor did they get the core experience. &lt;em&gt;No&lt;/em&gt;, instead they got the &lt;em&gt;fuck you&lt;/em&gt; experience.&lt;/p&gt;

&lt;p&gt;The browser and feature in this example is not the relevant point here. It could be &lt;em&gt;any&lt;/em&gt; browser and &lt;em&gt;any&lt;/em&gt; feature. It makes no difference how new a browser is or what cutting-edge features it claims to support.&lt;/p&gt;

&lt;h2 id=&quot;what-shouldnt-you-do&quot;&gt;What shouldn’t you do?&lt;/h2&gt;

&lt;p&gt;Sometimes, it can be helpful to explore how others are tackling the problem, because when you find flaws, you can avoid them and explore a more successful path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Some ignore the problem exists.&lt;/strong&gt; If they haven’t experienced a problem, then they often think one does not exist. Or perhaps, they believe it to be an edge case. Regardless, this is unfortunate to the people using the website and the potential loss to the business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Some also abdicate responsibility by using 3rd party libraries without checking under the hood for quality.&lt;/strong&gt; And often, these libraries support a subset of browsers i.e. it’s &lt;a href=&quot;https://gist.github.com/david-mark/06b9879f963ebb0eed62&quot;&gt;multi-browser as opposed to cross-browser&lt;/a&gt; — a sure sign that the library does not practice Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;People who use &lt;em&gt;other&lt;/em&gt; browsers get the aforementioned &lt;em&gt;fuck you&lt;/em&gt; experience, often at times when it would be straightforward to provide a &lt;em&gt;core&lt;/em&gt; experience. The same thing happens when a library releases a new version and happens to drop support for more browsers — this of course is a never ending cycle.&lt;/p&gt;

&lt;h2 id=&quot;cutting-the-mustard-falls-short&quot;&gt;Cutting The Mustard falls short&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://responsivenews.co.uk/post/18948466399/cutting-the-mustard&quot;&gt;Cutting The Mustard&lt;/a&gt; (CTM) is a relatively new approach to Progressive Enhancement, one which has the premise of a reliable solution and is based on the concept of a core and an enhanced experience. However, it’s implementation (shown below) falls short.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(document.querySelector &amp;amp;&amp;amp; window.addEventListener &amp;amp;&amp;amp; window.localStorage) {
    // bootstrap application
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works by &lt;em&gt;detecting&lt;/em&gt; a few &lt;em&gt;choice&lt;/em&gt; browser APIs, in order to &lt;em&gt;infer&lt;/em&gt; that the browser is “modern” — something that is impossible to determine and irrelevant anyway.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Impossible&lt;/em&gt;, considering the sheer amount of new browsers being released and &lt;em&gt;irrelevant&lt;/em&gt;, because release date does not determine capability. Besides, every browser was new once, so it’s quite obvious that an inference for modernity provides little value.&lt;/p&gt;

&lt;p&gt;Once CTM determines it’s “modern”, the Javascript application starts and (attempts to) provide the enhanced experience. The emphasis on &lt;em&gt;browsers&lt;/em&gt; as opposed to &lt;em&gt;features&lt;/em&gt;, suggests this technique is frail. And, inference is little better than User Agent sniffing, which is something that Richard Cornford explains superbly in &lt;a href=&quot;http://jibbering.com/faq/notes/detect-browser/&quot;&gt;Browser Detection (and What To Do Instead)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More specifically, CTM has the following problems of note:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Detecting host objects like this is dangerous&lt;/strong&gt;. &lt;a href=&quot;http://www.cinsoft.net/host.html&quot;&gt;H is for Host&lt;/a&gt; explains why this is dangerous and provides a simple solution to the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Detecting the presence of an API is not enough&lt;/strong&gt;. CTM only &lt;em&gt;detects&lt;/em&gt; host methods but often APIs are buggy. This is why feature &lt;em&gt;testing&lt;/em&gt; is important. Nicholas Zakas provides an excellent case study in his short ebook &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001655/index.html&quot;&gt;The Problem with Native JavaScript APIs&lt;/a&gt;. Additionally, Peter Michaux’s article &lt;a href=&quot;http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting&quot;&gt;Feature Detection: State of the Art Browser Scripting&lt;/a&gt; explains everything you need to know about feature detection and feature testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. CTM degrades the experience unnecessarily&lt;/strong&gt;. CTM can easily suppress a perfectly capable browser from providing the enhanced experience. For example, if you wanted client-side form validation, something that say IE8 (or 6 for that matter) is perfectly capable of, CTM disregards IE8 and will only give those users the &lt;em&gt;core&lt;/em&gt; experience — resorting to server round trips  which is an &lt;em&gt;unnecessarily&lt;/em&gt; poor experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Some CTM implementations rely on Javascript polyfills to plug missing gaps&lt;/strong&gt;. Ignoring the fact that &lt;a href=&quot;/articles/the-disadvantages-of-javascript-polyfills/&quot;&gt;polyfills are full of problems&lt;/a&gt;, it is clear that if developers are mixing them in with CTM, this more than indicates CTM is not enough on its own to determine whether the browser is capable of delivering an enhanced experience (or not).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. The CTM condition needs constant maintenance as new browsers are released&lt;/strong&gt;. Again it’s that same old problem — when can you drop support for a browser? This question doesn’t really ever have to be asked. Either the browser has the required working features or it doesn’t — that is, it’s about features, not browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. It’s unreliable&lt;/strong&gt;. If the application uses any API that is not within the CTM test, the chance of a &lt;em&gt;fuck you&lt;/em&gt; experience is high. As an  example, it will break in browsers where &lt;code&gt;matchMedia&lt;/code&gt; isn’t provided, or even in browsers where it is provided but it’s buggy. Furthermore, &lt;code&gt;querySelector&lt;/code&gt; itself has many bugs depending on context and arguments supplied, further reducing the reliability of CTM. An example follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(document.querySelector &amp;amp;&amp;amp; window.addEventListener &amp;amp;&amp;amp; window.localStorage) {
    // application that uses other APIs

    window.addEventListener(&quot;load&quot;, function(e) {
        // FAIL = ANOTHER FUCK YOU
        var matches = window.matchMedia(...);
        // ...other stuff...
    }, false);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had a little chat with Jeremy Keith about this and he rightly says that you can use CTM better by detecting all the APIs. He is definitely right of course.&lt;/p&gt;

&lt;p&gt;My point is that this is how the technique is advertised and often implemented, and that in addition to this there are several other points of failure to consider anyway.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-solution&quot;&gt;What &lt;em&gt;is&lt;/em&gt; the solution?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I’ve always maintained that, given the choice between making something my problem, and making something the user’s problem, I’ll choose to make it my problem every time.”
&lt;br /&gt;— &lt;cite&gt;Jeremy Keith&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have made it this far, you probably believe in people &lt;em&gt;first&lt;/em&gt;, whether it’s the users or the client. And, that Progressive Enhancement is the way to enable that belief.&lt;/p&gt;

&lt;p&gt;In order to provide a core experience, the site &lt;em&gt;must&lt;/em&gt; work without Javascript. Why? Because that is the experience a user will get, when Javascript &lt;em&gt;is&lt;/em&gt; enabled, but incapable of running (for whatever reason).&lt;/p&gt;

&lt;p&gt;Then, in order to determine that the browser can provide the enhanced experience, you must detect and where necessary, test &lt;em&gt;all&lt;/em&gt; of the features used by your application &lt;em&gt;before&lt;/em&gt; your application  uses them. This will ensure the page doesn’t end up irrevocably broken, which is something your users will thank you for.&lt;/p&gt;

&lt;p&gt;The only way to reliably do this is through wrappers, or &lt;em&gt;facades&lt;/em&gt; if jargon is your thing. A library that employs Progressive Enhancement &lt;em&gt;must&lt;/em&gt; provide a dynamic API. Dynamic, in that it adapts and changes based on the host environment i.e. the browser. This is what it basically looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(lib.hasFeatures(&#39;find&#39;, &#39;addListener&#39;, &#39;storeValue&#39;)) {
    var el = lib.find(&#39;.whatever&#39;);
    lib.addListener(el, &quot;click&quot;, function() {
	    lib.storeValue(&#39;key&#39;, &#39;value&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1. Notice how remarkably similar CTM &lt;em&gt;looks&lt;/em&gt; in comparison.&lt;/strong&gt; The difference is that the application doesn’t directly interface with browser APIs. Facades provide a leaner, context-specific API, that allows you to iron out bugs, all of which reliably enables Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Also note, the one-to-one mapping between what is &lt;em&gt;checked&lt;/em&gt; in the condition and what is &lt;em&gt;used&lt;/em&gt; by the application.&lt;/strong&gt; This is &lt;em&gt;vital&lt;/em&gt;. If you break this rule, you significantly increase the chance of providing the &lt;em&gt;fuck you&lt;/em&gt; experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. There is no need for polyfills.&lt;/strong&gt; The library either provides the method or it doesn’t, no halfway houses, no caveats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Application logic is completely decoupled from browser logic.&lt;/strong&gt; This is something Nicholas Zakas writes about in many of his articles and books. Basically this is good for sanity and maintainability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. In the event that Javascript is enabled and that the condition does &lt;em&gt;not&lt;/em&gt; pass, the user gets the degraded experience.&lt;/strong&gt; In Cutting The Mustard lingo, it simply doesn’t cut it.&lt;/p&gt;

&lt;p&gt;At this point, some might say they don’t concern themselves with browser problems, as libraries take care of them (the majority unfortunately don’t). They might even portray themselves as application developers, but just because responsibility is abdicated, doesn’t mean the problem isn’t there.&lt;/p&gt;

&lt;p&gt;The idea of abstractions are good, the idea of several abstractions i.e. a library, is also good. But if that library is monolithic in nature, context-less, lacks feature detection and feature testing, leans on polyfills (or browser sniffing or object inferences etc) and does &lt;strong&gt;not&lt;/strong&gt; expose a dynamic API, then ultimately you are unable to Progressively Enhance your application and your users and the business you work for, will suffer for it.&lt;/p&gt;

&lt;p&gt;At the very least, it is beneficial to be able to spot code that does not conform to the principles of Progressive Enhancement. Particularly, the kind that doesn’t even attempt to degrade gracefully in the face of danger.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-build-a-library-like-this&quot;&gt;How do I build a library like this?&lt;/h2&gt;

&lt;p&gt;To explain how to build a library that conforms to Progressive Enhancement would likely require a book of its own. Fortunately, Peter Michaux’s article &lt;a href=&quot;http://peter.michaux.ca/articles/cross-browser-widgets&quot;&gt;Cross-Browser Widgets&lt;/a&gt; provides a detailed walkthrough all in one article. However, &lt;em&gt;this&lt;/em&gt; article wouldn’t be complete without a short example of its own would it?&lt;/p&gt;

&lt;p&gt;This example will also demonstrate that Progressive Enhancement is not a drag in the way of “having to support old irrelevant browsers”. Quite the opposite in-fact. The words “drops support for” changes to “degrades gracefully in”. You also get to determine an appropriate degradation point suitable for your project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// library.js
var lib = {};

// Note: use isHostMethod - H is for Host.
if(document.documentElement.classList.add) {
	lib.addClass = function(el, className) {
		return el.classList.add(className);
	};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then the calling application code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
if(lib.addClass) {
	// some application that must provide the ability to add a class to an element, in order to provide the enhanced experience

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice, that this application only enhances where the browser supports &lt;code&gt;classList&lt;/code&gt;, which generally speaking are cutting edge browsers (at time of writing), meaning that this application will degrade in IE9 (and below) as well as a bunch of other browsers. That’s not a problem though, they will just get the &lt;em&gt;core&lt;/em&gt; experience. If you wanted to support those browsers, something which in this case is easy to achieve, then you could add another fork:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// library.js
var lib = {};

// Note: use isHostMethod - Peter&#39;s article covers this
if(document.documentElement.classList.add) {
	lib.addClass = function(el, className) {
		return el.classList.add(className);
	};
} else if(typeof html.className === &quot;string&quot;) {
	lib.addClass = function(el, className) {
		var re;
		if (!el.className) {
			el.className = className;
		} else {
			re = new RegExp(&#39;(^|\\s)&#39; + className + &#39;(\\s|$)&#39;);
			if (!re.test(el.className)) {
				el.className += &#39; &#39; + className;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method now supports more browsers and your application code didn’t change. Equally, you could remove this fork again in the future, when you think it’s more acceptable to give those browsers the &lt;em&gt;core&lt;/em&gt; experience. Perhaps the number of visitors naturally dropped for a particular set of browsers. Or maybe, it’s not worth the development effort to write a second fork etc.&lt;/p&gt;

&lt;p&gt;Regardless, a library never &lt;em&gt;has&lt;/em&gt; to drop support in the traditional sense — it can simply drop &lt;em&gt;enhanced&lt;/em&gt; support.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Progressive Enhancement is something that puts users first. The misunderstandings of Progressive Enhancement, when broken down piece by piece are easy to understand, but if just one of those pieces falls down, technical implementations tend to fall short of the mark.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is quite common in the industry and it’s the people that suffer the most, the same people that are interested in your business or content. It’s just not good enough to let them endure the &lt;em&gt;fuck you&lt;/em&gt; experience, they don’t deserve it and it’s circumventable.&lt;/p&gt;

&lt;p&gt;Fortunately, when the real meaning of Progressive Enhancement is understood, the execution can be implemented correctly. This allows for robust, future-friendly, backwards-compatible Javascript code. This allows you to &lt;em&gt;responsibly&lt;/em&gt; use cutting-edge browser APIs, leaving the majority of other browsers to degrade to the core experience.&lt;/p&gt;

&lt;!--

Cornford:
The combination of the facts that it is impossible to determine which browser is executing the script, and that it is impossible to be familiar with all browser DOMs can be rendered insignificant by using feature detection to match code execution with any browser&#39;s ability to support it. But there is still going to be a diversity of outcomes, ranging from total failure to execute any scripts (on browsers that do not support javascript, or have it disabled) to full successful execution on the most capable javascript enabled browsers.

Veal:
I would add - and with a mobile connection you have no choice but to use the proxy because that is the way the network is configured. They are not as open as your home broadband and companies often employ a proxy to save bandwidth, and again you cannot avoid this
--&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of Javascript polyfills</title>
			<link href="http://localhost:4000/articles/the-disadvantages-of-javascript-polyfills/"/>
			<updated>2015-06-22T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/the-disadvantages-of-javascript-polyfills</id>
			<content type="html">&lt;p&gt;A polyfill, also known as a shim, is a user defined implementation of an API that a developer expects a browser to provide natively, normalising browser differences.&lt;/p&gt;

&lt;p&gt;As a huge proponent of the outside-in approach to development, I can see the lure to try to develop web applications as if all browsers are the same.&lt;/p&gt;

&lt;p&gt;However, this article discusses the problems you face when attempting to tame browsers in this way, which ultimately results in unreliable Javascript, unreliable web pages and of course, unhappy &lt;em&gt;users&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;augmenting-host-objects-is-a-bad-idea&quot;&gt;1. Augmenting host objects is a bad idea.&lt;/h2&gt;

&lt;p&gt;Polyfills &lt;em&gt;must&lt;/em&gt; augment host and native objects in order to plug missing gaps. The problem being that augmenting host objects and (to a slightly lesser extent) native objects is ill-advised and has been for well over a decade by experts including Richard Cornford, David Mark, Thomas Lahn and Kangax—the latter of which published two dedicated articles on the subject entitled &lt;a href=&quot;http://perfectionkills.com/whats-wrong-with-extending-the-dom/&quot;&gt;What’s wrong with extending the DOM?&lt;/a&gt; and &lt;a href=&quot;http://perfectionkills.com/extending-native-builtins/&quot;&gt;Extending native built-ins&lt;/a&gt;. Here is a choice snippet below, but I highly advise reading the entire article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In fact, DOM extension seemed so temptingly useful […]. But what hides behind this seemingly innocuous practice is a huge load of trouble. […] the downsides of this approach far outweigh any benefits.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;feature-detection-is-not-enough&quot;&gt;2. Feature detection is not enough.&lt;/h2&gt;

&lt;p&gt;As Peter Michaux demonstrates in &lt;a href=&quot;http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting&quot;&gt;Feature Detection: State of the art browser scripting&lt;/a&gt;, the mere presence of an API is not necessarily enough to determine reliable usage. This is where feature &lt;em&gt;testing&lt;/em&gt; comes in.&lt;/p&gt;

&lt;p&gt;Polyfills &lt;em&gt;tend&lt;/em&gt; to just detect the presence of an API; they do not iron out the bugs or inconsistencies found across the breadth of browsers; even if they did, they would have to override the original, whereby the override may contain a reference to the original—a dangerous and unnecessary way to go. This is why facades are useful as we will see later on.&lt;/p&gt;

&lt;h2 id=&quot;decoupling-browser-and-application-logic-is-advisable&quot;&gt;3. Decoupling browser and application logic is advisable.&lt;/h2&gt;

&lt;p&gt;As Nicholas Zakas presents in &lt;a href=&quot;https://www.youtube.com/watch?v=vXjVFPosQHw&quot;&gt;Scalable JavaScript Application Architecture&lt;/a&gt;, it is important to decouple application and browser logic. He states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Application logic should be written one way for all browsers in order to keep the code maintainable. If you’re using native APIs in your application logic, you can’t help but know what browser is being used because you need to account for browser differences. That means your application logic will always need to be updated as new browsers and new browser versions are released. &lt;strong&gt;That’s a recipe for disaster&lt;/strong&gt;”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;context-context-context&quot;&gt;4. Context context context.&lt;/h2&gt;

&lt;p&gt;You may not need the full API to solve your problem; you may not even be &lt;em&gt;able&lt;/em&gt; to implement a polyfill because there’s just no way to do it. This is why context is important, which is something Javascript expert David Mark expresses frequently.&lt;/p&gt;

&lt;p&gt;What exactly does David mean by context? You would have to ask David to be completely sure but I will hazard a guess that, &lt;em&gt;first&lt;/em&gt; it’s vital to understand the problem of exactly what you’re trying to solve. &lt;em&gt;Second&lt;/em&gt;, implement an appropriate solution for that problem. Specifically don’t do &lt;em&gt;more&lt;/em&gt; than solve the problem (YAGNI).&lt;/p&gt;

&lt;p&gt;This seems sensible doesn’t it? It is. With polyfills it’s all or nothing, whereby you rarely need &lt;em&gt;all&lt;/em&gt; of the API and the solution is anything but lean.&lt;/p&gt;

&lt;h2 id=&quot;polyfills-suffer-from-caveats&quot;&gt;5. Polyfills suffer from caveats.&lt;/h2&gt;

&lt;p&gt;It doesn’t take much effort to find examples of problematic polyfills. Take the &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;ES5 Shim&lt;/a&gt; project documentation. In describing the &lt;code&gt;Object.create&lt;/code&gt; polyfill it states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“For the case of simply “begetting” an object that inherits prototypically from another, this &lt;strong&gt;should&lt;/strong&gt; work fine across legacy engines.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The word “should” doesn’t instill confidence does it? Personally, I like to build on top of reliable foundations. As David Mark says, you’re only as reliable as your lowest level function(s). So in the case of polyfills that would be, not very. Unfortunately, it continues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The second argument is passed to Object.defineProperties which will &lt;strong&gt;probably fail either silently or with extreme prejudice&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does any of this sound like something you want to add to your codebase? I would hope not. Providing code for your team to use, whereby they can’t reliably use the fully exposed API without severe recourse, can only be interpreted as a bad idea. And it should go without saying that it doesn’t matter how good the application code is on top of these foundations, as the saying goes, you’re simply polishing a turd.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-instead&quot;&gt;What to do instead?&lt;/h2&gt;

&lt;p&gt;A facade, a form of wrapper, is a design pattern that normally provides a simplified interface to something more complex. This allows you to completely abstract away the differing browser implementations and bugs, with the flexibility to provide a suitable solution and a simplified method signature.&lt;/p&gt;

&lt;p&gt;Inside the facade there is nothing to stop you using portions of the API, and feature testing various implementations and acting accordingly, much like Peter Michaux demonstrates in his other brilliant article &lt;a href=&quot;http://peter.michaux.ca/articles/cross-browser-widgets&quot;&gt;Cross browser Widgets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cloning an object is pertinent to this article because &lt;code&gt;Object.create&lt;/code&gt; is a useful API to solve this problem. If you just wanted to support “modern” browsers i.e ones that provide &lt;code&gt;Object.create&lt;/code&gt;, then an implementation might be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var lib = {};
if(Object.create) {
	lib.cloneObject = function(obj) {
		return Object.create(obj);
	};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note there is only one argument. This facade uses a smaller part of an API, exposing a simpler method signature creating a lean solution to our problem in the process. What about browsers lacking &lt;code&gt;Object.create&lt;/code&gt;? Simply add a second fork:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Code credited to David Mark. Thanks.
var lib = {};
if(Object.create) {
	lib.cloneObject = function(obj) {
		return Object.create(obj);
	};
} else {
	lib.cloneObject = (function() {
		var Fn = function() {};
		return function(obj) {
			Fn.prototype = obj;
			return new Fn();
		};
	})();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The context of the problem changed; it got a little harder —  but the implementation is still lean and method signature still what we need. What we most certainly didn’t need to do, was to worry about recreating &lt;code&gt;Object.create&lt;/code&gt; in its entirety.&lt;/p&gt;

&lt;p&gt;With that said, what if you did need the full functionality this API can provide? Well you would only need two simple edits: change the name of the function to be appropriate and expand the method signature to allow for property descriptors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var lib = {};
if(Object.create) {
	lib.createObject = function(obj, props) {
		return Object.create(obj, props);
	};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about browsers lacking &lt;code&gt;Object.create&lt;/code&gt;? Nothing happens. The user gets the degraded experience as the browser doesn’t cut the mustard. This is the very essence of Progressive Enhancement and why it is so important in producing reliable front-end code.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;At first polyfills seem like a great idea. Having explored the intricacies of this technique, it’s clear that at best, polyfills are harder to implement and cause application and browser logic to be tightly coupled, which is costly.&lt;/p&gt;

&lt;p&gt;At their worst they come with highly problematic caveats that cause pain for the developer — ultimately resulting in unreliable software and unhappy users. The answer is to use facades, enabling the abstracting away of complexity into reliable and lean software.&lt;/p&gt;

&lt;!--

* ADDED IMPLEMENTATION Just because an API is implemented in a browser doesn&#39;t mean it&#39;s trustworthy. Sometimes, the spec is simply misunderstood and implemented differently across browser vendors. Adding a polyfill to the mix just adds complexity in the form of another user-defined implementation.

* CONSISTENCY Then there is the question of consistency. Do you want to use some polyfills and some facades. Probably not. Just use a consistent abstraction, a facade.

--&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of CSS preprocessors</title>
			<link href="http://localhost:4000/articles/the-disadvantages-of-css-preprocessors/"/>
			<updated>2015-05-05T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/the-disadvantages-of-css-preprocessors</id>
			<content type="html">&lt;p&gt;CSS preprocessors have many benefits because they provide features that plain old CSS doesn’t, such as variables, nesting, partials, mixins, inheritance and operators. However, CSS processors have several &lt;em&gt;disadvantages&lt;/em&gt; which I discuss here for your consideration:&lt;/p&gt;

&lt;h2 id=&quot;debugging-is-harder&quot;&gt;1. Debugging is harder&lt;/h2&gt;

&lt;p&gt;Due to having a compilation step, the browser is not interpreting the source files, meaning the CSS line numbers are now irrelevant when trying to debug. This makes debugging a lot harder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Debugging is twice as hard as programming”
&lt;br /&gt;— &lt;cite&gt;Brian Kernighan&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://thesassway.com/intermediate/using-source-maps-with-sass&quot;&gt;Source maps&lt;/a&gt; provide one solution but this requires setup and only works in a limited set of &lt;em&gt;modern&lt;/em&gt; browsers. Developers who care about users also test in &lt;em&gt;older&lt;/em&gt; browsers.&lt;/p&gt;

&lt;p&gt;Alternatively, you can hunt down styles via abstract portions of rules, which is horrid. Brian Kernighan said “debugging is twice as hard as programming” and it’s our duty to ensure this is as easy as possible.&lt;/p&gt;

&lt;h2 id=&quot;compilation-time-slows-down-development&quot;&gt;2. Compilation time slows down development&lt;/h2&gt;

&lt;p&gt;Compilation can be quick but it can also be slow, &lt;em&gt;very&lt;/em&gt; slow. I have frequently found myself &lt;em&gt;saving&lt;/em&gt; and &lt;em&gt;refreshing&lt;/em&gt; before compilation time finishes—even using CLI tooling on the latest Macbook Pro. &lt;em&gt;Your&lt;/em&gt; mileage may vary.&lt;/p&gt;

&lt;h2 id=&quot;performance-is-compromised&quot;&gt;3. Performance is compromised&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jaketrent.com/post/cons-css-preprocessors/&quot;&gt;Source file size can be deceiving&lt;/a&gt; because the generated CSS is likely to be significantly larger than the source file, potentially causing &lt;a href=&quot;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&quot;&gt;performance problems&lt;/a&gt;. Ultimately, what is generated is out of your control and &lt;em&gt;some&lt;/em&gt; responsibility is handed over to your chosen CSS preprocessor.&lt;/p&gt;

&lt;h2 id=&quot;maintainence&quot;&gt;4. Maintainence&lt;/h2&gt;

&lt;p&gt;Maintainability can sometimes be compromised. As an example, I have seen &lt;code&gt;@brandRed&lt;/code&gt; (instead of &lt;code&gt;#ff0000&lt;/code&gt;) sprinkled across various CSS files which isn’t really advantageous. If the colour changes to something that isn’t a red, then you have to do a &lt;em&gt;search and replace&lt;/em&gt; anyway (which by the way isn’t exactly difficult).&lt;/p&gt;

&lt;h2 id=&quot;tooling-can-constrain-developer-choice&quot;&gt;5. Tooling can constrain developer choice&lt;/h2&gt;

&lt;p&gt;Extra tooling (CLI, GUI, plugins) is required. Developers shouldn’t be &lt;em&gt;too&lt;/em&gt; constrained in their choice of development setups and with every tool added, there is something that needs setting up, working with, upgrading and maintaining which increases the chance of issues.&lt;/p&gt;

&lt;p&gt;CSS linters and text editor highlighting (CLI or plugins) are commonly available. CSS preprocessors are not &lt;em&gt;as&lt;/em&gt; readily available. If they &lt;em&gt;are&lt;/em&gt; available, they need setting up (and the rules need sharing with other developers easily).&lt;/p&gt;

&lt;p&gt;If they aren’t available then your remaining options are to either, find another editor or forget about linting, either way, not ideal.&lt;/p&gt;

&lt;h2 id=&quot;saving-generated-files-or-not&quot;&gt;6. Saving generated files (or not)&lt;/h2&gt;

&lt;p&gt;Whilst I firmly believe that you &lt;em&gt;shouldn’t&lt;/em&gt; save generated files to source control, I (and I am not the only one to) have experienced opinions to the &lt;a href=&quot;http://stackoverflow.com/questions/13185170/using-less-and-version-control-should-generated-css-be-included-in-a-repo&quot;&gt;contrary&lt;/a&gt; and in this case prepare for  &lt;a href=&quot;http://www.nczonline.net/blog/2015/04/14/consensus-driven-development/&quot;&gt;Concenus Driven Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;onboarding-and-recruitment-is-harder&quot;&gt;7. Onboarding and recruitment is harder&lt;/h2&gt;

&lt;p&gt;Candidates that &lt;em&gt;don’t&lt;/em&gt; have knowledge of CSS preprocessors (or the workflows around them) become more costly when onboarding. If you really want someone that has suitable knowledge then the pool of candidates is reduced. Whilst it’s not a steep learning curve, and more developers are aquiring these skills, it’s still something you might want to consider.&lt;/p&gt;

&lt;h2 id=&quot;but-what-about-variables-mixins-and-nesting&quot;&gt;But what about variables, mixins, and nesting?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; can be achieved by using comma-delimited CSS selectors, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selector,
anotherSelector {
    color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Mixins&lt;/strong&gt; can be achieved the same way, by using comma-delimited CSS selectors, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selector,
anotherSelector {
    border-radius: 3px;
    -webkit-border-radius: 3px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nesting&lt;/strong&gt; can’t quite be achieved. However, that’s not so bad because nesting can cause performance problems and is ill-advised for most situations. Instead, &lt;a href=&quot;http://maintainablecss.com&quot;&gt;use a convention&lt;/a&gt; that groups module components together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.someModule {}

.someModule-someComponent {}

.someModule-someOtherComponent {}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Whilst CSS preprocessors have several advantages, they also have several disadvantages. Only you can decide the trade-offs you’re willing to make for your situation—I simply urge you to make sure that the decision is a &lt;em&gt;conscious&lt;/em&gt; one.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>The role of the Front-end Developer</title>
			<link href="http://localhost:4000/articles/the-role-of-the-front-end-developer/"/>
			<updated>2015-03-11T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/the-role-of-the-front-end-developer</id>
			<content type="html">&lt;p&gt;The role of the Front-end developer extends far beyond translating  designs into code. They should be heavily involved in many other aspects of the design and development process…&lt;/p&gt;

&lt;h2 id=&quot;user-experience-amp-interaction-design&quot;&gt;User Experience &amp;amp; Interaction Design&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.disambiguity.com/there-is-no-ux/&quot;&gt;Everyone is responsible for UX&lt;/a&gt; and &lt;a href=&quot;http://www.smashingmagazine.com/2014/11/21/why-you-should-include-your-developer-in-the-design-process/&quot;&gt;Front-end Developers play an essential role&lt;/a&gt; due to their intimate relationship with a huge range browsers, across devices and operating systems. &lt;strong&gt;How can you design for the web if you don’t understand the platforms’ constraints and powers?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;front-end-architecture&quot;&gt;Front-end architecture&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;experienced&lt;/em&gt; Front-end developer should be able to design a suitable front-end architecture which includes the consideration of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Design patterns&lt;/li&gt;
  &lt;li&gt;Architectural patterns&lt;/li&gt;
  &lt;li&gt;Bootstrapping strategies&lt;/li&gt;
  &lt;li&gt;Bundling and compression&lt;/li&gt;
  &lt;li&gt;Modularity and semantics&lt;/li&gt;
  &lt;li&gt;Technical contracts between backend and front-end. Namely view models and XmlHttpRequest end-points&lt;/li&gt;
  &lt;li&gt;Code style and convention&lt;/li&gt;
  &lt;li&gt;Testing and automation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;The beauty of the web is one of reach; deploy once and access everywhere; there are just two requirements: a browser and an Internet connection. Oh and a competent Front-end developer who won’t &lt;a href=&quot;http://www.motherfuckingwebsite.com&quot;&gt;fuck up your website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Front-end developers are responsible and should take pride in the fact that, the UIs they build, are accessible to everyone, no matter their age, ability, user interaction preferences and, choice of device, Operating System and browser.&lt;/p&gt;

&lt;p&gt;Front-end developers are &lt;em&gt;normally&lt;/em&gt; speaking, the only advocates of accessibility and as accessibility is intertwined with usability, it’s vital to be knowledgeable and to champion it readily.&lt;/p&gt;

&lt;h2 id=&quot;front-end-feature-writing&quot;&gt;Front-end feature writing&lt;/h2&gt;

&lt;p&gt;Given a well defined and suitable front-end architecture, adding new features and updating existing features will include the writing of HTML, CSS and Javscript. This should include writing unit tests and (at least helping to write) automated functional tests.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-optimisation&quot;&gt;Search Engine Optimisation&lt;/h2&gt;

&lt;p&gt;Much like Accessibility, it is imperative Front-end developers understand how to build web pages that are search-engine friendly, so that appropriate indexing can take place in order to surface the content of the web page to their users.&lt;/p&gt;

&lt;h2 id=&quot;front-end-performance&quot;&gt;Front-end performance&lt;/h2&gt;

&lt;p&gt;It is important Front-end developers understand various facets of performance ensuring that web pages are served and &lt;a href=&quot;/articles/misusing-ajax-for-personalisation&quot;&gt;run as fast as possible without degrading the UX&lt;/a&gt;. This includes a good knowledge of browser caching, compression, bundling and runtime performance.&lt;/p&gt;

&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility&lt;/h2&gt;

&lt;p&gt;Front-end developers should endeavour to test in as many browsers as is reasonable when developing, but will understand there is a balance to be had, as testing all browsers, in all compatibilities, on all devices is a sisyphean task.&lt;/p&gt;

&lt;p&gt;The balance can only be struck through experience of knowing which spread of browsers should be tested and at which frequency. Leaning on &lt;a href=&quot;/articles/writing-javascript-that-conforms-to-progressive-enhancement/&quot;&gt;cross-browser scripting&lt;/a&gt; minimises the worry behind a lack of manual browser testing coverage.&lt;/p&gt;

&lt;h2 id=&quot;development-process-and-methodologies&quot;&gt;Development process and methodologies&lt;/h2&gt;

&lt;p&gt;It is very important to be able to work as part of a team in a given process. This means an understanding of various Agile methodologies. Furthermore, it’s highly beneficial to you and your team to be able to spot friction and implement improvements to that process.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Technical wanking</title>
			<link href="http://localhost:4000/articles/technical-wanking/"/>
			<updated>2015-02-09T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/technical-wanking</id>
			<content type="html">&lt;p&gt;Technical Wanking is the practice of using cool and new technology because — well — it’s &lt;em&gt;cool&lt;/em&gt; and &lt;em&gt;new&lt;/em&gt;. Of course, technology should be chosen on its technical merit and technical merit alone.&lt;/p&gt;

&lt;p&gt;I first heard of this terminology back in 2010 when I was building my first Single Page Application (SPA). We were using various “cutting-edge” libraries for DOM stuff and client-side templating, and we rolled our own client-side router.&lt;/p&gt;

&lt;p&gt;The administration system we were building didn’t need to consider SEO, and was only to be used in Chrome (and so we only tested in Chrome). It was a CRUD application with a bunch of rich interactions.&lt;/p&gt;

&lt;p&gt;I couldn’t wait to get my teeth into this, get the experience under my belt and propel my career accordingly. &lt;strong&gt;How could anyone resist my talent, with all the new buzzwords littering my CV?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At about 6 months into the project, my friend James Norton joined the team. I accompanied him on one of his fag breaks. It didn’t take long for us to get talking about the codebase. James was quite scathing and questioned the need and benefit of the architecture. He decided this was the time to call me a Technical Wanker (thanks James).&lt;/p&gt;

&lt;p&gt;Fortunately, he didn’t just call me names. He went on to constructively explain how all the not-so-good aspects of the code and UX were self-induced. Here are a few of the problems we were solving:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Writing a client-side Javascript router.&lt;/strong&gt; Server-side technology (in our case Rails) has perfectly reliable routing. Let the browser handle the browsing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Writing a client-side Javascript view renderer to rebuild/render only parts of the DOM tree that changed.&lt;/strong&gt; Again server-side frameworks have you covered. The browser is an expert at parsing and rendering HTML. Script will never do it better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Writing client-side Javascript to massage and work with generic REST APIs.&lt;/strong&gt; It’s standard practice for a server-side framework to compose beautiful fit-for-purpose view-models ready for consumption by server-side view templates.&lt;/p&gt;

&lt;p&gt;James went on to explain the application could have been better had we used a traditional architecture, without all the inherent &lt;a href=&quot;/articles/the-disadvantages-of-single-page-applications/&quot;&gt;problems with SPAs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whilst I was still quite chuffed with all the clever things I appeared to be doing, I couldn’t help but realise he was right. I was solving self-induced problems to assist my team in get ting their work done, as opposed to delivering a great and reliable experience for our users.&lt;/p&gt;

&lt;p&gt;If we had avoided the lure of the coolness behind building a SPA, the end result would have been just as slick. Just as beautiful. Just as rich. And it would have taken half the time to build, with a far nicer split of responsibilities between the server and client, meaning we could iterate faster. Not to mention it would have had better performance and accessibility. All of which contributes to the &lt;a href=&quot;/articles/hello-ux-designer/&quot;&gt;overall UX&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-did-all-this-nonsense-become-standard-practice&quot;&gt;When did all this nonsense become standard practice?&lt;/h2&gt;

&lt;p&gt;“Everyone’s building them”, they say. The problem is, when everyone is doing something, that &lt;em&gt;something&lt;/em&gt; is usually a bad idea. This follows in all walks of life — &lt;strong&gt;most people eat McDonalds, but it doesn’t make it good for you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a paid profession, it is your duty to serve the client and their users to the very best of your ability. Not to use tech in order to improve your CV etc.&lt;/p&gt;

&lt;p&gt;I know many developers scattered across the industry, who are in the trenches having to use this cutting-edge tech that causes more problems than it solves.&lt;/p&gt;

&lt;p&gt;In many ways I wish I hadn’t participated in Technical Wanking back then, but then again, I wouldn’t be where I am today having learnt many lessons about what &lt;em&gt;not&lt;/em&gt; to do.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Misusing AJAX for personalisation</title>
			<link href="http://localhost:4000/articles/misusing-ajax-for-personalisation/"/>
			<updated>2014-12-29T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/misusing-ajax-for-personalisation</id>
			<content type="html">&lt;p&gt;Sometimes developers are on a pursuit to reduce page-load time by utilising &lt;a href=&quot;https://developer.akamai.com/stuff/Caching/Content_Caching.html&quot;&gt;content caching&lt;/a&gt;. UX is improved because page response times are much faster.&lt;/p&gt;

&lt;p&gt;When the page contains personalised content, this type of caching can’t neccessarily be used because a user might receive the cached version of somebody elses personalised content.&lt;/p&gt;

&lt;p&gt;Problems arise when AJAX is used to make an additional request for personalised content. Before discussing the problems, let’s first define what is personalised content?&lt;/p&gt;

&lt;h2 id=&quot;what-is-personalised-content&quot;&gt;What is personalised content?&lt;/h2&gt;

&lt;p&gt;Personalised content is any content that is specific to a user. The most basic example would be a “Logout” link because the page knows that &lt;em&gt;you&lt;/em&gt; are logged in and that &lt;em&gt;you&lt;/em&gt; may want to logout.&lt;/p&gt;

&lt;p&gt;With that said, this can be cached because you can create two types of cached pages. What I mean is: anonymous users can receive a &lt;em&gt;logged-out&lt;/em&gt; cached page and logged-in users can get a &lt;em&gt;logged-in&lt;/em&gt; cached page.&lt;/p&gt;

&lt;p&gt;An example that doesn’t scale and makes content-caching redundant is when personalised content includes something specific to an individual user. A good example would be their name such as a ‘Welcome Bob’ message.&lt;/p&gt;

&lt;p&gt;What are the problems with this?&lt;/p&gt;

&lt;h2 id=&quot;the-architecture-becomes-needlessly-complex&quot;&gt;1. The architecture becomes needlessly complex.&lt;/h2&gt;

&lt;p&gt;What seems like a simple use of AJAX has a significant effect on architecture…&lt;/p&gt;

&lt;p&gt;Is there one extra request for personalised content or multiple?
&lt;br /&gt;Do you serve it as JSON and then parse that on the client?
&lt;br /&gt;How do you organise your scripts for this?
&lt;br /&gt;How do you organise the view partials for this on the server?
&lt;br /&gt;At what point is personalised content not essential to the UX and how does that affect architecture?&lt;/p&gt;

&lt;h2 id=&quot;poor-experience-for-some-people&quot;&gt;2. Poor experience for some people.&lt;/h2&gt;

&lt;p&gt;If the user doesn’t have Javascript (or they have it but not the capability to make AJAX requests, traverse or manipulate the Document etc) they will be unable to use this functionality. This goes against the principle of Progressive Enhancement and is completely against the spirit of the web. And in the case of “logging out” this would obviously be a poor decision.&lt;/p&gt;

&lt;p&gt;Furthermore, extra effort would be required to ensure the injected content is accessibile to screen readers. This alone is reason enough to realise this is an unacceptable technical solution.&lt;/p&gt;

&lt;h2 id=&quot;replacing-browser-behaviour-degrades-the-experience&quot;&gt;3. Replacing browser behaviour degrades the experience.&lt;/h2&gt;

&lt;p&gt;Christian Heilmann rightly says that &lt;a href=&quot;http://www.smashingmagazine.com/2010/02/10/some-things-you-should-know-about-ajax/&quot;&gt;AJAX shouldn’t break the web&lt;/a&gt; and using it in this way is doing just that. He also highlights that when AJAX is used, it is important to remember how much the browser does for free, that subtly goes unnoticed. This includes displaying a loading indicator with progress bar as well as handling page not found and timeout errors.&lt;/p&gt;

&lt;p&gt;Utilising AJAX and content-caching like this, means the page is only half loaded and half rendered at which point, and sometime later, the personalised content is injected. The UX is likely to be at least a little jarring as the page fills in the gaps.&lt;/p&gt;

&lt;p&gt;Solutions may include loading spinners, hiding content and transitions but in reality they are far from perfect. Also, the user may not see the various updates as they are busy interacting further down the page. This is all exacabated on slower connections.&lt;/p&gt;

&lt;h2 id=&quot;replacing-browser-behaviour-requires-significant-man-power&quot;&gt;4. Replacing browser behaviour requires significant man power.&lt;/h2&gt;

&lt;p&gt;Extra design effort is required to cater for the aformentioned degrading in UX. Extra development effort is required to write and test script. It’s also harder to automate the functional testing and changes the way in which those tests are written.&lt;/p&gt;

&lt;h2 id=&quot;performance-actually-degrades&quot;&gt;5. Performance actually degrades.&lt;/h2&gt;

&lt;p&gt;Instead of having a single HTTP request that contains the entire required response there will now be multiple. The first would be for the Document containing non-personalised content. The subsequent request will be via AJAX and &lt;em&gt;will&lt;/em&gt; hit your web server, therefore subject to the same latency as always.&lt;/p&gt;

&lt;p&gt;The potential performance benefit is somewhat negated by requiring extra Javascript including invoking and (parsing) the JSON request, finding elements, traversing and updating the Document. All of this code adds to the page-weight slowing down the load time. There is also extra CSS required to alleviate the self-induced jarring experience. Runtime performance also degrades because injecting HTML causes reflows and repaints.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Content-caching &lt;em&gt;is&lt;/em&gt; a very useful technique when used responsibly and for pages that don’t contain personalised content. For pages that &lt;em&gt;do&lt;/em&gt; contain personalised content, a &lt;a href=&quot;https://blogs.akamai.com/2014/05/and-you-thought-your-page-could-not-be-cached.html&quot;&gt;cookie check can determine whether the cached version should be served or not&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is ill-advised to misuse Javascript in this way as there are several negative side effects in doing so. AJAX should not break the web, it should enhance the experience where necessary. AJAX seems like an innocent and beneficial solution, but in reality it encourages bad practice that creates several self-induced problems for users and the development team.&lt;/p&gt;

&lt;!--

## Todo:

* https://remysharp.com/2012/04/25/mobile-battery-performance
* http://itamarst.org/writings/dynamiccaching.html
* cache invalidated means it goes to server anyway

## Comment from blog covers it off:

&gt; I think this would be a useful technique in only special situations. It does accomplish what you want but will require multiple downloads and will make a portion of your page unaccessible to those who have disabled JS (from what I have heard that is 10% of the intenet population).

&gt; Plus I am dubious of the savings. The reason for the caching to not have a web brower contact the website. It can just retrieve the content from cache. But if it is having to retrieve a portion of the content anyway you still have to make a HTTP request. Might as well make that response a bit bigger and get rid of the multiple requests and more complex code.

&gt; Sounds to me like this is going a little overboard on caching. Some pages are just not designed for caching. If that is the case then implement your application to use the “If-Modified-Since” header. That way the user can make their request but get back a small response in most cases.

&gt; I think this is premature optimization.

--&gt;
</content>
		</entry>
	
		<entry>
			<title>The boring front-end developer</title>
			<link href="http://localhost:4000/articles/the-boring-front-end-developer/"/>
			<updated>2014-10-01T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/the-boring-front-end-developer</id>
			<content type="html">&lt;p&gt;&lt;em&gt;Cool&lt;/em&gt; front-end developers are always &lt;em&gt;pushing the envelope&lt;/em&gt;, jumping out of their seat to use the latest and greatest and shiniest of UI frameworks and libraries.&lt;/p&gt;

&lt;p&gt;They are often found bridging the gap between native apps and web and so will strive to make the UI look and behave like an app. &lt;em&gt;Which app?&lt;/em&gt; you may ask. &lt;em&gt;iPhone? Android? What version?&lt;/em&gt; All good questions, alas another topic altogether.&lt;/p&gt;

&lt;p&gt;However, there is another kind of front-end developer, the &lt;em&gt;boring&lt;/em&gt; front-end developer. Here is an ode to the &lt;em&gt;boring&lt;/em&gt; front-end developer, &lt;em&gt;BFED&lt;/em&gt; if you will.&lt;/p&gt;

&lt;h2 id=&quot;browser-support&quot;&gt;Browser support&lt;/h2&gt;

&lt;p&gt;The BFED realises that while not all experiences will be identical, all browsers &lt;em&gt;can&lt;/em&gt; be used to consume a website, even &lt;em&gt;gasp&lt;/em&gt;, IE6 and below. He/she will promote Progressive Enhancement and Cross-browser (not Multi-browser) scripting at any given opportunity.&lt;/p&gt;

&lt;p&gt;The BFED also realises it is not a feat to drop support for a particular (set of) browser(s) and understands that forgetting about the existence of those users hurts them and their perception of the company/product.&lt;/p&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;The BFED realises that users have different abilities and preferred ways of using a computer, whether it’s a mouse, finger, thumb, screen reader, keyboard or a combination of all, websites should be consumable no matter the audience, screen size or capability of the browser.&lt;/p&gt;

&lt;h2 id=&quot;preprocessors&quot;&gt;Preprocessors&lt;/h2&gt;

&lt;p&gt;When given the choice to add a preprocessor (e.g. LESS, SASS, CoffeeScript etc) to the tech stack, the BFED realises there is a much deeper impact beyond just “writing less code”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Will debugging code be more difficult?”&lt;/em&gt;, &lt;em&gt;“Might performance degrade?”&lt;/em&gt; and &lt;em&gt;“Will I be slowed down due to compile times?”&lt;/em&gt; are just some of the &lt;a href=&quot;/articles/the-disadvantages-of-css-preprocessors/&quot;&gt;questions&lt;/a&gt; the BFED will consider to avoid problems in the future.&lt;/p&gt;

&lt;h2 id=&quot;ui-design&quot;&gt;UI design&lt;/h2&gt;

&lt;p&gt;The BFED embraces the constraints and limitations of the browser so that he/she doesn’t find him/herself in a world of Adaptive Design and UA sniffing because that world is horrible, ill-advised and costly.&lt;/p&gt;

&lt;p&gt;It is best to include the BFED early on in the UX design process to save wasting time designing a UI that should ultimately be avoided (see &lt;em&gt;&lt;a href=&quot;http://bradfrostweb.com/blog/mobile/fixed-position/&quot;&gt;Fixed Position&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;/articles/misusing-the-select-control/&quot;&gt;Misusing The Select Control&lt;/a&gt;&lt;/em&gt; for more on that) and that can likely be designed more simply.&lt;/p&gt;

&lt;p&gt;The BFED will also suggest the use of native form controls realising that browsers will enhance the experience where possible, particularly on mobile, and doesn’t try to control the look and feel too much as he/she knows that the brand will &lt;em&gt;not&lt;/em&gt; suffer because of that decision.&lt;/p&gt;

&lt;p&gt;The BFED will also suggest that links are styled as such, and with underlines, so that users can identify them within copy.&lt;/p&gt;

&lt;h2 id=&quot;third-party-css-and-javascript-libraries-and-frameworks&quot;&gt;Third party CSS and Javascript libraries and frameworks&lt;/h2&gt;

&lt;p&gt;The BFED will carefully select third party code based on the quality of the code itself by reviewing source code, &lt;em&gt;not&lt;/em&gt; based on the popularity of said code. He/she favours reliability over popularity every time.&lt;/p&gt;

&lt;h2 id=&quot;ui-architecture&quot;&gt;UI architecture&lt;/h2&gt;

&lt;p&gt;The BFED will adhere to the following quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As a Lead JavaScript Engineer, I try to get my team to write as little JavaScript as possible.”
&lt;br /&gt;— &lt;cite&gt;James Norton&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Furthermore, the BFED realises that &lt;a href=&quot;/articles/the-disadvantages-of-single-page-applications/&quot;&gt;Single Page Applications cause severe problems&lt;/a&gt; and that by avoiding them and leaning on the server appropriately provides a better experience and reach.&lt;/p&gt;

&lt;h2 id=&quot;cv&quot;&gt;CV&lt;/h2&gt;

&lt;p&gt;The BFED will develop a site based on the context of the problem and provide a solution accordingly. He/she will not just use [insert buzz word here] to improve his/her chances of finding another job based on the current technology fad in order to increase their day rate.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Be a great front-end developer. Be boring.&lt;/p&gt;

&lt;h2 id=&quot;addendum&quot;&gt;Addendum&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/simple-human/addendum-to-the-boring-front-end-developer-468dfc75d896#.1umggvug5&quot;&gt;My response&lt;/a&gt; to Hacker News comments.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href=&quot;http://blog.capwatkins.com/the-boring-designer&quot;&gt;The Boring Designer&lt;/a&gt; by Cap Watkins’ — thank you.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Misusing the select control</title>
			<link href="http://localhost:4000/articles/misusing-the-select-control/"/>
			<updated>2014-09-17T00:00:00+01:00</updated>
			<id>http://localhost:4000/articles/misusing-the-select-control</id>
			<content type="html">&lt;p&gt;You have most likely seen and used a select control &lt;em&gt;without&lt;/em&gt; a submit button. The rationale behind omitting the submit button is normally to declutter the UI and reduce clicks—the latter of which is a common &lt;a href=&quot;http://idyeah.com/blog/2012/06/stop-counting-clicks/&quot;&gt;UX fallacy&lt;/a&gt;. However, this is detrimental to the User Experience.&lt;/p&gt;

&lt;div class=&quot;image&quot; style=&quot;max-width: 320px;margin: 0 auto;&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/sortby.png&quot; alt=&quot;Sort by select&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Sort by select box missing a submit button&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;links-are-for-navigation&quot;&gt;Links are for navigation.&lt;/h2&gt;

&lt;p&gt;Select menus are to help users fill in data. They are &lt;em&gt;not&lt;/em&gt; meant to be used for navigation; that’s what links are for. They can be used as a means of changing the data that is displayed on a page. Think search results or filtering but that’s it.&lt;/p&gt;

&lt;h2 id=&quot;inputting-data-versus-submitting-data&quot;&gt;Inputting data versus submitting data.&lt;/h2&gt;

&lt;p&gt;There should be a difference between selection and &lt;em&gt;submission&lt;/em&gt;. Combining the two into a single interaction causes usability issues (which I will show later).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Changing the setting of any user interface component does not automatically cause a change of context”
&lt;br /&gt;—&lt;cite&gt;WCAG 2.0 Guidelines&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;generally-difficult-to-use&quot;&gt;Generally difficult to use.&lt;/h2&gt;

&lt;p&gt;Larry Marinem conducted usability tests and states that sometimes designers try to “over-automate” by reducing combining selection and submission and that dropdown lists are expected to display the selection, not go somewhere.&lt;/p&gt;

&lt;p&gt;Users are prone to mis-selecting an option so when it launches them off somewhere else, this can be really disorientating. He added that reducing the number of clicks does not make a site more usable but giving the users appropriate control of their navigation does.&lt;/p&gt;

&lt;h2 id=&quot;keyboard-users-find-them-troublesome&quot;&gt;Keyboard users find them troublesome.&lt;/h2&gt;

&lt;p&gt;In the case of keyboard users, tabbing to a select menu and pressing up or down will select different options. In the following video, I am failing in my attempt to select the 3rd &lt;code&gt;option&lt;/code&gt; making the experience very frustrating:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rnKDDSo9Omk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;Note: Visit &lt;a href=&quot;http://html.cita.illinois.edu/script/onchange/onchange-example.php&quot;&gt;the demo&lt;/a&gt; in an offending browser, such as Chrome (Windows), Opera (Windows), IE6, IE7, IE8 and IE9—if you come across another offending browser, do let me know&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-about-screen-readers&quot;&gt;What about screen readers?&lt;/h2&gt;

&lt;p&gt;Sarah Miller found that dropdown lists without buttons were confusing because, while the user had to inspect every item in the list, the action of reading an item meant that it was selected so the user would never get past the first item in the list, again very frustrating.&lt;/p&gt;

&lt;h2 id=&quot;what-are-my-options&quot;&gt;What are my options?&lt;/h2&gt;

&lt;p&gt;Adding the submit button back works beautifully and puts the user firmly back in control. Alternatively, you can make each option a link as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;/whatever/?sort=popularity&quot;&amp;gt;Popularity&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;/whatever/?sort=location&quot;&amp;gt;Location&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;/whatever/?sort=etc&quot;&amp;gt;Etc&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which reduces the clicks, exposes the options and doesn’t have usability problems.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;UX is about creating human-friendly experiences. Reducing clicks and decluttering the UI might be the result of a solution but they should not be considered &lt;em&gt;objectives&lt;/em&gt; in and of themselves.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Everything should be made as simple as it needs to be, and no simpler.”
&lt;br /&gt;— &lt;cite&gt;Albert Einstein&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
		</entry>
	
		<entry>
			<title>Javascript inheritance</title>
			<link href="http://localhost:4000/articles/javascript-inheritance/"/>
			<updated>2014-09-09T10:00:59+01:00</updated>
			<id>http://localhost:4000/articles/javascript-inheritance</id>
			<content type="html">&lt;p&gt;Javascript inheritance is useful with regard to code &lt;a href=&quot;http://javascript.crockford.com/inheritance.html&quot;&gt;reuse&lt;/a&gt;. Unfortunately, ECMAScript doesn’t provide an &lt;em&gt;inherit&lt;/em&gt; function natively, so we will need to create one. This article documents a simple and powerful technique.&lt;/p&gt;

&lt;h2 id=&quot;how-to-write-an-inherit-function&quot;&gt;How to write an inherit function&lt;/h2&gt;

&lt;p&gt;We need to create an &lt;code&gt;inherit&lt;/code&gt; function which will use &lt;code&gt;cloneObject&lt;/code&gt; internally. Both of which are taken from &lt;a href=&quot;http://www.github.com/cinsoft/jessie/&quot;&gt;Jessie&lt;/a&gt;. The namespace bit is optional but good &lt;a href=&quot;/articles/javascript-namespacing/&quot;&gt;practice&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**** The namespace ****/
var lib = {};

/**** The cloneObject function ****/

// For browsers that have Object.create
if(Object.create) {
    lib.cloneObject = function(o) {
        return Object.create(o);
    };

// For browsers that don&#39;t have Object.create available
} else {
    lib.cloneObject = (function() {
        var Fn = function() {};

        return function(o) {
            Fn.prototype = o;
            return new Fn();
        };
    })();
}

/**** The inherit function which uses cloneObject ****/

lib.inherit = function(Sub, Super) {
    // Clone the parent&#39;s prototype object and assign to child&#39;s prototype object
    Sub.prototype = lib.cloneObject(Super.prototype);

    // Assign reference to super constructor onto the child constructor
    Sub.superConstructor = Super;

    // Assign child as the child constructor
    Sub.prototype.constructor = Sub;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;The example will demonstrate a Superhero inheriting the features of a normal Person. Let’s start with the Person constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Person(name) {
    this.name = name;
}

Person.prototype.sayName = function() {
    return &quot;My name is:&quot; + this.name;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating an instance of a Person is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bob = new Person(&#39;Bob&#39;);
bob.sayName(); // returns &quot;My name is Bob&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Defining a Superhero is very similar to defining a Person. The difference being that a Superhero will not tell you his true identity. So we define an &lt;em&gt;alias&lt;/em&gt; property on the Superhero and when a Superhero says their name, they will instead say their alias:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Superhero(name, alias) {
    // call Parent constructor so that Superheros also have names like a regular Person
    Superhero.superConstructor.call(this, name);
    this.alias = alias;
}

// Superhero inherits the features of a Person
lib.inherit(Superhero, Person);

// Override sayName method so that Superheros keep their true identity a secret
Superhero.prototype.sayName = function() {
    return &quot;Can&#39;t tell you that but my alias is: &quot; + this.alias;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating an instance of a Superhero is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var batman = new Superhero(&quot;Bruce Wayne&quot;, &quot;Batman&quot;);
batman.sayName(); // returns &quot;Can&#39;t tell you that but my alias is Batman&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to show another important aspect of the &lt;em&gt;inherit&lt;/em&gt; function let’s create another scenario for our Superhero. The scenario entails a situation where the Superhero is forced to back down in order to save humanity, and in doing so must reveal their name to their enemy. We can define a method on the Superhero called &lt;em&gt;backDownAndRevealTrueIdentity&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Superhero.prototype.backDownAndRevealTrueIdentity = function() {
    return Superhero.superConstructor.prototype.sayName();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the previously defined &lt;code&gt;batman&lt;/code&gt; instance above we run the scenario:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;batman.backDownAndRevealTrueIdentity(); // returns &quot;My name is Bruce Wayne&quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of Single Page Applications</title>
			<link href="http://localhost:4000/articles/the-disadvantages-of-single-page-applications/"/>
			<updated>2014-08-11T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/the-disadvantages-of-single-page-applications</id>
			<content type="html">&lt;p&gt;Single Page Applications (SPAs) have become extremely popular on the web, because they are &lt;em&gt;supposed&lt;/em&gt; to &lt;a href=&quot;http://en.wikipedia.org/wiki/Single-page_application&quot;&gt;provide a more fluid user experience&lt;/a&gt;. However, there are many UX and technical problems that arise from architecting websites this way. Before getting to them, let’s first discuss the difference between an SPA and a traditional multi-page website (MPW).&lt;/p&gt;

&lt;h2 id=&quot;whats-the-difference-between-a-single-page-app-and-an-multi-page-website&quot;&gt;What’s the difference between a Single Page App and an Multi-page Website?&lt;/h2&gt;

&lt;p&gt;Whilst it’s common to associate MVC, MVVM, XHR, DOM manipulation (and more) with an SPA, this article doesn’t address them because they could &lt;em&gt;also&lt;/em&gt; be used in an MPW.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;really&lt;/em&gt; defines an SPA is the fact that the &lt;strong&gt;routing is handled by the client-side application using Javascript, instead of the server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means the application handles the browsing instead of the browser. Attempting to mimic the browser using Javascript is what causes these self-induced issues. Let’s take a look.&lt;/p&gt;

&lt;h2 id=&quot;navigation-and-fast-back&quot;&gt;1. Navigation and fast back&lt;/h2&gt;

&lt;p&gt;Browsers store history, meaning pages load quickly when the user presses the &lt;em&gt;back&lt;/em&gt; button. SPAs need to recreate this functionality. As &lt;a href=&quot;https://medium.com/joys-of-javascript/4353246f4480&quot;&gt;Daniel Puplus says in his article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Back should be quick; users don’t expect data to have changed much.&lt;br /&gt;&lt;br /&gt;
“When a user presses the browser’s back button they expect the change to happen quickly and for the page to be in a similar state to how it was last time they saw it.&lt;br /&gt;&lt;br /&gt;
“In the traditional web model the browser will typically be able use a cached version of the page and linked resources.&lt;br /&gt;&lt;br /&gt;
“In a naive implementation of a SPA hitting back will do the same thing as clicking a link, resulting in a server request, additional latency, and possibly visual data changes.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When ‘navigating’, the application will need a method of storing and retrieving ‘pages’ from a cache. Unless of course you want to slow down the loading ‘pages’, which is meant to be a significant benefit of SPAs. Storage options could include memory, local (or session) storage, client-side database and cookies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: The words ‘navigating’ and ‘pages’ are in quotes because SPAs, by definition, don’t have the concept of navigation and pages in the traditional sense. Quotes will be discarded going forward for brevity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The application will also need to determine &lt;em&gt;when&lt;/em&gt; to store and retrieve pages from the cache. Navigation typically utilises &lt;em&gt;pushState&lt;/em&gt; or &lt;em&gt;hashchange&lt;/em&gt; and the application will need to differentiate between the user changing the URL (via clicking a link or typing a URL in the location bar) or &lt;a href=&quot;http://stackoverflow.com/questions/2008806/how-to-detect-if-the-user-clicked-the-back-button&quot;&gt;manually hitting back/forward, which is not straightforward&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;navigation-and-remembering-scroll-history-position&quot;&gt;2. Navigation and remembering scroll history position&lt;/h2&gt;

&lt;p&gt;Browsers conveniently remember the scroll position of pages you have visited and as Daniel Puplus says in his article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Lots of sites get this wrong and it’s really annoying. When the user navigates using the browser’s forward or back button the scroll position should be the same as it was last time they were on the page. This sometimes works correctly on Facebook but sometimes doesn’t. Google+ always seems to lose your scroll position.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clicking forward or back should remember the scroll position, but unfortunately, as SPAs rely on faux navigation, this functionality is lost. Upon navigation, the application will need to remember the scroll position so that it can be retrieved later. This is a topic heavily related to “Navigation and fast back” discussed previously.&lt;/p&gt;

&lt;h2 id=&quot;cancelling-navigation&quot;&gt;3. Cancelling navigation&lt;/h2&gt;

&lt;p&gt;The browser provides a &lt;em&gt;cancel&lt;/em&gt; button which when pressed, cancels the loading of the requested page. If a user clicks another link, the browser will cancel the previous request if one is in progress. This is useful for performance and also ensures the user’s internet data allowance isn’t eaten up unnecessarily.&lt;/p&gt;

&lt;p&gt;SPA pages are likely to be retrieved via XHR, meaning several requests could be in progress at the same time; the first page request might be loaded last, even though it should have been cancelled out by the second page request. Also, the same link could be clicked twice, meaning the page will be requested (and loaded) twice, which is not efficient and could also cause visual glitches.&lt;/p&gt;

&lt;p&gt;The application will need to handle this functionality too. This means exposing a custom &lt;em&gt;cancel&lt;/em&gt; button (undesirable), and the duplicate requests need handling as well as cancelling all previous in-progress requests.&lt;/p&gt;

&lt;h2 id=&quot;navigation-and-data-loss&quot;&gt;4. Navigation and data loss&lt;/h2&gt;

&lt;p&gt;Browsers normally provide the &lt;em&gt;beforeunload&lt;/em&gt; event which allows the application to warn against losing unsaved changes. The application router will need to provide a hook to replicate this functionality i.e. ‘beforeRouting’.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-ranking&quot;&gt;5. Search engine ranking&lt;/h2&gt;

&lt;p&gt;Whilst some SPAs don’t require SEO, for those that do &lt;a href=&quot;http://stackoverflow.com/questions/7549306/single-page-js-websites-and-seo&quot;&gt;solutions aren’t straightforward&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-css-amp-javascript&quot;&gt;6. Loading CSS &amp;amp; Javascript&lt;/h2&gt;

&lt;p&gt;If an SPA grows to a significant size, loading the entire application on page load may be detrimental to the experience because it’s akin to loading all pages of a website when only the home page was requested. Unfortunately, this leads to attempting to load CSS and JS for certain pages. &lt;a href=&quot;http://blog.getify.com/labjs-script-loading-the-way-it-should-be/&quot;&gt;Script loading is notoriously difficult and contains unreliable hacks&lt;/a&gt; which can can be fatal to the reliability of the application.&lt;/p&gt;

&lt;h2 id=&quot;analytics-is-harder-to-implement&quot;&gt;7. Analytics is harder to implement&lt;/h2&gt;

&lt;p&gt;Analytics tools will normally track page views and related tools without any extra effort but because an SPA page isn’t really a page, this has to be handled with extra script which is triggered by the application router.&lt;/p&gt;

&lt;h2 id=&quot;automated-functional-testing&quot;&gt;8. Automated functional testing&lt;/h2&gt;

&lt;p&gt;Whilst you can use Selenium (and other equivalents) to test SPAs, extra effort is required to handle timeouts of XHR calls because there is no signal to Selenium that an XHR call has finished, like there is when a real page finishes loading. This leads to more questions and problems; &lt;em&gt;How long should the timeout be? What happens if it takes longer than normal?&lt;/em&gt; The test execution will likely be slower too.&lt;/p&gt;

&lt;h2 id=&quot;performance-problems&quot;&gt;9. Performance problems&lt;/h2&gt;

&lt;p&gt;Pages are “long lived” increasing the chance of exposing a memory leak due to lack of page reloads. This is known to degrade UX and cause battery drain on mobile devices.&lt;/p&gt;

&lt;h2 id=&quot;loading-indicator-issues&quot;&gt;10. Loading indicator issues&lt;/h2&gt;

&lt;p&gt;When a traditional page is requested, the browser shows a loading indicator custom to &lt;em&gt;that&lt;/em&gt; browser. This provides the most accurate indication of when a page will finish loading. With client-side routing, you have to implement your own loading indicator which is detrimental to the User Experience for two reasons:&lt;/p&gt;

&lt;p&gt;First, the Javascript implemented loading indicator is inaccurate in terms of progress, because it doesn’t have access to progress information like the browser does and second, it’s disorientating to the user because the individual gets used to the behaviour of &lt;em&gt;their&lt;/em&gt; chosen browser and unconsciously and intuitively understands where to look for this information. A Javascript solution is always different.&lt;/p&gt;

&lt;h2 id=&quot;its-going-to-fail&quot;&gt;11. It’s going to fail!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;Everyone has Javascript, Right?&lt;/a&gt; Wrong. It’s going to fail and because SPAs &lt;em&gt;depend&lt;/em&gt; on many different Javascript enhancements, when it does fail it will do so in a fatal way as they tend not to &lt;a href=&quot;/articles/writing-javascript-that-conforms-to-progressive-enhancement/&quot;&gt;conform to Progressive Enhancement&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Whilst SPAs are meant to provide a better experience, it’s clear and ironic that they are much harder to design and build with a result that is detrimental to the user.&lt;/p&gt;

&lt;p&gt;Javascript is never going to beat the browser at what it does best — &lt;em&gt;browsing&lt;/em&gt;. You can still have beautifully rich, enhanced experiences without cramming an entire site into one document.&lt;/p&gt;

&lt;p&gt;It’s interesting to note that sites such as &lt;a href=&quot;https://blog.twitter.com/2012/improving-performance-on-twittercom&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://isolani.co.uk/blog/javascript/BreakingTheWebWithHashBangs&quot;&gt;Lifehacker&lt;/a&gt; and more recently &lt;a href=&quot;http://blog.delicious.com/2016/01/delicious-changes/&quot;&gt;Delicious&lt;/a&gt; have also experienced many of these issues and have since reverted to more traditional archictures with great results.&lt;/p&gt;

&lt;p&gt;Instead of solving self-induced problems that are already solved by browsers, it’s better to spend your time solving &lt;em&gt;real&lt;/em&gt; problems.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Javascript namespacing</title>
			<link href="http://localhost:4000/articles/javascript-namespacing/"/>
			<updated>2014-07-11T10:00:01+01:00</updated>
			<id>http://localhost:4000/articles/javascript-namespacing</id>
			<content type="html">&lt;p&gt;Namespaces are used to help with code organisation, discoverability, and in the context of Javascript, the minimisation of &lt;a href=&quot;http://www.yuiblog.com/blog/2006/06/01/global-domination/&quot;&gt;global variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Client-side Javascript doesn’t (at the time of writing) have a dedicated construct for namespacing, but it can be imitated using object literals.&lt;/p&gt;

&lt;p&gt;For demonstration purposes let’s define an example application. Our application will be a zoo and just like &lt;em&gt;real&lt;/em&gt; zoos it will have animals and some additional information.&lt;/p&gt;

&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;/h2&gt;

&lt;p&gt;It’s helpful to visualise the directory structure as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zoo/
	zoo.js
	zoo.information.js
	animals/
		zoo.animals.js
		zoo.animals.Penguin.js
		zoo.animals.Tiger.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Namespaces will be defined in &lt;code&gt;zoo.js&lt;/code&gt; and &lt;code&gt;zoo.animals.js&lt;/code&gt;. All other files define components of the zoo. Each folder represents a namespace. Each namespace file simply assigns an empty object to a variable or property.&lt;/p&gt;

&lt;h2 id=&quot;root-namespace-setup&quot;&gt;Root namespace setup&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// zoo.js
var zoo = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sub-level-namespace-setup&quot;&gt;Sub level namespace setup&lt;/h2&gt;

&lt;p&gt;For our example app we don’t need a deep hierarchy. Add levels as you need them. For us we just need to group animals.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// zoo.animals.js
zoo.animals = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: The namespace matches the file name which aids discoverability.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;penguin-definition&quot;&gt;Penguin definition&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// zoo.animals.Penguin.js
zoo.animals.Penguin = function() {
	// constructor
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;tiger-definition&quot;&gt;Tiger definition&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// zoo.animals.Tiger.js
zoo.animals.Tiger = function() {
	// constructor
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;zoo-information&quot;&gt;Zoo information&lt;/h2&gt;

&lt;p&gt;When it comes to information you can simply assign an object to your chosen namespace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// zoo.information.js
zoo.information = {
	name: &quot;My Awesome Zoo&quot;,
	address: &quot;52 Zoo Lane, ZA1 2AP&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: Do not be concerned about having too many files; overly complex namespace hiearchies should be avoided and separate files should be concatenated for production.&lt;/em&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>The multiple submit button problem</title>
			<link href="http://localhost:4000/articles/the-multiple-submit-button-problem/"/>
			<updated>2014-03-20T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/the-multiple-submit-button-problem</id>
			<content type="html">&lt;p&gt;Sometimes a form is designed to be multi-purpose. Take the example below. It represents an edit details form whereby the user can either update their information or delete it all together. This kind of form causes usability problems for keyboard users.&lt;/p&gt;

&lt;div class=&quot;image&quot; style=&quot;max-width: 320px;margin: 0 auto;&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/multiplesubmit.png&quot; alt=&quot;Multi submit problem&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Multiple submit buttons&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;!-- &lt;form&gt;
	&lt;input type=&quot;text&quot; name=&quot;firstName&quot; value=&quot;Adam&quot;&gt;
	&lt;input type=&quot;text&quot; name=&quot;lastName&quot; value=&quot;Silver&quot;&gt;
	&lt;input type=&quot;submit&quot; name=&quot;delete&quot; value=&quot;Delete&quot;&gt;
	&lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;Save&quot;&gt;
&lt;/form&gt; --&gt;

&lt;p&gt;The user can submit the form while focused on &lt;em&gt;first name&lt;/em&gt; or &lt;em&gt;last name&lt;/em&gt; control by pressing the enter key. If they do this the form will be submitted based on the first button in the document flow which in this case is the &lt;em&gt;update&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;This is not always the case though. Sometimes the visual design means that the &lt;em&gt;delete&lt;/em&gt; button is first in the document flow (and there is no CSS trick to get around this). In this case the user presses enter, and instead of updating their details, they delete them.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-best-solution&quot;&gt;What’s the best solution?&lt;/h2&gt;

&lt;p&gt;Where possible, the best solution would be to split out the forms into two. This means each form contains &lt;em&gt;one&lt;/em&gt; submit button. Often this provides a better User Experience in the form of focused pages and actions dedicated to each task the user wishes to accomplish.&lt;/p&gt;

&lt;p&gt;In our example above the delete button would become a link to a page that allows the user to delete the details.&lt;/p&gt;

&lt;h2 id=&quot;what-if-you-must-have-two-actions-in-one-form&quot;&gt;What if you “must have” two actions in one form?&lt;/h2&gt;

&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; have two actions in one form then you must answer the following question: &lt;strong&gt;what is the form’s primary action?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not always a straightforward answer, but in the example above it’s clearly the &lt;em&gt;update&lt;/em&gt; button. For this simply make sure that button comes first in the document flow.&lt;/p&gt;

&lt;p&gt;The only potential problem here is that you might be limited by the powers of CSS in terms of visually positioning the buttons as desired. If this is the case then you can duplicate the primary button at the top of the form and hide it off screen with CSS:&lt;/p&gt;

&lt;p&gt;The trade off here is that when the user is tabbing through the page and arrives at the hidden button, the UI will appear to be unresponsive. This is because focusing on an interactive element would normally provide some sort of visual feedback. As the button is hidden you lose this functionality.&lt;/p&gt;

&lt;p&gt;The solution to this, is to display the button if focused, and then hide again when the user loses focus from this button. Again, this may not be desired but it’s a trade off you may have to make.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The simple omission of the submit button causes usability and accessibility problems which degrades the experience. Where possible design this out of the system and &lt;a href=&quot;/articles/designing-honestly-for-the-web/&quot;&gt;embrace the constraints of the web&lt;/a&gt;. If it really isn’t possible to do this, then a little effort to choose the primary action will improve the experience for these users.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>How to create accessible forms</title>
			<link href="http://localhost:4000/articles/how-to-create-accessible-forms/"/>
			<updated>2014-01-22T09:00:01+00:00</updated>
			<id>http://localhost:4000/articles/how-to-create-accessible-forms</id>
			<content type="html">&lt;p&gt;Interacting with forms is one of the most important interactions a person can have on the web. The great news is, forms can be made to be accessible and in-turn more human-friendly with very little effort. This article describes the simple techniques you can utilise to ensure your forms are accessible.&lt;/p&gt;

&lt;h2 id=&quot;labels&quot;&gt;Labels&lt;/h2&gt;

&lt;p&gt;Labels provide information about each control. Visual users will see the label and visually impaired users may use a screen reader which will read out the label. Labels are only needed for controls that provide a vessel for input e.g. submit buttons are fine without.&lt;/p&gt;

&lt;p&gt;Additionally, browsers may provide the ability to click a label which will either move focus to the control or even mark the control as checked in the case of a checkbox or radio control.&lt;/p&gt;

&lt;p&gt;Associating a control with a label as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;label for=&quot;username&quot;&amp;gt;Username&amp;lt;/label&amp;gt;
&amp;lt;input id=&quot;username&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: the &lt;code&gt;for&lt;/code&gt; attribute associates a label with another control explicitly by matching the id attribute of the control.&lt;/p&gt;

&lt;h2 id=&quot;fieldsets-and-related-controls&quot;&gt;Fieldsets and related controls&lt;/h2&gt;

&lt;p&gt;Fieldsets provide information about a group of related controls. Typically this is useful for controls with a type attribute &lt;em&gt;radio&lt;/em&gt; or &lt;em&gt;checkbox&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a form control which allows the user to choose their favourite colour. The choices are represented as radios with associated labels: Red, Yellow and Blue.&lt;/p&gt;

&lt;p&gt;“Red” doesn’t convey enough information on its own. However, wrapping the group of radios in a fieldset with a legend of “Favourite colour” will ensure the control can be read out by a screen reader as “Favourite colour, Red”.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
	&amp;lt;legend&amp;gt;Favourite colour&amp;lt;/legend&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourRed&quot; value=&quot;red&quot;&amp;gt;
	&amp;lt;label for=&quot;colourRed&quot;&amp;gt;Red&amp;lt;/label&amp;gt;
	&amp;lt;!-- ... --&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;optional-radio-group-control&quot;&gt;Optional radio group control&lt;/h2&gt;

&lt;p&gt;Radio controls can not be toggled; once marked as checked they cannot be unchecked until a different radio control is checked. Therefore it is imperative that an additional radio control is added with a ‘None selected’ option so that the user may change their mind. An example follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
	&amp;lt;legend&amp;gt;Favourite colour&amp;lt;/legend&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourNone&quot; value=&quot;none&quot;&amp;gt;
	&amp;lt;label for=&quot;colourNone&quot;&amp;gt;None selected&amp;lt;/label&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourRed&quot; value=&quot;red&quot;&amp;gt;
	&amp;lt;label for=&quot;colourRed&quot;&amp;gt;Red&amp;lt;/label&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourBlue&quot; value=&quot;blue&quot;&amp;gt;
	&amp;lt;label for=&quot;colourBlue&quot;&amp;gt;Blue&amp;lt;/label&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;option-groups-and-options&quot;&gt;Option groups and options&lt;/h2&gt;

&lt;p&gt;The optgroup element can improve accessibility of the options within a select control by adding information to groups of options. If a user had to select their favourite fruit including variety then adding an optgroup named “Apple” containing options such as “Pink Lady” would be advisable as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select&amp;gt;
	&amp;lt;optgroup label=&quot;Apples&quot;&amp;gt;
		&amp;lt;option&amp;gt;Pink lady&amp;lt;/option&amp;gt;
		&amp;lt;!-- ... --&amp;gt;
	&amp;lt;/optgroup&amp;gt;
	&amp;lt;!-- ... --&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dont-abuse-select-controls&quot;&gt;Don’t abuse select controls&lt;/h2&gt;

&lt;p&gt;The select control provides a list of options of which one can be selected for input. An &lt;a href=&quot;/articles/misusing-the-select-control/&quot;&gt;accessibility/usability issue can arise when script is used to submit the form when the select’s change event fires&lt;/a&gt;. Keyboard users may struggle. If a user wants to select the 4th option this would then require 3 form submissions which would be a terribly frustrating experience.&lt;/p&gt;

&lt;h2 id=&quot;avoid-multiple-select-controls&quot;&gt;Avoid multiple select controls&lt;/h2&gt;

&lt;p&gt;Multiple select controls allow the user to select multiple options but it’s recommended that these controls are avoided due to users not understanding how to use them. Checkboxes provide a better alternative.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So there you have it; three things you should do, one thing you can do, and two things you shouldn’t do. With very little effort you can make your forms accessible and human-friendly to everyone.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>An introduction to DOM scripting forms</title>
			<link href="http://localhost:4000/articles/an-introduction-to-dom-scripting-forms/"/>
			<updated>2014-01-02T09:00:59+00:00</updated>
			<id>http://localhost:4000/articles/an-introduction-to-dom-scripting-forms</id>
			<content type="html">&lt;p&gt;The HTML DOM has dedicated APIs for retrieving and manipulating form controls. The &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/816-6408-10/&quot;&gt;DOM0&lt;/a&gt; Forms Collection API is perfect for this but unfortunately often forgotten. This article describes how to use this API.&lt;/p&gt;

&lt;h2 id=&quot;accessing-a-form&quot;&gt;Accessing a form&lt;/h2&gt;

&lt;p&gt;Accessing a form with a Name attribute value of &lt;em&gt;login&lt;/em&gt; is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loginForm = document.forms.login;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;accessing-form-controls&quot;&gt;Accessing form controls&lt;/h2&gt;

&lt;p&gt;Accessing the controls within the form is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loginControls = loginForm.elements;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If the login form contained a username and password control then &lt;code&gt;loginControls&lt;/code&gt; would be a collection of two controls.&lt;/p&gt;

&lt;h2 id=&quot;accessing-a-control-by-name&quot;&gt;Accessing a control by name&lt;/h2&gt;

&lt;p&gt;There are several types of control including input, select, textarea, etc. Having retrieved the controls earlier we can loop over each control or retrieve a particular control by index or name. Retrieving a control by name is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var usernameControl = loginControls.username;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;inspecting-a-control-value&quot;&gt;Inspecting a control value&lt;/h2&gt;

&lt;p&gt;Once we have a control we can interrogate its value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var usernameValue = usernameControl.value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is useful if you want to perform client side validation, for example.&lt;/p&gt;
</content>
		</entry>
	
</feed>