<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Adam Silver: Designing simple, human and inclusive websites.</title>
	<link href="http://adamsilver.io/atom.xml" rel="self"/>
	<link href="http://adamsilver.io/"/>
	<updated>2017-05-10T18:13:53+01:00</updated>
	<id>http://adamsilver.io</id>
	<author>
		<name>Adam Silver</name>
	</author>

	
		<entry>
			<title>Stop using device breakpoints</title>
			<link href="http://adamsilver.io/articles/stop-using-device-breakpoints/"/>
			<updated>2017-03-28T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/stop-using-device-breakpoints</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I see it all the time. Designers, and developers alike, setting breakpoints according to their favourite device. When will we learn from our past mistakes?&lt;/p&gt;

&lt;p&gt;When the web came along we settled on 640 pixel widths. Then a few years later, when larger monitors came to market, we settled on 960 pixels. We no longer cared about people with smaller monitors.&lt;/p&gt;

&lt;p&gt;Then more years passed. The mobile web was born. Or more accurately, we could consume websites on our phones, which happen to have small screens. A million browsers came out. A million devices came out. And browsers gave us media queries.&lt;/p&gt;

&lt;p&gt;At about this time, we decided to use 320 pixels for mobile. Why? Because a lot of us had the iPhone, and this was its width in portrait.&lt;/p&gt;

&lt;p&gt;Then landscape mode. Then tablet (that’s still mobile right?). Then desktop. Then big desktop like super size thunder screens or whatever the hell they’re called. (I’m not Googling it because you know what I mean). Then TV. Then wristwatch and then…&lt;/p&gt;

&lt;p&gt;You get the point. The web is not print. The web is the web and we have no idea what size screen our users have. We just can’t control that. And even if we could, the proliferation of devices means that designing for them is futile.&lt;/p&gt;

&lt;p&gt;But there’s a few things we do know. We know our brand and our design. And, more importantly, we know our content. Content isn’t just paragraphs of text. It’s &lt;em&gt;the things that are held or included in something&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We should always start with content. Without content, design is meaningless. We design to help users consume content. We don’t use content to help users enjoy our designs.&lt;/p&gt;

&lt;p&gt;We often start designing with a box. And then we put smaller boxes inside it. Then later we fill in these boxes with actual content.&lt;/p&gt;

&lt;p&gt;As Frank Chimero beautifully explains in &lt;a href=&quot;https://www.frankchimero.com/writing/the-webs-grain/&quot;&gt;The Web’s Grain&lt;/a&gt;, this is just about the worst thing we can do.&lt;/p&gt;

&lt;p&gt;How can we possibly design something until we know what the content is?&lt;/p&gt;

&lt;p&gt;I’ve witnessed designers finish their mock-ups and ask the resident content designer to make the content fit. Maybe even ask them to shorten their user-friendly content to make sure it doesn’t wrap and so forth. It may help the designer. It doesn’t help the user.&lt;/p&gt;

&lt;p&gt;And when they check their design on landscape or on a device they don’t own, they get flustered. What they see as control, is really an unnecessary constraint on their design to a known set of device sizes.&lt;/p&gt;

&lt;p&gt;Instead we should let content be our guide. We should set a breakpoint when and if the content requires it. We can call them content breakpoints or what Frank refers to as points of reassembly.&lt;/p&gt;

&lt;p&gt;Take for example the subscribe form on &lt;a href=&quot;http://maintainablecss.com&quot;&gt;MaintainableCSS&lt;/a&gt;. Taking a content-led, small-screen first approach, the button sits under the text box. And when there’s room, they sit along side each other.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/breakpoints/maintainablecss.png&quot; alt=&quot;MaintainableCSS subscribe form&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;MaintainableCSS&#39; responsive subscribe form&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The media query uses a breakpoint of 36em. Why? Because that’s when there is an opportunity for content reassembly. The button and text control lose their affordance when they get really wide on bigger screens. So we can fix that.&lt;/p&gt;

&lt;p&gt;And it’s only relevant to the subscribe form. There is no blanket rule that states that 36em means “big”. The breakpoint reflects the need of the module and content in question.&lt;/p&gt;

&lt;p&gt;Technically it’s just a media query. But the mindset and the approach is what sets it apart. The design supports the content. Not the other way around.&lt;/p&gt;

&lt;p&gt;This is why &lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;CSS frameworks&lt;/a&gt; cause problems by unnecessarily constraining our content to fit into a predefined grid. How can a CSS framework know what our content is? It can’t.&lt;/p&gt;

&lt;p&gt;The term mobile first encourages us to think in terms of device. But the web isn’t a set of devices. The web is a continuum of edgelessness. That’s the coolest sentence I’ve ever written.&lt;/p&gt;

&lt;p&gt;What it means is this. There is absolutely no point —  whatsoever — in trying to work out the size of a particular device, in order to then define a codified responsive grid.&lt;/p&gt;

&lt;p&gt;At best it’s constraining and at its worst, it causes problems.&lt;/p&gt;

&lt;p&gt;Instead, let the content be your guide. If and when it breaks we can reassemble it with the necessary content breakpoint.&lt;/p&gt;

&lt;p&gt;Responsive design frees us from the shackles of designing based on devices, which is impossible to get a handle on. Content breakpoints give people better experiences no matter what size device they have.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Designing inclusively</title>
			<link href="http://adamsilver.io/articles/designing-inclusively/"/>
			<updated>2017-02-15T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/designing-inclusively</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whilst the web is still young, it’s been around long enough for us to know about its power and its constraints. We know what these constraints are now because we’ve bent them so much over the years.&lt;/p&gt;

&lt;p&gt;Before CSS we used tables and spacer gifs for layout. Before border-radius we used background images for rounded corners.&lt;/p&gt;

&lt;p&gt;We use pre-existing mediums as a guide for how a new medium should work. We take our preconceptions and apply them as we see fit.&lt;/p&gt;

&lt;p&gt;Whilst we’re better now at embracing the web, we still make plenty of &lt;a href=&quot;https://resilientwebdesign.com/chapter7/#Assumptions&quot;&gt;assumptions&lt;/a&gt; about it. And those assumptions get shattered down the line.&lt;/p&gt;

&lt;p&gt;We used to think all viewports were 640 pixels wide. We used to think all computers had a keyboard and mouse.&lt;/p&gt;

&lt;p&gt;Now, we think small screens mean swipe-able, and big screens equate to mouse users. These are also assumptions. These assumptions are wrong.&lt;/p&gt;

&lt;p&gt;We need to embrace the fact that we don’t know what users are doing. We don’t know their capability and we don’t know their preferences. We don’t know much. And that’s okay.&lt;/p&gt;

&lt;p&gt;We need to design inclusive experiences that embrace these constraints. This is neither boring nor easy.&lt;/p&gt;

&lt;p&gt;Designing a great and inclusive experience on the open web is a delicate challenge that we need to step up to.&lt;/p&gt;

&lt;p&gt;We can’t be creative without constraint anyway. Only with constraint can we design something truly brilliant.&lt;/p&gt;

&lt;p&gt;In order to be creative we need to know what these constraints are. So I’ve jotted them down so we can remember them easily. Here they are:&lt;/p&gt;

&lt;h2 id=&quot;human-outlook-and-understanding&quot;&gt;1. Human outlook and understanding&lt;/h2&gt;

&lt;p&gt;Everybody’s different. How people think and see the world is unique to the individual.&lt;/p&gt;

&lt;p&gt;We’re influenced by our environment, upbringing and the people we spend most time with. And we speak different languages.&lt;/p&gt;

&lt;h2 id=&quot;disability&quot;&gt;2. Disability&lt;/h2&gt;

&lt;p&gt;My left eye sucks (it won’t move left) and so I have to turn my head to use it properly.&lt;/p&gt;

&lt;p&gt;That’s just me — an estimated &lt;a href=&quot;http://www.serviceandinclusion.org/index.php?page=basic&quot;&gt;48.9 million people suffer from disabilities&lt;/a&gt;. Disabilities that affect &lt;a href=&quot;https://the-pastry-box-project.net/anne-gibson/2014-July-31&quot;&gt;mobility, hearing and eyesight&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, many disabilities are temporary. Even a mother holding a baby in one arm, is one arm down.&lt;/p&gt;

&lt;p&gt;If we can create something great for people with one arm, then we’ll be creating something even better for people with two.&lt;/p&gt;

&lt;h2 id=&quot;preference&quot;&gt;3. Preference&lt;/h2&gt;

&lt;p&gt;Even someone who is fully-abled (should such a person exist), still has preferences. And those preferences can change under different circumstances.&lt;/p&gt;

&lt;p&gt;My two year old boy, for example, can’t understand why nothing happens when he touches the screen of my Macbook. If it had a touch screen, that’s how he would use it. I prefer using keyboard myself but sometimes the mouse is better.&lt;/p&gt;

&lt;p&gt;Even people use screen readers in different ways. Users may navigate by heading. Or they may navigate by landmark. They may use braille displays and keyboards.&lt;/p&gt;

&lt;p&gt;And whilst I rarely print pages, not everyone is like me. Ensuring pages are easy to read when printed is something we must also consider.&lt;/p&gt;

&lt;h2 id=&quot;internet-speed-and-connectivity&quot;&gt;4. Internet speed and connectivity&lt;/h2&gt;

&lt;p&gt;We (people who work in the industry) tend to have fast connections. But many people out there are not like us.&lt;/p&gt;

&lt;p&gt;We must consider performance and connectivity from the beginning. Make the slow fast, and the fast faster.&lt;/p&gt;

&lt;h2 id=&quot;screen-size&quot;&gt;5. Screen size&lt;/h2&gt;

&lt;p&gt;People use all sorts of devices, from watches to huge TVs, and everything in between. We need to consider how things work across the board.&lt;/p&gt;

&lt;p&gt;Responsive design isn’t about 3 different sized containers according to device. It’s about &lt;a href=&quot;/articles/stop-using-device-breakpoints/&quot;&gt;fixing content where it breaks&lt;/a&gt; (if at all).&lt;/p&gt;

&lt;h2 id=&quot;browser-capability&quot;&gt;6. Browser capability&lt;/h2&gt;

&lt;p&gt;The devices and browsers people use have varying capabilities. This impacts what they can do and the features we offer them.&lt;/p&gt;

&lt;p&gt;We should deliver a core experience, and &lt;a href=&quot;/articles/progressively-enhanced-javascript/&quot;&gt;enhance only when the feature is available&lt;/a&gt;. Everything but content is an enhancement.&lt;/p&gt;

&lt;h2 id=&quot;internet-data-cost&quot;&gt;7. Internet data cost&lt;/h2&gt;

&lt;p&gt;Again whilst you and I may have expensive data contracts, many people do not. And even if it’s cheap, data can run out. Either way, we must think about this when we want to design inclusive experiences.&lt;/p&gt;

&lt;p&gt;This is not just about making lightweight experiences (though that’s essential). Breaking up content across pages allows people to load content as they see fit.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;8. Environment&lt;/h2&gt;

&lt;p&gt;Experiences are affected by low lighting and screen glare. Or being outside in the cold wearing touch-screen friendly winter gloves. Or choosing to interact verbally. Or turning down brightness to save battery.&lt;/p&gt;

&lt;p&gt;Either way, we need to test our designs in the real world.&lt;/p&gt;

&lt;h2 id=&quot;standards-and-conventions&quot;&gt;9. Standards and conventions&lt;/h2&gt;

&lt;p&gt;Android and IOS have standards and guides for designing apps. These guides act as constraints. This ensures we solve the same problems in the same way.&lt;/p&gt;

&lt;p&gt;The same applies to web design.&lt;/p&gt;

&lt;p&gt;When websites use the same patterns and conventions, interfaces become familiar. Familiar is better.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://medium.com/@mibosc/responsive-design-why-and-how-we-ditched-the-good-old-select-element-bc190d62eff5#.8m0u1kb7p&quot;&gt;break conventions&lt;/a&gt; but you need a good reason for doing so.&lt;/p&gt;

&lt;h2 id=&quot;interoperability&quot;&gt;10. Interoperability&lt;/h2&gt;

&lt;p&gt;People don’t just consume content directly through websites. They use Safari’s reading mode or a feed reader. And they rely on how Google displays a search result.&lt;/p&gt;

&lt;p&gt;Therefore, we need to design experiences that are interoperable because this is how people use our services.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;11. Configuration&lt;/h2&gt;

&lt;p&gt;People customise their phone and their browser to their liking. They may add plugins, or adjust the font size.&lt;/p&gt;

&lt;p&gt;Building experiences that honour people’s configuration and ability to choose is a vital aspect of designing inclusive experiences.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Each of these constraints elevate the needs of users to the number one spot. They influence everything from our choice of words and interaction design, to the code we use behind the scenes.&lt;/p&gt;

&lt;p&gt;Simply put, exclusive experiences ignore people. And there’s a lot be said for design that ignores people. People ignore it.&lt;/p&gt;

&lt;p&gt;Let’s not ignore people. Let’s design with these constraints at the fore. And in turn design better experiences for everyone.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Year in review 2016</title>
			<link href="http://adamsilver.io/articles/year-in-review-2016/"/>
			<updated>2017-01-01T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/year-in-review-2016</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve never written one of these before because I started this newsletter less than 12 months ago. It’s fresh just like me :).&lt;/p&gt;

&lt;p&gt;It’s good to reflect on the past, rather than rocketing into the future all the time. Which funnily enough is one of the biggest problems in our industry.&lt;/p&gt;

&lt;p&gt;We spend so much time looking for the latest and greatest whatever, that we don’t realise how much amazing stuff has already been solved in the past.&lt;/p&gt;

&lt;p&gt;So before looking ahead I’ll take a look at the last 12 months to see what went well and what didn’t — a retrospective because everyone loves Agile.&lt;/p&gt;

&lt;p&gt;I’m also going to need your help if you can spare a minute, so hold tight on that.&lt;/p&gt;

&lt;h2 id=&quot;what-went-well&quot;&gt;What went well&lt;/h2&gt;

&lt;h3 id=&quot;i-gave-a-talk-to-180-people&quot;&gt;1. I gave a talk to 180 people&lt;/h3&gt;

&lt;p&gt;When Simon McManus invited me to speak at a &lt;a href=&quot;http://enhanceconf.com/&quot;&gt;Enhanceconf 2016&lt;/a&gt; , my initial reaction was “no way”. Why would I subject myself to the fear of public speaking? I’m not that crazy.&lt;/p&gt;

&lt;p&gt;But they say you should step outside your comfort zone and so after friends and family convinced me to do so, I went ahead with it. The conference matched up to my own principles and I got to talk about a subject close to my heart.&lt;/p&gt;

&lt;p&gt;My talk was entitled &lt;a href=&quot;/articles/embracing-simplicity/&quot;&gt;Embracing Simplicity&lt;/a&gt; so if you haven’t seen it you know what to do.&lt;/p&gt;

&lt;p&gt;I also learnt a lot about &lt;a href=&quot;https://medium.com/simple-human/how-to-speak-at-conferences-if-you-lack-confidence-1b6ba6ae48cd&quot;&gt;public speaking&lt;/a&gt; so if you’re thinking about giving a talk this may save you some preparation time.&lt;/p&gt;

&lt;h3 id=&quot;i-wrote-for-smashing-magazine&quot;&gt;2. I wrote for Smashing Magazine&lt;/h3&gt;

&lt;p&gt;Someone at Smashing Magazine read &lt;a href=&quot;/articles/why-infinite-scrolling-is-probably-a-bad-idea/&quot;&gt;7 reasons why infinite scrolling is a bad idea&lt;/a&gt; . And they liked it enough to ask me to write for them. Who’d of thunk it.&lt;/p&gt;

&lt;p&gt;I was flattered and excited at the prospect because not only would I get to reach a larger audience, but I would also have talented people editing my shoddy work.&lt;/p&gt;

&lt;p&gt;After several rounds of feedback it was released on June 2016 and was entitled &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/improving-ux-for-color-blind-users/&quot;&gt;Improving The UX For Color-Blind Users&lt;/a&gt; . If you haven’t read it, I think you’ll enjoy it.&lt;/p&gt;

&lt;h3 id=&quot;i-wrote-a-book&quot;&gt;3. I wrote a book&lt;/h3&gt;

&lt;p&gt;I suddenly had the urge to write a book about maintainable CSS and I because I’m creative I called it &lt;a href=&quot;http://maintainablecss.com&quot;&gt;MaintainableCSS&lt;/a&gt; (but without a space).&lt;/p&gt;

&lt;p&gt;I had seen the hype around atomic class names and thoroughly disagree with it. And seeing as I wanted to document my own approach it seemed like a good idea to type shit into a computer and have it live on the internet.&lt;/p&gt;

&lt;p&gt;It’s been read more than 300,000 times since I released it in April last year. And it’s currently getting about 10,000 readers a month. I’ve had some wonderfully positive comments, and some heavy critique to match.&lt;/p&gt;

&lt;p&gt;Either way, I’m glad other people find value in it.&lt;/p&gt;

&lt;h3 id=&quot;i-started-a-newsletter&quot;&gt;4. I started a newsletter&lt;/h3&gt;

&lt;p&gt;And that’s what you’re reading now so thank you for subscribing. It means a lot to me. Without you there would be no me (or this) — you know what I mean.&lt;/p&gt;

&lt;p&gt;I wanted to start a newsletter for a number of reasons. For one, it’s a good way to get to know my readers better. And for two, it’s a good way to motivate me to write.&lt;/p&gt;

&lt;p&gt;My readership has steadily grown to 500+ subscribers and it’s growing slowly. What I’m most happy about is that I’ve managed to write consistently, about once-a-month ish.&lt;/p&gt;

&lt;h3 id=&quot;i-helped-launch-kidly&quot;&gt;5. I helped launch Kidly&lt;/h3&gt;

&lt;p&gt;In my day job I signed up for a 12 month contract with &lt;a href=&quot;http://kidly.co.uk&quot;&gt;Kidly&lt;/a&gt; . We designed and built — from nothing — a beautiful responsive e-commerce website to sell the best stuff for your baby.&lt;/p&gt;

&lt;p&gt;I’m particularly proud of how we embraced simple UX patterns and avoided the complex patterns which users rarely appreciate.&lt;/p&gt;

&lt;p&gt;For example, the navigation &lt;a href=&quot;/articles/designing-a-responsive-menu-without-a-hamburger/&quot;&gt;avoids the hamburger&lt;/a&gt; and works on click (&lt;a href=&quot;/articles/why-hover-menus-are-problematic/&quot;&gt;not hover&lt;/a&gt;). This is more discoverable and inclusive to users.&lt;/p&gt;

&lt;p&gt;Customers have raved about the site. And when I left, conversion from basket was at the 26% mark, which is excellent.&lt;/p&gt;

&lt;p&gt;If you want to read more about my Kidly experience, I wrote about it in &lt;a href=&quot;/articles/how-we-cut-our-mvp-in-half-to-launch-kidly/&quot;&gt;How we cut our MVP in half to launch KIDLY&lt;/a&gt; .&lt;/p&gt;

&lt;h3 id=&quot;my-article-was-featured-in-inclusive-design-patterns&quot;&gt;6. My article was featured in “Inclusive Design Patterns”&lt;/h3&gt;

&lt;p&gt;I turned up to work one day, and Tim, a designer on my team told me that I’ve been cited in Smashing Magazine’s latest book, &lt;a href=&quot;https://shop.smashingmagazine.com/products/inclusive-design-patterns&quot;&gt;Inclusive Design Patterns&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Buttons and links were discussed and the author referenced my own article about how &lt;a href=&quot;https://medium.com/simple-human/buttons-shouldnt-have-a-hand-cursor-b11e99ca374b#.2tfgocaxv&quot;&gt;button’s shouldn’t have a hand cursor&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;I wanted to read the book anyway, but as I was featured in it, I started reading it immediately. Because I’m egotistical like that :).&lt;/p&gt;

&lt;h3 id=&quot;i-worked-less&quot;&gt;7. I worked less&lt;/h3&gt;

&lt;p&gt;I worked part time for pretty much 12 months. Sometimes 3 days, sometimes 4 days and the odd 5 day week. If you’ve never done it, I can’t recommend it enough. There is this amazing double-whammy affect. You lose a day’s work but you gain an extra “weekend” day.&lt;/p&gt;

&lt;h3 id=&quot;i-read-some-amazing-books&quot;&gt;8. I read some amazing books&lt;/h3&gt;

&lt;p&gt;In no particular order here they are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Hooked-Guide-Building-Habit-Forming-Products/dp/1494277530&quot;&gt;Hooked&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/d/cka/One-Plus-Equals-Three-Masterclass-Creative-Thinking/1447287053/ref=sr_1_4?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302764&amp;amp;sr=1-4&amp;amp;keywords=one+plus+one&quot;&gt;One Plus One&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Talk-Like-TED-Speaking-Secrets/dp/1447261135/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302786&amp;amp;sr=1-1&amp;amp;keywords=Talk+Like+Ted&quot;&gt;Talk Like Ted&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/d/Books/Mans-Search-Meaning-classic-tribute-hope-Holocaust/1844132390/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302807&amp;amp;sr=1-1&amp;amp;keywords=mans+search+for+meaning&quot;&gt;Man’s Search For Meaning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Penguin-Great-Ideas-Shortness-Life/dp/014101881X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302821&amp;amp;sr=1-1&amp;amp;keywords=on+the+shortness+of+life&quot;&gt;On The Shortness Of Life&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/d/Books/How-Win-Friends-Influence-People-Dale-Carnegie/0091906814/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302836&amp;amp;sr=1-1&amp;amp;keywords=How+To+Win+Friends+%26+Influence+People&quot;&gt;How To Win Friends &amp;amp; Influence People&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Letting-Go-Words-Interactive-Technologies-x/dp/0123859301/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1484302850&amp;amp;sr=1-1&amp;amp;keywords=letting+go+of+the+words&quot;&gt;Letting Go Of The Words&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/inclusive-design-patterns/&quot;&gt;Inclusive Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-publisher-offered-me-a-book-deal&quot;&gt;9. A publisher offered me a book deal&lt;/h3&gt;

&lt;p&gt;Even though I turned it down, I was chuffed just to be asked. I decided against it as a) I didn’t want to be on someone else’s schedule and b) I like the idea of self-publishing, and in my own time no less.&lt;/p&gt;

&lt;h3 id=&quot;i-started-working-for-govuk&quot;&gt;10. I started working for GOV.UK&lt;/h3&gt;

&lt;p&gt;One thing that I’ve always been frustrated by in our industry is the lack of empathy for users. Too often we design exclusive experiences where only young people, with good vision, on their cutting edge iPhone can comfortably use a service.&lt;/p&gt;

&lt;p&gt;This is why I wanted to work in the public sector. I’ve always wanted to work in a place where we embrace the web as a platform, and strive to design inclusive experiences, that solve real problems.&lt;/p&gt;

&lt;p&gt;So when the opportunity came up it was a no brainer to accept a contract with them. I hope it continues to be as enjoyable as the last 6 months.&lt;/p&gt;

&lt;h2 id=&quot;what-didnt-go-well&quot;&gt;What didn’t go well&lt;/h2&gt;

&lt;h3 id=&quot;i-left-kidly&quot;&gt;1. I left Kidly&lt;/h3&gt;

&lt;p&gt;When I joined Kidly, I was aware my time there would be short. I even helped to find my permanent replacement. But as I enjoyed working with the team and the product so much, I didn’t want to leave. But this is the life of a contractor.&lt;/p&gt;

&lt;h3 id=&quot;i-made-little-progress-on-my-forms-book&quot;&gt;2. I made little progress on my forms book&lt;/h3&gt;

&lt;p&gt;Early last year I began writing a book on how to design forms. I’ve been obsessed with forms since 2008, so I’d quite like to dump all my learnings into a book so it’s out of my head. But I’ve not really made much progress beyond a contents page.&lt;/p&gt;

&lt;h3 id=&quot;carbon-ads-made-no-money&quot;&gt;3. Carbon Ads made no money&lt;/h3&gt;

&lt;p&gt;I’ve never been a fan of ads but Carbon Ads are unobtrusive and relevant. I gave them a try and made pretty much nothing. So I took them out. Worth a go I guess.&lt;/p&gt;

&lt;h3 id=&quot;working-5-day-weeks-again&quot;&gt;4. Working 5-day weeks again&lt;/h3&gt;

&lt;p&gt;Since leaving Kidly, I’ve been working 5-day weeks again. The money is good, but my spare time is once again at a premium.&lt;/p&gt;

&lt;h3 id=&quot;i-didnt-publish-maintainablecss-on-kindle&quot;&gt;5. I didn’t publish MaintainableCSS on Kindle&lt;/h3&gt;

&lt;p&gt;Some of my readers expressed an interest in this, so I put it on my list but it didn’t get done.&lt;/p&gt;

&lt;h3 id=&quot;i-retired-thebfedcom&quot;&gt;6. I retired thebfed.com&lt;/h3&gt;

&lt;p&gt;The website is dead. But &lt;a href=&quot;/articles/the-boring-front-end-developer/&quot;&gt;The boring front-end developer&lt;/a&gt; will forever live on through my website.&lt;/p&gt;

&lt;h3 id=&quot;i-couldnt-decide-where-i-should-publish-my-articles&quot;&gt;7. I couldn’t decide where I should publish my articles&lt;/h3&gt;

&lt;p&gt;With the rise of Medium, I didn’t know where to put my articles. Some went on there, some went on my blog, and some went on both. I’ve since rectified this which I’ll explain in the next section.&lt;/p&gt;

&lt;h2 id=&quot;whats-coming-up-in-2017&quot;&gt;What’s coming up in 2017&lt;/h2&gt;

&lt;h3 id=&quot;newsletter&quot;&gt;1. Newsletter&lt;/h3&gt;

&lt;p&gt;I’ll be continuing sending you my newsletter. I’ve already got another 12 or so topics I want to write to you about. And I think I’ll be continuing with the same pace (at about once a month).&lt;/p&gt;

&lt;h3 id=&quot;improvements-to-adamsilverio&quot;&gt;2. Improvements to AdamSilver.io&lt;/h3&gt;

&lt;p&gt;Not all of my newsletters will be published on my blog. So if you want to make sure to get all of my stuff, then be sure to sign up.&lt;/p&gt;

&lt;p&gt;For those articles that I do publish, they will definitely be published on my website. I may choose to repost to Medium so that more people can read it and comment if they wish.&lt;/p&gt;

&lt;h3 id=&quot;forms-book&quot;&gt;3. Forms book&lt;/h3&gt;

&lt;p&gt;Along with the newsletter this is something I’d like to complete. I’m making no promises but this is high up the list of priorities.&lt;/p&gt;

&lt;h3 id=&quot;maintainablecss&quot;&gt;4. MaintainableCSS&lt;/h3&gt;

&lt;p&gt;I’ve already rebranded MaintainableCSS which I hope you like. I’ve also given the content a spring clean which should make it easier to read. And I would like to publish on Kindle, which should please some of you, and hopefully I can make a little money in the process.&lt;/p&gt;

&lt;h3 id=&quot;working-for-govuk&quot;&gt;5. Working for GOV.UK&lt;/h3&gt;

&lt;p&gt;I want to continue solving real problems in a simple, human and inclusive way for the UK public. Fingers crossed.&lt;/p&gt;

&lt;h2 id=&quot;which-brings-me-to-you&quot;&gt;Which brings me to you!&lt;/h2&gt;

&lt;p&gt;I need your help. If you think I could do something different. Or you’d like me to write about a particular topic, I’d love to hear from you.&lt;/p&gt;

&lt;p&gt;Any guidance, good or bad, is helpful. At the end of the day I want to know what you want. So if you have some ideas, just hit reply (I read every email).&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Don't initialise Javascript automagically</title>
			<link href="http://adamsilver.io/articles/dont-initialise-javascript-automagically/"/>
			<updated>2016-12-06T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/dont-initialise-javascript-automagically</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used to write Javascript that initialises components automagically. Don’t
worry I’ll explain what I mean. Take a look below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var datepickers = document.getElementsByClassName(‘datepicker’);
for(var i = 0; i &amp;lt; datepickers.length; i++) {
  new DatePicker(datepickers[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The technique works by looping over every element with a particular behavioural
class name. If the Document contains the class name several times, the script
creates several instances. With no Javascript changes at all. That’s the
automagical bit.&lt;/p&gt;

&lt;p&gt;Developers commend this technique because there’s only four lines of code. Less
if using a library. And it never needs updating. If you want another date
picker, just add a class of date picker. Job done.&lt;/p&gt;

&lt;p&gt;This approach is problematic for many reasons. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;its-harder-to-understand-the-codebase-at-a-glance&quot;&gt;1. It’s harder to understand the codebase at a glance&lt;/h2&gt;

&lt;p&gt;To understand the codebase at a glance, you need to know what behaviour exists
and where.&lt;/p&gt;

&lt;p&gt;The loop doesn’t tell you how many date pickers there are. There could be a
thousand instances or there could be one (or none) — in which case the loop is
misleading. Either way you don’t know.&lt;/p&gt;

&lt;h2 id=&quot;you-might-apply-behaviour-by-accident&quot;&gt;2. You might apply behaviour by accident&lt;/h2&gt;

&lt;p&gt;If you happen to use a class that corresponds to a component, then you might
accidentally initialise behaviour.&lt;/p&gt;

&lt;h2 id=&quot;its-difficult-to-estimate-stories&quot;&gt;3. It’s difficult to estimate stories&lt;/h2&gt;

&lt;p&gt;If you can’t document what you’re changing and where, it’s difficult to define
and estimate a story.&lt;/p&gt;

&lt;h2 id=&quot;its-difficult-to-qa&quot;&gt;4. It’s difficult to QA&lt;/h2&gt;

&lt;p&gt;After modifying a date picker, a tester will ask you what parts of the system
you’ve affected. The loop doesn’t help you answer this question.&lt;/p&gt;

&lt;h2 id=&quot;its-harder-to-debug&quot;&gt;5. It’s harder to debug&lt;/h2&gt;

&lt;p&gt;If there’s a problem with one date picker, finding and debugging it is more
tricky. You will have to find the problematic instance by searching the HTML
templates. Then you will need to step through the loop until you find the
erroneous one.&lt;/p&gt;

&lt;h2 id=&quot;its-harder-to-delete&quot;&gt;6. It’s harder to delete&lt;/h2&gt;

&lt;p&gt;As you don’t know where the loop is executing, you can’t delete code in
confidence. Thus, the code stays in the codebase for a long time.&lt;/p&gt;

&lt;h2 id=&quot;its-hard-to-determine-behaviour&quot;&gt;7. It’s hard to determine behaviour&lt;/h2&gt;

&lt;p&gt;This approach forces you to store behaviour in HTML attributes. This isn’t an
elegant way to define behavioural relationships. HTML becomes bloated and hard
to read. Every attribute value is a string, when you might, for example, want a
number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;datepicker otherComponent&quot; data-datepicker-attr=&quot;etc&quot; data-datapicker-event=&quot;listener&quot; data-othercomponent-attr=&quot;blah&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;its-painful-to-customise&quot;&gt;8. It’s painful to customise&lt;/h2&gt;

&lt;p&gt;When you need to use models and XHR etc, it becomes painful to work with this
approach.&lt;/p&gt;

&lt;p&gt;I’ll give you an example. Imagine you have a form with two date pickers: a
start-date and end-date.&lt;/p&gt;

&lt;p&gt;When the user chooses a start-date, the end-date values update. This is to
ensure the end-date is always after the start-date.&lt;/p&gt;

&lt;p&gt;This is hard to define in HTML. In Javascript it’s easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var startDate = new DatePicker();
var endDate = new DatePicker();
startDate.on(&#39;changed&#39;, function() { endDate.whatever(); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;its-painful-to-infer-behaviour-from-html&quot;&gt;9. It’s painful to infer behaviour from HTML&lt;/h2&gt;

&lt;p&gt;The loop doesn’t allow you to customise an instance by passing in options. Instead, you have to store behaviour in HTML. When you change behaviour, you must update the HTML. This goes against recommended​ &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;practices&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-painful-to-override-behaviour&quot;&gt;10. It’s painful to override behaviour&lt;/h2&gt;

&lt;p&gt;To override behaviour, you will need to add an extra class to the HTML. Then the date picker (or the loop) will determine the override by checking for this extra class. At this point, the component (or the loop) is no longer generic.​&lt;/p&gt;

&lt;h2 id=&quot;its-hard-to-destroy-instances&quot;&gt;11. It’s hard to destroy instances&lt;/h2&gt;

&lt;p&gt;It’s easy to store the instances during initialisation. But, determining and
retrieving one later so you can destroy it, is harder this way.&lt;/p&gt;

&lt;h2 id=&quot;it-increases-the-chance-of-performance-issues&quot;&gt;12. It increases the chance of performance issues&lt;/h2&gt;

&lt;p&gt;This approach means the Javascript has to crawl the DOM a lot more than is
otherwise necessary. First to find elements that need enhancing, and second to
determine behaviour from attributes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nczonline.net/blog/2009/02/03/speed-up-your-javascript-part-4/&quot;&gt;Touching the DOM is expensive&lt;/a&gt;, which increases the risk of performance issues. The risk increases further when you have many components and many instances of a component.&lt;/p&gt;

&lt;h2 id=&quot;its-harder-to-unit-test&quot;&gt;13. It’s harder to unit test&lt;/h2&gt;

&lt;p&gt;It’s difficult to unit test behaviour when you store behaviour in HTML. You
might then decide to use HTML fixtures. But they are slow and you’re no longer
writing unit tests. You &lt;em&gt;could&lt;/em&gt; mock the DOM but this is tedious and
problematic. The less you store in HTML the easier it is to test.&lt;/p&gt;

&lt;h2 id=&quot;but-i-dont-want-to-update-javascript-every-time-i-want-a-new-instance&quot;&gt;“But I don’t want to update Javascript every time I want a new instance?”&lt;/h2&gt;

&lt;p&gt;I fail to see why updating Javascript is a problem. In fact, I would &lt;em&gt;expect&lt;/em&gt;
you to change Javascript when updating behaviour. Updating HTML instead of
Javascript is not better.&lt;/p&gt;

&lt;h2 id=&quot;is-this-necessaryit--feels-like-code-bloat&quot;&gt;“Is this necessary—it  feels like code bloat?”&lt;/h2&gt;

&lt;p&gt;If code is valuable, it’s not code bloat.&lt;/p&gt;

&lt;h2 id=&quot;but-the-javascript-will-have-a-lot-more-code&quot;&gt;“But the Javascript will have a lot more code.”&lt;/h2&gt;

&lt;p&gt;Maybe. Maybe not. It depends on your architecture and your requirements. Even if
it did, good code is not just determined by the number of lines.&lt;/p&gt;

&lt;h2 id=&quot;but-lets-at-least-use-it-for-simple-components&quot;&gt;“But let’s at least use it for simple components.”&lt;/h2&gt;

&lt;p&gt;Even if it did work for simple components, you have to draw a line between
simple and complex. This is arbitrary and having two ways of doing the same
thing makes code inconsistent.&lt;/p&gt;

&lt;h2 id=&quot;its-easier-for-backend-developers-to-add-behaviour-in-html&quot;&gt;“It’s easier for &lt;strong&gt;backend developers to add behaviour in HTML.&lt;/strong&gt;”&lt;/h2&gt;

&lt;p&gt;You need to decide whether backend developers should be writing Javascript or
not. If they should be writing it, then help them do it right. They are software
engineers. Trust them.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Good code is not about number of lines.&lt;/p&gt;

&lt;p&gt;Good code is not about how easy it is to write the first time.&lt;/p&gt;

&lt;p&gt;Good code is easy to reason about.&lt;/p&gt;

&lt;p&gt;Good code is easy to update.&lt;/p&gt;

&lt;p&gt;Good code is consistent.&lt;/p&gt;

&lt;p&gt;Good code is easy to unit test.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to.&quot;&gt;Good code is easy to delete.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bad code is easy to write but hard to delete. Bad code is magical. Magic is
entertaining. Code shouldn’t be entertaining.&lt;/p&gt;

&lt;p&gt;Automagical loops obfuscate complexity. They make things appear simple when
they’re not.&lt;/p&gt;

&lt;p&gt;Help future-you by writing Javascript that doesn’t suffer from these problems.
HTML isn’t good at defining behaviour. But Javascript is.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Less but better</title>
			<link href="http://adamsilver.io/articles/less-but-better/"/>
			<updated>2016-11-18T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/less-but-better</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are times in life when you learn something new — a moment that sets you off down a different path. Maybe you always had it “in” you, but something triggered it. Maybe it was a culmination of things or maybe something else entirely.&lt;/p&gt;

&lt;p&gt;I think it happened to me when I was working with &lt;a href=&quot;http://theluckystrike.co.uk/&quot;&gt;Mark
Jenkins&lt;/a&gt; in the UX team at &lt;a href=&quot;http://just-eat.co.uk/&quot;&gt;Just
Eat&lt;/a&gt; back in 2014. But, before I tell you what happened, I want to set the scene a little bit.&lt;/p&gt;

&lt;p&gt;They say 3 of the hardest things to deal with in life are: having a child,
refurbishing a house and moving job. Well, the hero I am (LOL), I did all three at the same time.&lt;/p&gt;

&lt;p&gt;And whilst it was my choice to do the first two, the third wasn’t. They let me go and whilst that can happen as part of being a contractor it wasn’t part of the “plan”.&lt;/p&gt;

&lt;p&gt;Doing one thing is hard enough but doing three is not the way to do something well or stress-free. If, for example, I just had the new job, it would have been far easier to deal with.&lt;/p&gt;

&lt;p&gt;So I moved on and sorted myself out with a new six-month contract at Just Eat. And that is when I met Mark, a UX designer.&lt;/p&gt;

&lt;p&gt;It didn’t take long for me to realise how awesome he was. I am not one of those guys who says everything is “awesome”. Mark though, was and is, awesome.&lt;/p&gt;

&lt;p&gt;We talked about some of the troubles that Just Eat had. How we hoped we could help the team make things better. In terms of UX, front-end and the time it takes to release — just to name a few.&lt;/p&gt;

&lt;p&gt;It’s not only Just Eat — most companies, teams and products have problems.
In-fact, they have problems because of their huge success.&lt;/p&gt;

&lt;p&gt;Success can breed failure because success breeds growth. And when a company
grows, there is just &lt;em&gt;more&lt;/em&gt; of everything — more people and more opportunities to spend your attention on.&lt;/p&gt;

&lt;p&gt;Mark and I spent a lot of time discussing these things. Then, one day he gave me this book: &lt;a href=&quot;https://www.amazon.co.uk/gp/product/0753555166/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0753555166&amp;amp;linkCode=as2&amp;amp;tag=adamsilverio-21&quot;&gt;Essentialism: The disciplined pursuit of
less&lt;/a&gt;. He said “read this, you’ll love it.”&lt;/p&gt;

&lt;p&gt;I did love it.&lt;/p&gt;

&lt;p&gt;It was the idea that doing less is far more productive than doing more. The idea that you can do less, but better.&lt;/p&gt;

&lt;p&gt;Problem is, it seems as though people are hard-wired with a do-more mindset.&lt;/p&gt;

&lt;p&gt;I see it all the time in our industry. They design solutions for problems that don’t exist. They make something far more complicated than needed. They do a whole bunch of stuff that adds little or no value.&lt;/p&gt;

&lt;p&gt;People think you’re mad if you say you want less stuff . In-fact the American Dream revolves around the idea that more is better — but that
&lt;a href=&quot;http://www.theminimalists.com/dream/&quot;&gt;story&lt;/a&gt; is for another day.&lt;/p&gt;

&lt;p&gt;When you do more, there is a tendency to do even more after that. It’s habit
forming.&lt;/p&gt;

&lt;p&gt;And I am not just talking about design. I am talking about &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Whether you’re designing, coding, or managing product scope, make the next smallest improvement. Then get feedback. Do just what you need to do and no more than that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Narrow your focus and do it better.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In software engineering, they call it
&lt;a href=&quot;https://en.wikipedia.org/wiki/You_aren&#39;t_gonna_need_it&quot;&gt;YAGNI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In product management, they call it
&lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Agile they call it &lt;a href=&quot;https://leankit.com/learn/kanban/continuous-improvement/&quot;&gt;continuous
improvement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In reality all this — everything — is design. Whether you’re designing a
product, a process or even your life, it’s all design.&lt;/p&gt;

&lt;p&gt;Coding up a UI component? Just build it and worry about abstraction later. Once you’ve learned more about what’s worth abstracting.&lt;/p&gt;

&lt;p&gt;Facilitating and managing the delivery process? Add just as much process as you need and no more. Ask your team how it went. And improve.&lt;/p&gt;

&lt;p&gt;Enhancing something with Javascript? Build the degraded version first and see if it’s good enough. You might surprise yourself.&lt;/p&gt;

&lt;p&gt;Living life? Try and &lt;a href=&quot;https://medium.com/the-mission/the-1-rule-for-creating-all-habits-53aa3f10bc5d#.8n48coaus&quot;&gt;improve something small just 1% per
day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;People get excited by more. People get excited by complexity. People get excited by the idea that something can be perfect but there is no such thing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Done&lt;/em&gt; is better than perfect.&lt;/p&gt;

&lt;p&gt;I get excited by doing something that didn’t need complexity. That didn’t need more. That &lt;em&gt;less&lt;/em&gt; was enough, that &lt;em&gt;less&lt;/em&gt; was &lt;em&gt;better&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s a constant practice, a habit to form, a mindset to nurture.&lt;/p&gt;

&lt;p&gt;The trick is to practice continuous improvement.&lt;/p&gt;

&lt;p&gt;Then after you’re done you can &lt;em&gt;iterate&lt;/em&gt;. The next smallest improvement creates momentum. Then you’re done again.&lt;/p&gt;

&lt;p&gt;Then you’re in a flow of done.&lt;/p&gt;

&lt;p&gt;Then you’re in a flow of learning (from users).&lt;/p&gt;

&lt;p&gt;Then you’ve achieved momentum.&lt;/p&gt;

&lt;p&gt;Then it’s just the way you do things.&lt;/p&gt;

&lt;p&gt;The users might be your team members following a process.&lt;/p&gt;

&lt;p&gt;They might be your fellow developers trying to use your code.&lt;/p&gt;

&lt;p&gt;And, of course, people using your product.&lt;/p&gt;

&lt;p&gt;When you do more, you spread yourself thinly. You widen your focus and you do it all to a lesser standard. You learn fewer things, over a longer period of time and get stressed. That’s not a recipe for success.&lt;/p&gt;

&lt;p&gt;Anyway, this email is my MVP. Time to press send.&lt;/p&gt;

&lt;p&gt;If you unsubscribe, that’s okay. For one I got it done. For two I can learn to iterate and write you a better email next time.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Semantic class names: are you being too generic or too specific?</title>
			<link href="http://adamsilver.io/articles/semantic-class-names-are-you-being-too-generic-or-too-specific/"/>
			<updated>2016-10-31T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/semantic-class-names-are-you-being-too-generic-or-too-specific</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even if you’re completely sold on &lt;a href=&quot;http://maintainablecss.com/chapters/semantics/&quot;&gt;semantic class names&lt;/a&gt; and avoid stylistic and behavioural class names altogether, choosing a good class name is hard.&lt;/p&gt;

&lt;p&gt;The problem boils down to naming your classes either too generically or too specifically. Both of which have pros and cons. But I like to think we can choose a class name without any cons. Let’s see.&lt;/p&gt;

&lt;p&gt;Most developers I’ve worked with tend to use overly generic class names. There’s a tendency to do this because—at least in theory—the more generic something is the more reusable it is. But for CSS this isn’t really the case.&lt;/p&gt;

&lt;p&gt;It’s easier to explain what I mean by example. So, let’s build a login form together. The login form has an email and password field. I will leave out certain elements for brevity.&lt;/p&gt;

&lt;p&gt;To start, we could name these elements as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form class=”loginForm”&amp;gt;
  &amp;lt;div class=”loginForm-email”&amp;gt;
    &amp;lt;label&amp;gt;…&amp;lt;/label&amp;gt;
    &amp;lt;input type=”email”&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=”loginForm-password”&amp;gt;
    &amp;lt;label&amp;gt;…&amp;lt;/label&amp;gt;
    &amp;lt;input type=”password”&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These class names are coupled to this one module. They can’t be reused elsewhere. This is good because we can style the form without affecting other forms. On the other hand, by using a mixin or comma-delimitting selectors we &lt;em&gt;can&lt;/em&gt; reuse the &lt;em&gt;styles&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.loginForm-email,
.loginForm-password,
.someOtherForm-someField {
  /* Common field style */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are problems with this approach. First, you could end up with quite a lot of CSS which seems a bit unnecessary. Second, every new field requires CSS changes. Simple changes, but changes nonetheless.&lt;/p&gt;

&lt;p&gt;Now if your forms have a different structure and aesthetic this isn’t a problem at all. In fact it’s a benefit. But I would guess that most, if not all forms will have the same styling. Afterall, good design is consistent.&lt;/p&gt;

&lt;p&gt;We could improve our approach by upgrading a field to a module and naming it &lt;code&gt;.formField&lt;/code&gt;. This feels better to me, at least at this stage of the analysis. This module doesn’t require a mixin or comma-delimitted selectors. And each new field does not require CSS changes.&lt;/p&gt;

&lt;p&gt;Let’s continue by finding some problems with this generic, reusable &lt;code&gt;.formField&lt;/code&gt; module. What if some fields need to accomodate a hint, for example? And for the purposes of this example this sort of field needs different styles to accomodate the hint.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&quot;http://maintainablecss.com/chapters/modifiers/&quot;&gt;modifiers&lt;/a&gt; come in. Just add an extra class name and make the required tweaks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form class=”someForm”&amp;gt;
  &amp;lt;div class=”formField”&amp;gt;
    &amp;lt;label&amp;gt;…&amp;lt;/label&amp;gt;
    &amp;lt;input type=”text”&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=”formField formField-withHint”&amp;gt;
    &amp;lt;label&amp;gt;…&amp;lt;/label&amp;gt;
    &amp;lt;p&amp;gt;The hint goes here&amp;lt;/p&amp;gt;
    &amp;lt;input type=”text”&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we just needed a few tweaks and so this generic class name works well. But what if we had something that’s significantly different? For example, you might need a field with radio buttons.&lt;/p&gt;

&lt;p&gt;Using a modifier is problematic because there is little to inherit. When we named our module &lt;code&gt;.formField&lt;/code&gt; we didn’t consider radio buttons, or any other type of control for that matter.&lt;/p&gt;

&lt;p&gt;This isn’t necessarily a bad thing. In fact, in many ways this is good. If we try too early to find commonality in a design system, it can lead to over-engineered solutions.&lt;/p&gt;

&lt;p&gt;Text fields are very different to radios. The latter requires a legend, fieldset and a different structure. They’re so different that despite them both being form fields, we shouldn’t consider them to be the &lt;em&gt;same&lt;/em&gt; at all. This point is worth deliberating over.&lt;/p&gt;

&lt;p&gt;Earlier, &lt;code&gt;.formField&lt;/code&gt; felt like a good name for a class. But now, with this new information it doesn’t seem so good. We don’t want to update styles for a radio field and worry about regressing the text fields.  And, we don’t want to work out the few bits of commanility between these two entities, just to shave a little CSS.&lt;/p&gt;

&lt;p&gt;Having analysed the situation, it’s much easier to decide on a good name. I would suggest naming the text field &lt;code&gt;.textField&lt;/code&gt; and the radios &lt;code&gt;.radioField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This enables us to treat them as the distinct modules they are. They’re specific enough to be able to differentiate. Yet they are generic enough to be reused across multiple forms, without writing unnecessary CSS.&lt;/p&gt;

&lt;p&gt;In retrospect this seems rather easy. The problem is that we face decisions like this all the time. Or we don’t face them and end up with unmaintainable CSS. This is why I prefer to start with specific class names.&lt;/p&gt;

&lt;p&gt;I’d rather have a little more CSS and the flexibility to style elements consistently (or differently whatever the case may be). Otherwise, I’d have to contend with overrides and regression.&lt;/p&gt;

&lt;p&gt;This affords us the space and time to learn what is worth abstracting and what isn’t. You may learn that even &lt;code&gt;.textField&lt;/code&gt; is too generic. For example, you might have many different types of text fields that are better off being their own modules. You might not.&lt;/p&gt;

&lt;p&gt;What’s important is that we think about these things frequently and rigorously. I’ve found the following questions useful over the years:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Do you have a module appearing in many places but with slightly different aesthetics based on proximity, location or content?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If yes, you should probably use a &lt;a href=&quot;http://maintainablecss.com/chapters/modifiers/&quot;&gt;modifier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Do you have a component that could be used elsewhere pretty much as is?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If yes, you should probably convert the module into a component. But, be careful not to name it too generically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Do you have a module with many different modifiers? Or are you spending time working out what styles are common to all scenarios?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If yes, you probably named the module too generically. Split it out into several dedicated modules.&lt;/p&gt;

&lt;p&gt;Having to think about class names is hard. But not thinking about class names is much harder, at least down the line. If in doubt, go specific, but if you think about these problems frequently you may not have to.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Browsers are different but so what?</title>
			<link href="http://adamsilver.io/articles/browsers-are-different-but-so-what/"/>
			<updated>2016-09-01T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/browsers-are-different-but-so-what</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You know, it’s funny, when the web came along, we used the medium of print to set expectations for how things should be.&lt;/p&gt;

&lt;p&gt;When you print out a business card it always looks the same, no matter who you are or where you are. It’s a physical thing.&lt;/p&gt;

&lt;p&gt;This is not the case with browsers. Browsers are not identical to each other. They are largely similar, but they still have plenty of differences. Just like Mac and Windows. Both computers can be used to perform very similar tasks. But they &lt;em&gt;are&lt;/em&gt; different.&lt;/p&gt;

&lt;p&gt;When people first encountered this difference on the web they would be like “WTF”. Founders, business owners, testers and even designers and developers (you know the very people that are meant to know this shit ) all included.&lt;/p&gt;

&lt;p&gt;This reaction is based on a belief system , the belief that the browser should behave a certain way, in this case like print.&lt;/p&gt;

&lt;p&gt;The funny thing about belief systems, is that even if they are wrong, it doesn’t really matter right?&lt;/p&gt;

&lt;p&gt;Well, kinda. Let me explain:&lt;/p&gt;

&lt;p&gt;It’s true that if people paying for the project believe a website should look identical, then that’s what front-end developers (and testers etc) will be tasked with. And this is exactly what happened to me and many other people working in the industry.&lt;/p&gt;

&lt;p&gt;It’s false because people’s beliefs change due to new experiences and education. Over time people learnt that the browser is different. It’s special and uniquely powerful. It’s not print.&lt;/p&gt;

&lt;p&gt;This often leads to the realisation that the idea of making things look identical and “perfect” in all browsers is not only Sisyphean, but that it’s not required or even &lt;em&gt;valuable&lt;/em&gt; to the user on the other end. I guess what I am trying say is users don’t care!&lt;/p&gt;

&lt;p&gt;Most people use one or two browsers. And even if they use more than that, it still doesn’t matter, because users don’t even notice — they don’t care about your website like you do — they just want to use the service and get back to their day. And even if they did notice, so what?&lt;/p&gt;

&lt;p&gt;Furthermore, those subtle differences would be the same across all the websites they browse to in that browser. For example, radio buttons are rendered slightly different in IE9. But that will be the case for every website that uses radios. It becomes an expectation and one that in almost all scenarios doesn’t hurt the experience.&lt;/p&gt;

&lt;p&gt;If a client or tester or whoever else says “But [insert browser] does it like this…” this is typically a huge waste of time. My response is almost always “Yes, is that a problem?”. Invariably there is no actual reason to worry about this at all.&lt;/p&gt;

&lt;p&gt;Case in point. On a recent project a download attribute was added to a link:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=”/path/to/file.pdf” download&amp;gt;Download PDF file&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without this, some browsers — depending on the file-type — will load that file in the browser like a web page. This is the case for a PDF file for example.&lt;/p&gt;

&lt;p&gt;This attribute ensures that the file is to be treated as a download in the traditional sense i.e. downloaded into a folder on the user’s machine.
The “problem” is that when the file can’t be found, FireFox displays a “special” screen that explains that it can’t be downloaded. Other browsers just show the regular 404 page served by the website typically “We can’t find what you’re looking for” etc.&lt;/p&gt;

&lt;p&gt;Is this a problem? Of course not. Firefox will do this for all websites that use the download attribute. Arguably it’s an enhancement for FireFox Users — lucky them! In the future FireFox might change the behaviour. Maybe Chrome copies them. Maybe none of this happens. Who knows and who cares? Users don’t.&lt;/p&gt;

&lt;p&gt;My point is this. The web is its own thing. It has its own ways. This is not something to be feared. There is nothing to bat into shape. The web and the browser is to be &lt;a href=&quot;/articles/embracing-simplicity/&quot;&gt;embraced&lt;/a&gt; to the user’s advantage.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Developing templates using an outside-in approach</title>
			<link href="http://adamsilver.io/articles/developing-templates-using-an-outside-in-approach/"/>
			<updated>2016-08-08T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/developing-templates-using-an-outside-in-approach</id>
			<content type="html">&lt;p&gt;When we design websites, we start with a user problem and translate that into a set of screens and flows.&lt;/p&gt;

&lt;p&gt;Next, we translate these screens into front-end code. We look at the best way to split up the design into pages,
&lt;a href=&quot;http://maintainablecss.com/chapters/modules/&quot;&gt;modules&lt;/a&gt; and components.&lt;/p&gt;

&lt;p&gt;After this, we integrate data and logic into a template to be displayed to the user on-screen. The object that contains this data and logic is called a
&lt;em&gt;view-model&lt;/em&gt; — it’s a Model designed &lt;em&gt;for&lt;/em&gt; the View.&lt;/p&gt;

&lt;p&gt;You can’t design a view-model without first understanding the requirements of the View itself. And you can’t understand the requirements of the View without first understanding the visual and interaction design requirements et cetera.&lt;/p&gt;

&lt;p&gt;Sometimes, a view-model is poorly designed, neglected or designed from the
inside-out. This often means it exposes too much low-level logic — something
which makes a template unnecessarily difficult to work with. This is best
demonstrated with a simple example.&lt;/p&gt;

&lt;p&gt;Take a &lt;em&gt;Welcome Message&lt;/em&gt; module: it contains a piece of text and a link, and it renders differently under three scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user is anonymous.&lt;/li&gt;
  &lt;li&gt;The user is authenticated and has supplied their name.&lt;/li&gt;
  &lt;li&gt;The user is authenticated but hasn’t supplied their name.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/templates/anon.png&quot; alt=&quot;Anonymous user&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Anonymous user&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated with a name&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Authenticated with a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/templates/recognised-no-name.png&quot; alt=&quot;Authenticated without a name&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Authenticated without a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Consider the following template (built in
&lt;a href=&quot;http://paularmstrong.github.io/swig/&quot;&gt;Swig&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if isLoggedIn %}
    {% if firstName &amp;amp;&amp;amp; lastName %}
        &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
            &amp;lt;p&amp;gt;Hello {{firstName}} {{lastName}}&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;{{signOutLink.href}}&quot;&amp;gt;{{signOutLink.text}}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
    {% else %}
        &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
            &amp;lt;p&amp;gt;Welcome back&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;{{signOutLink.href}}&quot;&amp;gt;{{signOutLink.text}}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
    {% endif %}
{% else %}
    &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
        &amp;lt;p&amp;gt;Welcome&amp;lt;/p&amp;gt;
        &amp;lt;a href=&quot;{{signInLink.href}}&quot;&amp;gt;{{signInLink.text}}&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Forget for the moment that you might be able to factor out the nested
if-statement — and, that you could reuse the HTML by abstracting it into a
partial — this template is overly &lt;em&gt;complicated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It exposes low-level information that the template does not need to know in
order to do its job. It’s been designed from little pieces, from the inside-out.&lt;/p&gt;

&lt;p&gt;For example, there is nothing in the design that requires knowledge of the first name and last name separately (as they are styled the same) and there is no need to determine if the user is authenticated.&lt;/p&gt;

&lt;p&gt;Instead, consider the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=”welcomeMessage”&amp;gt;
    &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
    &amp;lt;a href=”{{link.href}}”&amp;gt;{{link.text}}&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The view-model has been designed from the outside-in; it contains just what the template needs in order to render itself. And because there is always a message and a link, there is no need for conditionality. This template is dumb-by-design, and leaves complex logic to reside somewhere more appropriate in the stack.&lt;/p&gt;

&lt;p&gt;In comparison to the original, this template is just four lines compared to 18 and consists mostly of HTML, making this template much easier to work with. As an added bonus, the logic that no-longer resides in the template can be unit-tested. For example, we can now test that the message is “Welcome &lt;name&gt;” when the user is authenticated.&lt;/name&gt;&lt;/p&gt;

&lt;p&gt;This gives a glimpse as to the impact a well-designed view-model can have on the maintainability of a template.&lt;/p&gt;

&lt;p&gt;With this in-mind let’s have a look at the common scenarios we need to design for when developing a template.&lt;/p&gt;

&lt;h2 id=&quot;when-a-module-has-dynamic-properties&quot;&gt;1. When a module has dynamic properties&lt;/h2&gt;

&lt;p&gt;When data or text is dynamic it will reside somewhere else in a system e.g. a database. In fact, even if it is &lt;em&gt;static&lt;/em&gt; it may still reside somewhere else for internationalisation or maintenance purposes.&lt;/p&gt;

&lt;p&gt;What’s important is that the template should not concern itself with where
this data comes from — it’s just information exposed via the view-model.&lt;/p&gt;

&lt;p&gt;Taking the design as follows:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated with a name&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Authenticated with a name&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The view-model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  message: &quot;Hello Adam Silver&quot;,
  link: { href: &quot;/sign-out&quot;, text: &quot;Sign out&quot; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=”welcomeMessage”&amp;gt;
  &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
  &amp;lt;a href=”{{link.href}}”&amp;gt;{{link.text}}&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The message consists of text that may ultimately be retrieved from resource
files and a database. Perhaps the link’s href property could come from a routes configuration object etc.&lt;/p&gt;

&lt;p&gt;Regardless, the template doesn’t care — it leaves this responsibility to other parts of the system. The view-model is lean and provides just enough information for the View to render itself.&lt;/p&gt;

&lt;h2 id=&quot;when-a-module-has-conditionality&quot;&gt;2. When a module has conditionality&lt;/h2&gt;

&lt;p&gt;Conditionally showing a portion of a View involves display-logic. The simplest of its type is based on a condition: if-this-show-that.&lt;/p&gt;

&lt;p&gt;The important thing to remember, is that a template shouldn’t have to know why something is shown or not. It should just know whether it should.&lt;/p&gt;

&lt;p&gt;We’ll modify the original requirements so that it  only* displays a welcome
message when the the user is authenticated and has supplied their name:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/templates/recognised-with-name.png&quot; alt=&quot;Authenticated and name is supplied&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Authenticated and name is supplied&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When the message should be shown, the view-model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  showMessage: true,
  message: &quot;Hello Adam Silver&quot;,
  link: { href: &#39;/sign-out&#39;, text: &#39;Sign out&#39; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the message is hidden the view-model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  showMessage: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if showMessage %}
  &amp;lt;div class=&quot;welcomeMessage&quot;&amp;gt;
    &amp;lt;p&amp;gt;Welcome&amp;lt;/p&amp;gt;
    &amp;lt;a href=&quot;{{signInLink.href}}&quot;&amp;gt;{{signInLink.text}}&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the explicit boolean property determines whether it’s shown. Don’t be
tempted to expose lower-level logic that the template uses to infer visibility.&lt;/p&gt;

&lt;h2 id=&quot;when-showing-a-collection-of-items&quot;&gt;3. When showing a collection of items&lt;/h2&gt;

&lt;p&gt;When showing a number of similar items you will need to loop over a collection or array. As an example, let’s display a list of restaurants by area.&lt;/p&gt;

&lt;p&gt;The view-model would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  restaurants: [{
      name: &quot;Pizza House&quot;,
      address: &quot;...&quot;
  }, ...]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the template would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;restaurants&quot;&amp;gt;
  {% for restaurant in restaurants %}
    &amp;lt;div class=”restaurant”&amp;gt;
      &amp;lt;h2&amp;gt;{{restaurant.name}}&amp;lt;/h2&amp;gt;
      &amp;lt;p&amp;gt;{{restaurant.address}}&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  {% endfor %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often with loops, you will only show the items if there are items in the
collection. You may be tempted to interrogate the size of the collection in the template as follows:&lt;/p&gt;

&lt;p&gt;Whilst this isn’t the end of the world, it can lead to maintenance problems.
Instead, continue to use the approach used in the previous example by explicitly checking a boolean property &lt;em&gt;before&lt;/em&gt; iterating over the loop:&lt;/p&gt;

&lt;p&gt;This way templates are consistent, and the logic behind the conditionality can evolve over time without having to change the template — perhaps the restaurants are only shown to authenticated users for example.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Ultimately, templates should be easy-to-read and consist mostly of HTML and just enough information in order to support the display-logic. They shouldn’t have to infer display-logic from other properties and they shouldn’t have to care where this data comes from.&lt;/p&gt;

&lt;p&gt;Architecting a system is difficult and sometimes that difficulty bleeds out into the template. This creates problems for the developers who maintain them (mostly front-end developers).&lt;/p&gt;

&lt;p&gt;This is why logic-less templates are popular. They attempt to enforce the
separation of concerns between back-end and front-end. You don’t need to use a logic-less template engine to reap the benefits. You can architect your view-models in much the same way regardless.&lt;/p&gt;

&lt;p&gt;Designing a view-model &lt;em&gt;for&lt;/em&gt; the View allows more logic to be unit-tested and drastically improves the maintainability of your templates.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Buttons shouldn't have a hand cursor</title>
			<link href="http://adamsilver.io/articles/buttons-shouldnt-have-a-hand-cursor/"/>
			<updated>2016-07-15T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/buttons-shouldnt-have-a-hand-cursor</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is this belief that the hand cursor means ‘clickable’, but this is incorrect and potentially problematic. My hope is that by the end of the article, you’ll never want to use the hand cursor for buttons ever again.&lt;/p&gt;

&lt;h2 id=&quot;the-hand-doesnt-mean-clickable&quot;&gt;The hand doesn’t mean clickable&lt;/h2&gt;

&lt;p&gt;It’s no accident that browsers don’t give buttons (and other elements) a hand cursor — it’s because they’re not meant to. Take a look at the following screenshot:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/buttons/chrome.jpeg&quot; alt=&quot;Chrome on Mac OS&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Chrome on Mac OS&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Almost every element is interactive and clickable — the menu, the tabs, the whitespace, the browser buttons, the bookmark bar and Google’s search box — but, none of them have a hand cursor.&lt;/p&gt;

&lt;p&gt;There are more interactive and clickable elements not shown above — select menus, sliders, checkboxes, radios, labels, images, empty space (e.g right click — view source) and text — again, none of them have a hand cursor.&lt;/p&gt;

&lt;p&gt;The same goes for any computer you’ve ever used. You can tap, drag, select, press, left click and right click on a plethora of different elements including buttons. However, buttons are not afforded by a hand cursor displaying on hover.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/buttons/license.jpeg&quot; alt=&quot;“License Agreement” is a link and uses the hand cursor. The buttons don’t.&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;“License Agreement” is a link and uses the hand cursor. The buttons don’t.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Affordance is provided by the way something looks regardless of the cursor. Remember, the cursor is only available when hovering with a pointing device such as a mouse.&lt;/p&gt;

&lt;p&gt;This is why, for example, &lt;a href=&quot;http://danieldelaney.net/checkboxes&quot;&gt;checkboxes are never round&lt;/a&gt; (and radios are never square). This is also why &lt;a href=&quot;http://adrianroselli.com/2016/06/on-link-underlines.html&quot;&gt;links are typically underlined&lt;/a&gt;. This is why links do, in fact, have a hand cursor.&lt;/p&gt;

&lt;h2 id=&quot;what-the-authorities-say&quot;&gt;What the authorities say&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dn742466%28v=vs.85%29.aspx&quot;&gt;Microsoft’s Design Guidelines&lt;/a&gt; talk about weak affordance:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Text and graphics links use a hand […] pointer […] because of their weak affordance. While links may have other visual clues to indicate that they are links (such as underlines and special placement), displaying the hand pointer on hover is the definitive indication of a link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To avoid confusion, it is imperative not to use the hand pointer for other purposes. For example, command buttons already have a strong affordance, so they don’t need a hand pointer. The hand pointer must mean “this target is a link” and nothing else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/Pointers.html&quot;&gt;Apple’s Human Interface Guidelines&lt;/a&gt; states that the hand cursor should be used when “the content is a URL link”. &lt;a href=&quot;https://www.w3.org/TR/CSS21/ui.html#propdef-cursor&quot;&gt;W3C User Interface Guidelines&lt;/a&gt; says the same thing again with “The cursor is a pointer that indicates a link”.&lt;/p&gt;

&lt;h2 id=&quot;the-hand-cursor-is-for-links&quot;&gt;The hand cursor is for links&lt;/h2&gt;

&lt;p&gt;The hand (and often underlined text) signifies a link. Links are not buttons. Links came along with the web. To help users understand that they’re different, they’re given the hand cursor. It serves as an extra clue. Here’s why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clicking a link opens a web page or resource.&lt;/li&gt;
  &lt;li&gt;(On desktop) I can right-click on a link and do many things (that I can’t do with a button). Open in new tab/window, save a link, copy address, add to reading list, bookmark it and more.&lt;/li&gt;
  &lt;li&gt;(On mobile devices) I can tap and hold on a link and get a similar context menu as per the previous point.&lt;/li&gt;
  &lt;li&gt;A link also tells me that I am just going somewhere else. I am not modifying any data or making changes in anyway (like a button is likely to do).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When a button has the hand cursor, it subtly suggests that the user is interacting with a link when they’re not. If you want to give visual feedback when on hover, you can do so with other style changes such as background colour. A well-designed button doesn’t need a hand cursor to help the user realise it does something.&lt;/p&gt;

&lt;p&gt;The hand cursor is reserved for links. This is because their behaviour is unique. Browsers and Operating Systems have done the work for you — because contrary to popular belief — browsers know best.&lt;/p&gt;

&lt;p&gt;Links have always been handled this way since the web came along — this is the convention of the web that you need not innovate on. You can rest easy knowing that browsers have your back. This leaves you and your team to solve real problems.&lt;/p&gt;

&lt;!--
http://ux.stackexchange.com/questions/3788/default-cursor-on-mouse-over-of-a-button-is-not-a-hand-pointer
--&gt;
</content>
		</entry>
	
		<entry>
			<title>Always use a label</title>
			<link href="http://adamsilver.io/articles/always-use-a-label/"/>
			<updated>2016-07-01T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/always-use-a-label</id>
			<content type="html">&lt;p&gt;&lt;em&gt;First sent to my &lt;a href=&quot;/signup&quot;&gt;private mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You might be tempted to remove labels from some form controls to create a minimal aesthetic and save space. But it’s a &lt;a href=&quot;http://uxmyths.com/post/115783813605/myth-34-simple-minimal&quot;&gt;UX myth&lt;/a&gt; that saving space and minimalist design equates to better experiences.&lt;/p&gt;

&lt;p&gt;Labels are essential because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;sighted&lt;/em&gt; users will be able to see the instructions;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;visually-impaired&lt;/em&gt; users will hear the instructions when using a screen reader; and&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;motor-impaired&lt;/em&gt; users will find it easier to select a field thanks to the larger hit area. This is because clicking a label will move focus to the control.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s take a look at two examples whereby designers frequently ditch the label.&lt;/p&gt;

&lt;h2 id=&quot;add-to-basket-form&quot;&gt;1. Add to basket form&lt;/h2&gt;

&lt;p&gt;When a form uses a select menu, designers sometimes rely on the first option in the list to denote meaning. Take a look at ASOS’s &lt;em&gt;add to basket&lt;/em&gt; form.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/labels/asos.jpeg&quot; alt=&quot;ASOS’ product form omits labels on drop downs&quot; width=&quot;100%&quot; style=&quot;max-width: 350px&quot; /&gt;
		&lt;figcaption&gt;The menus are mising labels&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;This is &lt;em&gt;okay&lt;/em&gt; for visual users when an option hasn’t been selected yet. But, if one has been selected, it’s hard to understand, as is the case with the colour menu shown above.&lt;/li&gt;
  &lt;li&gt;Motor-impaired users will find it harder to select the field due to the smaller hit area.&lt;/li&gt;
  &lt;li&gt;Screen reader users will struggle to understand what’s going on. The values will be announced as “Select size, Small, Medium, Large”—that is, they’re a mix of instructions and options to pick.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;search-form&quot;&gt;2. Search form&lt;/h2&gt;

&lt;p&gt;When a form has just one field—as would be the case with a search form—designers rely on placeholder text and the submit button to denote meaning. Take a look at &lt;a href=&quot;http://www.selfridges.com/&quot;&gt;Selfridges’&lt;/a&gt; search form.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/labels/selfridges.png&quot; alt=&quot;Selfridges’ search form omits the label&quot; width=&quot;100%&quot; style=&quot;max-width: 350px;&quot; /&gt;
		&lt;figcaption&gt;The search field is missing a label&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;notes-1&quot;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Visual users will be okay to begin with due to the placeholder. But &lt;a href=&quot;/articles/placeholders-minimal-does-not-mean-simple&quot;&gt; placeholders are problematic&lt;/a&gt; for many reasons. One example is that once the user starts typing the instruction disappears.&lt;/li&gt;
  &lt;li&gt;Motor-impaired users again will find it harder to select the field.&lt;/li&gt;
  &lt;li&gt;Screen reader users will find it difficult because the placeholder is not announced.&lt;/li&gt;
  &lt;li&gt;If a foreigner wants to translate the page using the browser’s translation routine, the placeholder is ignored which causes confusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Trying to declutter an interface to reduce noise is a noble goal. But labels aren’t noise. Removing labels to save space causes unnecessary usability problems.&lt;/p&gt;

&lt;p&gt;Accomodating a visual label might be a &lt;a href=&quot;/articles/the-design-challenge/&quot;&gt;design challenge&lt;/a&gt;, but we should embrace this challenge by prioritising their inclusion during the early stages of design. This ensures our forms are user-friendly.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Placeholders are problematic</title>
			<link href="http://adamsilver.io/articles/placeholders-are-problematic/"/>
			<updated>2016-06-16T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/placeholders-are-problematic</id>
			<content type="html">&lt;p&gt;Since placeholders came along, designers have adopted them as means of storing hints. Their appeal lies in their minimal aesthetic and the fact they save space.&lt;/p&gt;

&lt;p&gt;Some designers go one one step further, and replace labels with placeholders. Either way, the placeholder is an Inclusive Design anti-pattern which causes problems for users. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;its-easy-to-forget&quot;&gt;1. It’s easy to forget&lt;/h2&gt;

&lt;p&gt;The placeholder disappears when the user types. Once it’s gone it’s hard to remember.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/forget.png&quot; alt=&quot;Placeholder disappears when typing&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Placeholder text disappears as you type.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;lack-of-browser-support&quot;&gt;2. Lack of browser support&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://caniuse.com/#feat=input-placeholder&quot;&gt;Not all browsers support the placeholder&lt;/a&gt;. In which case, the user will suffer a broken experience.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/support.png&quot; alt=&quot;Broken for browsers lacking support&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Broken experience for browsers lacking support.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;populated-values-lack-clarity&quot;&gt;3. Populated values lack clarity&lt;/h2&gt;

&lt;p&gt;It’s obvious that a missing label is fatal. But if the hint is missing, a user will find it harder to provide an answer.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/populated.png&quot; alt=&quot;Populated field are hard to use&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Populated fields are hard to use.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reviewing-entries-before-submission-is-difficult&quot;&gt;4. Reviewing entries before submission is difficult&lt;/h2&gt;

&lt;p&gt;A user will need to memorise all the hints in order to check their form entries before submission. This is because as each form field is filled out, the hint disappears. The more fields there are the bigger the problem.&lt;/p&gt;

&lt;h2 id=&quot;errors-are-hard-to-fix&quot;&gt;5. Errors are hard to fix&lt;/h2&gt;

&lt;p&gt;Errors are hard to fix because the message and the value lack context. And the hint may contain information to help fix the error.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/2.png&quot; alt=&quot;Error message with a label for context.&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Different hint patterns when there are errors.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You could write a verbose error message. For example &lt;em&gt;“Your password must be at least 8 characters”&lt;/em&gt; instead of &lt;em&gt;“Must be at least 8 characters”&lt;/em&gt;. But this doesn’t entirely solve the problem.&lt;/p&gt;

&lt;h2 id=&quot;some-browsers-hide-the-placeholder-on-focus&quot;&gt;6. Some browsers hide the placeholder on focus&lt;/h2&gt;

&lt;p&gt;Some browsers hide the placeholder when the user focuses, instead of when they start typing. This means the user has to read ahead of the current field to read the hint.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/disappearing.png&quot; alt=&quot;Placeholders disappear on focus&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Placeholders disappear on focus.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;placeholder-text-may-be-mistaken-for-a-value&quot;&gt;7. Placeholder text may be mistaken for a value&lt;/h2&gt;

&lt;p&gt;People that don’t notice the subtle difference in contrast will skip the field mistaking it for a value. One test showed that &lt;a href=&quot;http://www.uxmatters.com/mt/archives/2010/03/dont-put-hints-inside-text-boxes-in-web-forms.php&quot;&gt;99% of users thought they didn’t need to enter a value&lt;/a&gt;. When the user submits the form they will be frustratingly shown an error.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/empty.png&quot; alt=&quot;Placeholders mistaken for real values&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Placeholders might be mistaken for real values.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;they-have-insufficient-contrast&quot;&gt;8. They have insufficient contrast&lt;/h2&gt;

&lt;p&gt;Placeholder text has a lower contrast to help users realise it’s not a value. Some people will struggle to read the text due to the lack of contrast.&lt;/p&gt;

&lt;h2 id=&quot;screen-readers-may-not-announce-them&quot;&gt;9. Screen readers may not announce them&lt;/h2&gt;

&lt;p&gt;Placeholders may not be read out by screen readers which is the visual
equivalent of a blank box.&lt;/p&gt;

&lt;h2 id=&quot;the-hit-area-is-reduced&quot;&gt;10. The hit area is reduced&lt;/h2&gt;

&lt;p&gt;Clicking a label moves the focus to the field. This is helpful to everyone but even moreso to people with fine motor skill impairments. Fields with the label and hint outside, increases the size of the hit area.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/10.png&quot; alt=&quot;No label means a smaller hit area.&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;No label means a smaller hit area..&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;placeholder-text-can-be-cut-off&quot;&gt;11. Placeholder text can be cut off&lt;/h2&gt;

&lt;p&gt;If the placeholder is longer than the size of the field, it will be cut off. This means you’re unnecessarily constrained to what information you can put inside it.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/placeholders/11.png&quot; alt=&quot;Placeholder copy gets cropped.&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Long text gets cropped.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;some-browsers-dont-translate-them&quot;&gt;12. Some browsers don’t translate them&lt;/h2&gt;

&lt;p&gt;For example, when Chrome translates a web page, it will fail to translate the text inside a placeholder.&lt;/p&gt;

&lt;h2 id=&quot;browser-auto-complete-exacerbates-the-problem&quot;&gt;13. Browser auto-complete exacerbates the problem&lt;/h2&gt;

&lt;p&gt;The browser’s auto-completion routine populates the fields automatically. This means the placeholder text disappears making it difficult for the user to check the values against what the fields intended.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Some people ask me if it’s okay to use a placeholder in addition to a label. I say that if the hint is valuable to the user, we should make it easy-to-read and readily accessible. The placeholder doesn’t meet these requirements.&lt;/p&gt;

&lt;p&gt;Others say that the placeholder is just an enhancement and not essential to the user. To this I say that if the hint isn’t essential then don’t include it. Content is not an enhancement.&lt;/p&gt;

&lt;p&gt;It’s clear—at least in the case of placeholders—that &lt;a href=&quot;http://uxmyths.com/post/115783813605/myth-34-simple-minimal&quot;&gt;minimal does not mean simple&lt;/a&gt;. Avoid placeholders. &lt;a href=&quot;/articles/always-use-a-label/&quot;&gt;Always use a label&lt;/a&gt;. And, if you do need a hint, place it outside the field.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>How we cut our MVP in half to launch KIDLY</title>
			<link href="http://adamsilver.io/articles/how-we-cut-our-mvp-in-half-to-launch-kidly/"/>
			<updated>2016-05-20T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/how-we-cut-our-mvp-in-half-to-launch-kidly</id>
			<content type="html">&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/kidly.jpg&quot; alt=&quot;The team&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;The team&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For the last 9 months, we at KIDLY have been designing and building a brand new online shop with the following tagline…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The best stuff for baby, all in one place”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last week we launched silently to our many early adopters who we call VIPs. To do this we had to cut our original MVP in HALF!&lt;/p&gt;

&lt;p&gt;This has been a challenging process because our Chief James, has a hugely ambitious and wonderful vision for KIDLY — a vision that has his team just as excited about the future as he is.&lt;/p&gt;

&lt;p&gt;If you consider that the ‘Original’ MVP (defined over 6 months ago) was already
a small slice of the vision, this meant that what was a 50% reduction to our MVP
to &lt;em&gt;us&lt;/em&gt;, probably felt more like a 75% reduction for &lt;em&gt;James&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To give you some context as to what this all means in real terms, I need to tell
you about our ‘Original’ MVP.&lt;/p&gt;

&lt;h2 id=&quot;our-original-mvp&quot;&gt;Our ‘Original’ MVP&lt;/h2&gt;

&lt;p&gt;Besides our teaser site (just to get pre-launch sign ups), the Original MVP,
defined around September 2015, consisted of designing and building a brand new
responsive mobile-first bespoke e-commerce platform with the following feature
set:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browse:&lt;/strong&gt; Homepage, category page, sub category page, brand page, brand
directory and product pages. Basket page. Each product list page had filters and
pagination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial:&lt;/strong&gt; Article list page, article page, articles by tag whereby a tag
related to a browse sections of the site and article pages would link to
featured products i.e. editorial is weaved into product and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Account:&lt;/strong&gt; Managing your account, profile, child data, referral schemes, sign
in, sign up, forgot password flows, returns flow etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checkout:&lt;/strong&gt; Guest and logged in user flows. Capture+ integration for typing
addresses. More than one method for delivery. PayPal and standard card
integration (using Stripe) and the other usual bits you find in checkout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static pages:&lt;/strong&gt; About, privacy policy, 404, 500, help and many more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credit mechanism:&lt;/strong&gt; This included users getting credit for completing their
profile, referring friends — then redeeming against their order automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent test:&lt;/strong&gt; Every single product was sent to a real parent for testing
before being added to the site on every product page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And much more:&lt;/strong&gt; things such as Zendesk and Intercom integration. Launching
our own brand of KIDLY products. Custom photography for every single product. To
start with 1000 products across 18 categories etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin:&lt;/strong&gt; All of the above was to be supported by a rich web application — this
included the management of products, categories, brands, articles as well as
integration with the warehouse and 2 courier companies.&lt;/p&gt;

&lt;h2 id=&quot;the-original-deadline&quot;&gt;The original deadline&lt;/h2&gt;

&lt;p&gt;Our original launch date for this was &lt;em&gt;pencilled&lt;/em&gt; in for &lt;strong&gt;February 2016&lt;/strong&gt; and we began working on the MVP in &lt;strong&gt;September 2015&lt;/strong&gt; with a &lt;strong&gt;tiny team of just 6 people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We didn’t manage to launch in Feb — we didn’t really get close to that. It’s worth noting that this was an &lt;em&gt;internal&lt;/em&gt; soft target to aim for — &lt;em&gt;not&lt;/em&gt; hitting it was never going to be the “end of the world” etc.&lt;/p&gt;

&lt;p&gt;Regardless, I still want to discuss why I think we ‘failed’ because that’s where all of this gets interesting.&lt;/p&gt;

&lt;h2 id=&quot;why-we-failed&quot;&gt;Why we ‘failed’?&lt;/h2&gt;

&lt;p&gt;I put &lt;em&gt;failed&lt;/em&gt; in quotation marks because it wasn’t a critical failure as such. This is more of a “why we didn’t get as much done as we might have” type thing. Here’s why I think that was:&lt;/p&gt;

&lt;h3 id=&quot;the-original-mvp-was-too-big-in-the-first-place&quot;&gt;1. The Original MVP was too big in the first place&lt;/h3&gt;

&lt;p&gt;Self explanatory really. When something is too big, it’s just too big. The
problem wasn’t that it was too big, it was that it took us a while to come to
terms with that — something I will explain shortly.&lt;/p&gt;

&lt;h3 id=&quot;we-had-a-fixed-deadline-and-a-fixed-scope&quot;&gt;2. We had a fixed deadline &lt;em&gt;and&lt;/em&gt; a fixed scope.&lt;/h3&gt;

&lt;p&gt;You can have either a fixed deadline or a fixed scope but not both — we inadvertently set ourselves up for failure.&lt;/p&gt;

&lt;h3 id=&quot;we-zoomed-in-to-details-too-early&quot;&gt;3. We zoomed in to details too early&lt;/h3&gt;

&lt;p&gt;What I mean by this is that every single piece of copy, every pixel and every
micro interaction was scrutinised over and over. Ultimately it
was near-death by a thousand cuts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Nobody cares about your product as much as you do”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of designing overall flows, screens and
&lt;a href=&quot;https://medium.com/swlh/the-nine-states-of-design-5bfe9b3d6d85#.9wrs8ne3o&quot;&gt;states&lt;/a&gt;,
we were spending up to several weeks zooming in on these micro details. We were
shooting for perfect when there is no perfect.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, these details are important, details that our customers appreciated in the end, but when everything is a
priority, &lt;em&gt;nothing&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;Also, when you have a huge array of features, a small team and are prone to
zooming in like this, it results in failure. But fortunately failure often leads
to success…&lt;/p&gt;

&lt;h2 id=&quot;what-happened-next&quot;&gt;What happened next?&lt;/h2&gt;

&lt;p&gt;April was fast approaching and by this time we were getting itchy. We had cut a
few minor items off the backlog but not enough to stop our &lt;em&gt;t-shirt-sized&lt;/em&gt;
estimate indicating a July launch date — something we wouldn’t accept.&lt;/p&gt;

&lt;p&gt;You have to remember that we had thousands of VIPs, some of which vocalised
their eagerness for us to launch, so they could spend their credit with us. It
was difficult disappointing our VIPs — we even had to send them elsewhere to buy
the products until our shop was ready.&lt;/p&gt;

&lt;p&gt;We had to do something…&lt;/p&gt;

&lt;h2 id=&quot;the-best-thing-to-happen-to-us&quot;&gt;The best thing to happen to us&lt;/h2&gt;

&lt;p&gt;We could all feel some pain from many angles. We had been working on this for months and not seeing the fruits of our labour. We had our customers getting irritated because they wanted to buy stuff from us and of course we weren’t making any money. We also didn’t know if our product was any good as nobody had seen it (though we had a good idea it would be).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have to get this thing live in 4 weeks” — James&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;James called us into a meeting and basically said “We have to get this thing
live in 4 weeks — I don’t care how we do it, it’s important for KIDLY, it’s
important for our customers and it’s important for morale!”.&lt;/p&gt;

&lt;p&gt;Having so much to do and so little time to do it, forced us
into positive action—to &lt;em&gt;prioritise&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We knew this meeting was coming so we had come prepared to provide
suggestions to this problem.&lt;/p&gt;

&lt;p&gt;When James said &lt;em&gt;“Is everyone happy that we can do this in 4 weeks?”&lt;/em&gt; everyone stayed silent.&lt;/p&gt;

&lt;p&gt;Then James turned to me and said &lt;em&gt;“Adam?”&lt;/em&gt; — I will always wonder why he asked &lt;em&gt;me :).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I said &lt;em&gt;“the only way on earth that we can deliver this thing in 4 weeks is to launch behind closed doors i.e. behind a login”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I didn’t think this would go down too well because of reasons already explained and also the fact that this would introduce friction for our users — the sort of friction that would normally have us striving so hard to eliminate from the experience.&lt;/p&gt;

&lt;p&gt;But it &lt;em&gt;did!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And then, the team kept firing even more suggestions at each other. We were all on-board, all excited — I mean we were excited anyway, but now we had this plan and this deadline just around the corner, and we thought we would either do it, or get close to doing it. Each reduction complimented each other.&lt;/p&gt;

&lt;p&gt;We already “knew” that KIDLY was going to be great when we launched — this way it was just going to happen a whole lot quicker. We had now inadvertently set ourselves up for success.&lt;/p&gt;

&lt;h2 id=&quot;but-why-did-we-launch-behind-a-login&quot;&gt;But, why did we launch behind a login?&lt;/h2&gt;

&lt;p&gt;Our VIPs already had access to their account page. They could already login, complete their profile, and refer friends — it’s just they couldn’t shop yet.&lt;/p&gt;

&lt;p&gt;Ensuring that users had to be logged in to view the shop had 3 huge benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It drastically reduced the complexity of the site as we only needed to cater for
logged in states. This meant that we could remove guest checkout from the
backlog. We didn’t have to worry about SEO and social sharing, and of course it
reduced the amount of development.&lt;/li&gt;
  &lt;li&gt;We could launch just to our VIPs which would also bring an aire of exclusivity
to the experience — they are VIPs after all.&lt;/li&gt;
  &lt;li&gt;Launching to VIPs only meant that we reduced the risk and enabled us to receive
vital feedback before opening up to public.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-else-did-we-suggest&quot;&gt;What else did we suggest?&lt;/h2&gt;

&lt;p&gt;Here’s the other big things we suggested:&lt;/p&gt;

&lt;h3 id=&quot;we-halved-the-amount-of-products&quot;&gt;1. We halved the amount of products&lt;/h3&gt;

&lt;p&gt;Instead of launching with 1000 products we decided it would be okay to launch
with less than half of that. This itself had two far reaching benefits:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, we halved the effort required to produce and upload content.This includes copywriting, photography, uploading product information and of course testing each and every product. And of course ensuring that we had enough stock for each of those products.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, we could significantly reduce the complexity of the site. For example we no longer needed sub categories — there was going to be less than 40 products on each category page, so why offer people the ability to drill down? In a similar vein, we no longer needed filtering or pagination.&lt;/p&gt;

&lt;h3 id=&quot;we-removed-brand-pages&quot;&gt;2. We removed brand pages&lt;/h3&gt;

&lt;p&gt;Brand pages are a nice-to-have feature but we still took the option to cut these out. In doing so we removed “super” brand, “simple” brand and brand directory pages. This also meant that our navigation was simplified — customers could only shop by category. Easy.&lt;/p&gt;

&lt;h3 id=&quot;no-paypal&quot;&gt;3. No PayPal&lt;/h3&gt;

&lt;p&gt;This was a big decision for us as we know how important PayPal is to increasing conversion in checkout. We already had to integrate Stripe and just didn’t have the capacity for this. It’s high up on the post launch backlog though.&lt;/p&gt;

&lt;h2 id=&quot;we-succeeded&quot;&gt;We succeeded!&lt;/h2&gt;

&lt;p&gt;We didn’t quite manage to launch in the 4 weeks we were given, but we got very close indeed.&lt;/p&gt;

&lt;p&gt;In the end we launched in 5 weeks, and even that was down to a third party courier not being able to test returns labels in time for us to start shipping.&lt;/p&gt;

&lt;p&gt;It must be said that James and the team achieved what felt impossible to achieve. It has been very enjoyable working with the team, especially in the last 4 weeks as I have witnessed the progression of this success.&lt;/p&gt;

&lt;h2 id=&quot;what-our-customers-said&quot;&gt;What our customers said&lt;/h2&gt;

&lt;p&gt;We have had some wonderful feedback from our many VIPs. Here is just some of that feedback:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Love the site, really easy to navigate and ordering was a doddle, my face normally sinks if PayPal isn’t involved but checkout was so quick.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“So so pleased with the speed of delivery, honestly didn’t expect them to arrive so quickly. So far so good on the website, I love the layout, the clean lines, and ease of use.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Awesome imagery, love the list of products with the big photos and the Ideas section. And many products look gorgeous.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-about-the-results&quot;&gt;What about the results?&lt;/h2&gt;

&lt;p&gt;We have had a good sales rates (can’t disclose numbers) and a phenomenally successful conversion from basket at 26%.&lt;/p&gt;

&lt;p&gt;This is still early days and these stats are based on low numbers overall, but early signs are great. Especially considering that we haven’t even told all of our VIPs that we’re open yet — we staggered the announcement, again to reduce risk.&lt;/p&gt;

&lt;h2 id=&quot;what-did-we-learn&quot;&gt;What did we learn?&lt;/h2&gt;

&lt;p&gt;Here are all the things we learnt from this experience:&lt;/p&gt;

&lt;h3 id=&quot;everyones-idea-of-mvp-is-different&quot;&gt;1. Everyones idea of MVP is different&lt;/h3&gt;

&lt;p&gt;James’ idea of MVP and my idea of MVP are quite different. We have often disagreed on macro and micro aspects of the product but that’s to be expected not only because we are different people but because we are bound to see KIDLY from different perspectives.&lt;/p&gt;

&lt;p&gt;James is running an entire company and bringing every piece of the puzzle together. He has to consider the overall vision at all times during every small and large decision.&lt;/p&gt;

&lt;p&gt;Couple that with the aim to provide a level of service to rival Amazon and you start to understand reducing various parts of an MVP might be difficult at the best of times.&lt;/p&gt;

&lt;p&gt;For me it was more about getting this thing live and in front of our customers as soon as possible because the real feedback on product design starts then. So I was more trigger happy to kill off features.&lt;/p&gt;

&lt;p&gt;But ultimately, what is right for KIDLY is somewhere in between. There is no “right” or “wrong” MVP — you just have to get your team on the same page and as soon as possible.&lt;/p&gt;

&lt;h3 id=&quot;good-enough-is-good-enough&quot;&gt;2. “Good enough” is good enough&lt;/h3&gt;

&lt;p&gt;During the first few months at KIDLY James gave us &lt;em&gt;Rework&lt;/em&gt; by Jason Fried, to read. In it there is a chapter explaining the concept of “Good Enough”.&lt;/p&gt;

&lt;p&gt;If you can accept early on that perfect doesn’t exist, you can get the macro things done earlier. This in turn is good for momentum and morale because as a team you feel like your moving forwards at a positive rate. Without momentum you can lose motivation.&lt;/p&gt;

&lt;p&gt;If you avoid details early on then you get to have a rough copy of your product holistically. This is beneficial because a product is normally experienced as a whole not in piecemeal.&lt;/p&gt;

&lt;p&gt;If it feels wrong holistically you can rectify without destroying the detail. If it feels right you can go ahead and dive into the detail. Win Win.&lt;/p&gt;

&lt;h3 id=&quot;bite-off-half-of-what-you-think-you-can-chew&quot;&gt;3. Bite off half of what you think you can chew&lt;/h3&gt;

&lt;p&gt;Whatever it is you think you are capable of achieving, stop and remove 50% of it right there and then. Get rid of the other half until the first half is complete. Obviously “half” is a horizontal slice as opposed to a vertical slice.&lt;/p&gt;

&lt;h3 id=&quot;give-your-teams-problems-to-solve-not-solutions-to-adopt&quot;&gt;4. Give your teams problems to solve, not solutions to adopt.&lt;/h3&gt;

&lt;p&gt;When it came to crunch time, James gave us a difficult problem and empowered us to make it work. There is nothing like challenge, accountability and trust to unite a team, in order to set yourself up for success. James showed great leadership which lead us to success quickly.&lt;/p&gt;

&lt;h3 id=&quot;its-either-a-fixed-deadline-or-a-fixed-scope-not-both&quot;&gt;5. It’s either a fixed deadline or a fixed scope, not both!&lt;/h3&gt;

&lt;p&gt;There is nothing more to say here.&lt;/p&gt;

&lt;h3 id=&quot;pressure-forces-you-to-think-creatively&quot;&gt;6. Pressure forces you to think creatively&lt;/h3&gt;

&lt;p&gt;Pressure can ignite an individual or a team to think differently, and accept the (what might have previously been deemed) unacceptable.&lt;/p&gt;

&lt;p&gt;I never thought we could launch in 4 weeks and I didn’t think we would go for such a tiny version of our Original MVP. But we managed both of those things.&lt;/p&gt;

&lt;h3 id=&quot;a-lack-of-features-can-be-a-very-good-thing&quot;&gt;7. A lack of features can be a very good thing&lt;/h3&gt;

&lt;p&gt;If you go by just the feedback, sales and conversion so far, it would be easy to think that the product is great as it is — that’s because it &lt;em&gt;is&lt;/em&gt; great as it is — even with half an MVP. It just goes to show that &lt;em&gt;less&lt;/em&gt; is often &lt;em&gt;better&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-next-for-kidly&quot;&gt;What’s next for KIDLY?&lt;/h2&gt;

&lt;p&gt;To be expected after launch, we have been fixing bugs and improving UX but now we’re starting the next big phase of KIDLY — opening up the shop to the public.&lt;/p&gt;

&lt;p&gt;We will be taking everything we have learnt with us, continuing to make parents lives easier, by bringing you the best stuff for your baby all in one place.&lt;/p&gt;

&lt;p&gt;To quote James again, this is just the beginning — &lt;a href=&quot;http://kidly.co.uk/&quot;&gt;watch this
space&lt;/a&gt;.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Hello UX designer</title>
			<link href="http://adamsilver.io/articles/hello-ux-designer/"/>
			<updated>2016-05-17T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/hello-ux-designer</id>
			<content type="html">&lt;p&gt;I always get a bit frustrated if an individual thinks they’re solely responsible for UX because that’s not true. Design is always better when people work together.&lt;/p&gt;

&lt;p&gt;The world wouldn’t be what it is today if it wasn’t for humans working together to achieve what would previously seem impossible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“UX means User Experience which, in turn, means everything a human experiences when interacting with your product or service. Everything.”
&lt;br /&gt;—&lt;cite&gt;Benedikt Lehnert&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you’re at work, look to your left and right—they’re responsible for UX and guess what, so are you.&lt;/p&gt;

&lt;p&gt;If you communicate to your customers over social media or work in customer support…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you ensure the application architecture is designed for speed, reliability and iteration, by considering things like CQRS, Micro services and caching…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you write copy for websites and emails or strategise around when to send communication…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you translate designs into responsive and progressively enhanced front-end code and advise on what doesn’t work well cross-browser…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you conduct user research…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you test software for quality…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you facilitate the iterative process for regular improvement…&lt;strong&gt;you’re responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And if you design UIs…&lt;strong&gt;yes you too, are responsible for UX.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;

&lt;p&gt;What good is a beautiful UI if it takes 10 seconds to load or contains crappy content?&lt;/p&gt;

&lt;p&gt;What good is it if you have a great content, but a terrible customer service?&lt;/p&gt;

&lt;p&gt;What good is it if everything is great except for the fact the website is unstable and goes down frequently?&lt;/p&gt;

&lt;p&gt;Not much.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Everything I know about speaking at conferences</title>
			<link href="http://adamsilver.io/articles/everything-i-know-about-speaking-at-conferences/"/>
			<updated>2016-04-01T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/everything-i-know-about-speaking-at-conferences</id>
			<content type="html">&lt;p&gt;I spent nearly 2 months preparing to speak at &lt;a href=&quot;http://enhanceconf.com/&quot;&gt;Enhanceconf
2016&lt;/a&gt; in front of 180 people at the RSA in London.&lt;/p&gt;

&lt;p&gt;I never thought I would speak publicly for many reasons — not least of all
because it’s fucking scary and I have (had?) no idea what I am doing. But for one reason or other I decided this is the time for me to jump right out of my comfort zone.&lt;/p&gt;

&lt;p&gt;I am the sort of person who goes hunting for the very best advice about doing something, before I do it myself. So that’s what I did, I hunted down the very best advice from different parts of the world, combined it with my brain and this is what I learnt during the entire process…&lt;/p&gt;

&lt;h2 id=&quot;before-accepting-the-gig&quot;&gt;Before accepting the gig&lt;/h2&gt;

&lt;h3 id=&quot;choose-the-right-timing-and-gig&quot;&gt;1. Choose the right timing and gig&lt;/h3&gt;

&lt;p&gt;There is never a perfect time to do it. You will always be fearful. I was
fearful that I would make mistakes, that people wouldn’t find value or that I can’t inspire others, or that the audience weren’t right for my talk. But all in all, my values and the conference’s values aligned and I decided to go for it.&lt;/p&gt;

&lt;h3 id=&quot;choose-the-right-theme&quot;&gt;2. Choose the right theme&lt;/h3&gt;

&lt;p&gt;There is no point in giving a talk on something that a) you don’t know about and b) you’re not absolutely passionate about sharing with others. You need to show enthusiasm for your topic, otherwise don’t bother.&lt;/p&gt;

&lt;h3 id=&quot;choose-the-right-duration&quot;&gt;3. Choose the right duration&lt;/h3&gt;

&lt;p&gt;All Ted talks are somewhere between 15 and 20 mins. The is because people can’t concentrate for longer than that and if you can’t explain your message with inspiration in that time, then you’re buggered anyway.&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-have-enough-time-to-prep&quot;&gt;4. Make sure you have enough time to prep&lt;/h3&gt;

&lt;p&gt;I gave myself a clean schedule for 2 months as I prefer to be over-prepared.
Otherwise I would be more nervous.&lt;/p&gt;

&lt;h3 id=&quot;choose-the-right-remuneration&quot;&gt;5. Choose the right remuneration&lt;/h3&gt;

&lt;p&gt;I never negotiated but I probably should have. ‘They’ say that you should
negotiate for about 5 times the ticket price. In reality it’s not about the
money, it’s about the experience and ‘spreading good ideas’ but bare this in
mind.&lt;/p&gt;

&lt;h2 id=&quot;after-accepting-the-the-talk&quot;&gt;After accepting the the talk&lt;/h2&gt;

&lt;h3 id=&quot;purchase-a-kensington-clicker&quot;&gt;1. Purchase a Kensington clicker&lt;/h3&gt;

&lt;p&gt;You want to be free to deliver the talk, not shackled to your computer fumbling around the trackpad, mouse or keyboard to progress the slides. This one is good value, well recommended and very good.&lt;/p&gt;

&lt;h3 id=&quot;design-your-slides-last&quot;&gt;2. Design your slides last&lt;/h3&gt;

&lt;p&gt;Whatever you do, don’t design your slides first. Slides are props. Nail down
your script first, then add slides as an enhancement to your talk if necessary. You might find you don’t even need slides.&lt;/p&gt;

&lt;h3 id=&quot;write-down-your-ideas&quot;&gt;3. Write down your ideas&lt;/h3&gt;

&lt;p&gt;Always write down what pops into your head or what you come across in life.
Ideas, links, photos, thoughts, videos, quotes, books, articles, tweets,
peoples, work, case studies, experiences, anything. Don’t underestimate your
ability to forget.&lt;/p&gt;

&lt;h3 id=&quot;design-your-talk&quot;&gt;4. Design your talk&lt;/h3&gt;

&lt;p&gt;You need to work out what the message is and how you’re going to present it.
Make sure the message is close to your heart. My talk was about “embracing
simplicity” which touches so many parts of my life from different angles. From minimalism, to essentialism, to web design and coding websites, I strive for simplicity.&lt;/p&gt;

&lt;h3 id=&quot;start-fleshing-out-your-talk&quot;&gt;5. Start fleshing out your talk&lt;/h3&gt;

&lt;p&gt;You need to find some quiet time to start fleshing out your talk. Whatever is easier, just start writing and sharing stories that back up your points.&lt;/p&gt;

&lt;h3 id=&quot;tell-stories&quot;&gt;6. Tell stories&lt;/h3&gt;

&lt;p&gt;Tell personal or other peoples stories that convey what you’re saying. Make sure the stories come first, make sure they last at least 1/3 of the entire presentation. Reason being is you need to connect emotionally to your audience. Stories are the way to do this.&lt;/p&gt;

&lt;h3 id=&quot;start-to-practice-the-script&quot;&gt;7. Start to practice the script&lt;/h3&gt;

&lt;p&gt;The script won’t be perfect, nor will your delivery but start practicing it,
thinking about it and delivering to someone you know. Over and over and over. Then keep refining, adding, reducing. You want to get to the point where you’re thinking about delivery — not what it is that you have to say. I practiced at least once a day to anyone that will listen. Thanks wife.&lt;/p&gt;

&lt;h3 id=&quot;deliver-something-new&quot;&gt;8. Deliver something new&lt;/h3&gt;

&lt;p&gt;It doesn’t have to be completely new, but if you have a unique spin on
something, share it. It will help your audience engage with you.&lt;/p&gt;

&lt;h3 id=&quot;deliver-stats-and-logic-later-in-the-talk&quot;&gt;9. Deliver stats and logic later in the talk&lt;/h3&gt;

&lt;p&gt;After connecting emotionally via stories, add logic and stats to back it up.&lt;/p&gt;

&lt;h3 id=&quot;deliver-a-jaw-dropping-moment&quot;&gt;10. Deliver a jaw dropping moment&lt;/h3&gt;

&lt;p&gt;Deliver a jaw dropping moment if you can. Something the audience will remember. This could be anything, it could be a stat, it could be you playing an instrument, it could be anything, as long as it relates to your talk.&lt;/p&gt;

&lt;h3 id=&quot;consider-not-having-slides&quot;&gt;11. Consider not having slides&lt;/h3&gt;

&lt;p&gt;Consider giving a talk without slides. I ended up using slides because I thought they were appropriate and added value during parts of my talk. Also, whilst I memorised the script, the slides were semi-prompting and that made me feel more secure.&lt;/p&gt;

&lt;p&gt;If your content doesn’t require it, then ditch the slides and free yourself from technology and having to sync your words up to your slides.&lt;/p&gt;

&lt;h3 id=&quot;dont-put-lots-of-text-on-a-slide&quot;&gt;12. Don’t put lots of text on a slide&lt;/h3&gt;

&lt;p&gt;Whatever you do, don’t put lots of text on a slide. Especially if you’re not
reading it out word-for-word. Nobody can listen to you talk and read text on a slide.&lt;/p&gt;

&lt;h3 id=&quot;be-you&quot;&gt;13. Be you&lt;/h3&gt;

&lt;p&gt;Don’t try and be someone else (everyone else is taken anyway). Don’t change the way you speak just for the talk. Go up, have a chat with the audience, be honest and you can’t go wrong.&lt;/p&gt;

&lt;h3 id=&quot;watch-other-amazing-talks&quot;&gt;14. Watch other amazing talks&lt;/h3&gt;

&lt;p&gt;I watched other great talks in my field. I also watched great Ted talks. It all helps. Watch out for the details, why it works so well. And what bits didn’t work so well.&lt;/p&gt;

&lt;h2 id=&quot;on-the-day-of-your-talk&quot;&gt;On the day of your talk&lt;/h2&gt;

&lt;h3 id=&quot;arrive-early&quot;&gt;1. Arrive early&lt;/h3&gt;

&lt;p&gt;You don’t want to feel rushed. It’s stressful enough as it is, so plan your
routes and get there comfortably.&lt;/p&gt;

&lt;h3 id=&quot;find-the-bathroom&quot;&gt;2. Find the bathroom&lt;/h3&gt;

&lt;p&gt;You will need this. Having hardly drunk any water, I went for a wee at least 5 times until I was on in the early afternoon.&lt;/p&gt;

&lt;h3 id=&quot;travel-light&quot;&gt;3. Travel light&lt;/h3&gt;

&lt;p&gt;Bring your essentials, I brought too much stuff “just in case”, but I should
have only brought my clicker (and spare batteries), my laptop and my charger.&lt;/p&gt;

&lt;h3 id=&quot;familiarise-yourself-with-the-stage&quot;&gt;4. Familiarise yourself with the stage&lt;/h3&gt;

&lt;p&gt;I was on in the afternoon, but having arrived early before the conference
started in the morning, I found the organiser and got my bearings. It was very different to the photos online so was well worth doing this.&lt;/p&gt;

&lt;h3 id=&quot;bring-someone-for-support&quot;&gt;5. Bring someone for support&lt;/h3&gt;

&lt;p&gt;I did and it helped a lot.&lt;/p&gt;

&lt;h3 id=&quot;speak-to-other-people-and-speakers&quot;&gt;6. Speak to other people and speakers&lt;/h3&gt;

&lt;p&gt;It’s great to speak to others, it calms you down. Most people are nervous (like you) even if they’ve given lots of talks before. And part of the day is about getting to know others.&lt;/p&gt;

&lt;h3 id=&quot;dont-eat-too-much-or-too-little&quot;&gt;7. Don’t eat too much or too little&lt;/h3&gt;

&lt;p&gt;I didn’t eat enough, I felt too nervous to eat and I ended up with a headache, but adrenaline carried me through. Work out your timings based on what time your talk is. Give yourself at &lt;em&gt;least&lt;/em&gt; 1 hour before your talk to digest.&lt;/p&gt;

&lt;h3 id=&quot;sound-checks&quot;&gt;8. Sound checks&lt;/h3&gt;

&lt;p&gt;Get your shit in order early. My slot was in the afternoon so while people were at lunch I was on the stage making sure my computer hooked up to the projector and that my mic worked.&lt;/p&gt;

&lt;h3 id=&quot;drink-water-10-mins-before&quot;&gt;9. Drink water 10 mins before&lt;/h3&gt;

&lt;p&gt;Drink it 10 mins before your talk. The reason why it’s 10 mins is so you don’t need to go to the toilet when your talk begins. Even if you do this, you might still be dry from nerves when your talk starts.&lt;/p&gt;

&lt;h3 id=&quot;bring-water-on-stage&quot;&gt;10. Bring water on stage&lt;/h3&gt;

&lt;p&gt;I decided not to do this — big mistake for me. A couple of minutes into my talk, I had to jump of stage for 5 seconds to get water because my mouth went dry from the nerves. It was seconds, but felt like hours. It broke up my talk, and made me feel awkward. Silly!&lt;/p&gt;

&lt;h2 id=&quot;after-your-talk&quot;&gt;After your talk&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Thank the organiser if they are available.&lt;/li&gt;
  &lt;li&gt;Sit down, put your shit away and relax.&lt;/li&gt;
  &lt;li&gt;When people compliment you on your talk, smile and say ‘thanks’.&lt;/li&gt;
  &lt;li&gt;Grab a drink and a little snack.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;after-the-conference&quot;&gt;After the conference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Relax.&lt;/li&gt;
  &lt;li&gt;Post your transcript on your blog/Medium/both/other alternative. &lt;a href=&quot;/articles/embracing-simplicity&quot;&gt;Here is what I did for Embracing Simplicity&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Upload your slides to &lt;a href=&quot;http://speakerdeck.com/&quot;&gt;speakerdeck.com&lt;/a&gt; or an
equivalent.&lt;/li&gt;
  &lt;li&gt;If there is a video recording online share that on social media and also add it to the transcript.&lt;/li&gt;
  &lt;li&gt;Basically allow others to benefit from your efforts.&lt;/li&gt;
  &lt;li&gt;Thank everyone who helped you.&lt;/li&gt;
&lt;/ol&gt;
</content>
		</entry>
	
		<entry>
			<title>Embracing simplicity</title>
			<link href="http://adamsilver.io/articles/embracing-simplicity/"/>
			<updated>2016-03-06T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/embracing-simplicity</id>
			<content type="html">&lt;p&gt;This is the talk I gave at &lt;a href=&quot;http://enhanceconf.com/&quot;&gt;Enhanceconf&lt;/a&gt; 2016, a conference dedicated to Progressive Enhancement.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;415&quot; src=&quot;https://www.youtube.com/embed/UlzG6-fI00g&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;!-- &lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/enhanceconf.jpg&quot; alt=&quot;Enhanceconf Q&amp;amp;A&quot; width=&quot;100%&quot;&gt;
		&lt;figcaption&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/psd/&quot;&gt;Paul Downey&lt;/a&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt; --&gt;

&lt;p&gt;You can view my &lt;a href=&quot;https://speakerdeck.com/adamsilver/embracing-simplicity&quot;&gt;presentation slides&lt;/a&gt; and the transcript for the video is below.&lt;/p&gt;

&lt;h2 id=&quot;transcript&quot;&gt;Transcript&lt;/h2&gt;

&lt;p&gt;I want to start by using our imagination.&lt;/p&gt;

&lt;p&gt;I want you to imagine your life with less.&lt;/p&gt;

&lt;p&gt;Less tooling. Less libraries. Less frameworks. Less debugging. Less noise. Less debates.&lt;/p&gt;

&lt;p&gt;Less bullshit.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/bullshit.jpg&quot; alt=&quot;Enhanceconf Q&amp;amp;A&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;&lt;a href=&quot;http://deathtobullshit.com&quot;&gt;Death To Bullshit&lt;/a&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The kind of bullshit &lt;a href=&quot;http://bradfrost.com&quot;&gt;Brad Frost&lt;/a&gt; talks about. Less of the superfluous. Less of the unnecessary. Less of the unnecessarily complex.&lt;/p&gt;

&lt;p&gt;All of this while browsers get better and connections get faster, with no effort on your part whatsoever.&lt;/p&gt;

&lt;p&gt;What you might be imagining is a more straightforward tech stack, particularly on the front-end side. And maybe a better experience — one that embraces the web and its conventions, rather than one that tries to trample all over it or enhance it too much.&lt;/p&gt;

&lt;p&gt;With all of this complexity out of the way we would be able to focus on the basics which might just make the biggest difference to our product and make our lives as designers and developers a little easier too.&lt;/p&gt;

&lt;p&gt;I’ve always been obsessed with simplicity, I think as designers and developers we have simplicity somewhat baked into us. We just need to unlock it.&lt;/p&gt;

&lt;p&gt;One early memory I have of this was when I was 15 or 16 years old revising for my maths GCSE.&lt;/p&gt;

&lt;p&gt;When it was time to revise I would find the quietest place in our house which was our dining room. We had this large dining table — it could seat 10 or so people.&lt;/p&gt;

&lt;p&gt;I would go in there with just my essentials: my calculator, pencil case and mock exam paper. Even though I only needed a small part of this table, I would declutter the physical space so that I could declutter my mental space.&lt;/p&gt;

&lt;p&gt;Today, this is what my desktop looks like…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/desktop.jpg&quot; alt=&quot;My desktop&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;My desktop&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clutter free. I am an Alfred keystroke away from my favourite application.&lt;/p&gt;

&lt;p&gt;And, this is what my home screen looks like…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/homescreen.jpg&quot; alt=&quot;My homescreen&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;My homescreen&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Clutter free again, and my most used apps in close proximity to my thumb.&lt;/p&gt;

&lt;p&gt;And when I am at work, I meticulously close down program after program after I have finished using it which gives me two benefits on the same theme. The first is that I only have open what I need allowing me to focus. The second is that the computer works better when it’s doing less.&lt;/p&gt;

&lt;p&gt;So when we’re both doing less, we both work better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, web design and development is hard. How can we make it simpler for ourselves and for our users?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s true that simple is &lt;em&gt;complicated&lt;/em&gt; but sometimes simple is &lt;strong&gt;&lt;em&gt;simple&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it’s this latter variety of simple that I want to focus on today because I think that’s what we’re missing. I think there is a huge opportunity to do the simple things and get big results.&lt;/p&gt;

&lt;p&gt;Now, you might be wondering about what all this has to do with Progressive Enhancement?&lt;/p&gt;

&lt;p&gt;Well, Progressive Enhancement revolves around people. People consuming an experience or people designing and building an experience to be consumed. And if there is one thing I know about people it’s that we love complicated.&lt;/p&gt;

&lt;p&gt;We hone in on complicated and skip the basics and I recently came across a story with the same theme that I want to share with you…&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/gawande.jpg&quot; alt=&quot;Atul Gawande&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Atul Gawande, Professor of Surgery, Harvard Medical School&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Atul Gawande, Professor of Surgery, Harvard Medical School
This is Atul Gawande. He is the professor of surgery at Harvard Medical School.
&lt;br /&gt;&lt;br /&gt;The World Health Organisation asked him to help reduce the number of deaths during surgery.
&lt;br /&gt;&lt;br /&gt;Did we need more training or more technology?
&lt;br /&gt;&lt;br /&gt;Gawande found they were looking in the wrong place.
He talked to experts in other high-risk professions, such as aviation.
&lt;br /&gt;&lt;br /&gt;What he discovered was that there are usually three main problems.
&lt;br /&gt;&lt;br /&gt;1) Problems of ignorance.
&lt;br /&gt;&lt;br /&gt;2) Problems of technology.
&lt;br /&gt;&lt;br /&gt;3) Problems of ineptitude.
&lt;br /&gt;&lt;br /&gt;All surgical attention had been focused on the first two.
&lt;br /&gt;&lt;br /&gt;They had solved the problem of ignorance: the average surgeon now had ten to 15 years of training.
&lt;br /&gt;&lt;br /&gt;They had solved the problem of technology: surgeons performed up to 4,000 different procedures and prescribed up to 6,000 drugs.
&lt;br /&gt;&lt;br /&gt;But, unlike the aviation industry, they had ignored the third problem.
&lt;br /&gt;&lt;br /&gt;The problem that highly skilled people often make basic mistakes.
&lt;br /&gt;&lt;br /&gt;In the airline industry, this was covered by checklists.
&lt;br /&gt;&lt;br /&gt;Before any pilot takes off, he and his co-pilot run through a checklist.
&lt;br /&gt;&lt;br /&gt;“Brakes — set. Autopilot — disconnected. Fuel level — set”
&lt;br /&gt;&lt;br /&gt;Double-checking the absolute basics don’t get overlooked.
&lt;br /&gt;&lt;br /&gt;Gawande recommended checklists before surgical procedures.
&lt;br /&gt;&lt;br /&gt;Reading aloud and checking off the basics:
&lt;br /&gt;&lt;br /&gt;“Patient’s identity. Name and area for procedure. Known allergies”
&lt;br /&gt;&lt;br /&gt;At first, surgical staff resisted because it felt demeaning.
&lt;br /&gt;&lt;br /&gt;But then the results came in.
&lt;br /&gt;&lt;br /&gt;At the end of the trial, death rates across the hospitals tested had fallen by 47 per cent.
&lt;br /&gt;&lt;br /&gt;If they had seen that result from any drug or technology, it would have been hailed as a miracle cure.
&lt;br /&gt;&lt;br /&gt;But, here, the result came by checking the most basic things.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Because the basics were actually the most important of all.&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;It’s a normal human reaction to forget the importance of getting the basic things right.
&lt;br /&gt;&lt;br /&gt;Human beings get &lt;strong&gt;seduced by complexity&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is exactly what’s happening in our industry. We’re so hypnotised by complexity, we forget the basics.&lt;/p&gt;

&lt;p&gt;We’re so busy worrying about the Javascript this, the framework that, the AJAX, the carousel etc.&lt;/p&gt;

&lt;p&gt;We’re often just rebuilding the same thing we did last year, this year in a new technology or architecture, and I am not sure this is adding value.&lt;/p&gt;

&lt;p&gt;Now, there are many reasons we do complicated. I want to share two interesting ones with you today.&lt;/p&gt;

&lt;p&gt;The first reason is &lt;strong&gt;contribution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We feel that if we put a lot of effort in, then we get a lot of value out but this is often not the case.&lt;/p&gt;

&lt;p&gt;And to demonstrate, I want to share with you a portion of an article I read recently by my friend &lt;a href=&quot;http://www.theluckystrike.co.uk/embracing-simplicity/&quot;&gt;Mark Jenkins&lt;/a&gt;, a designer here in London. It’s entitled “&lt;a href=&quot;https://medium.com/simple-human/contribution-3dff1af38ba4#.nl9814tbr&quot;&gt;Contribution&lt;/a&gt;” and it’s a tale of two designers —&lt;strong&gt; Designer A&lt;/strong&gt; and &lt;strong&gt;Designer B&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Designer A&lt;/strong&gt; spends an hour of their time making 5 screens because they know they need to design 5 screens. They’re not trying to change the world, they achieve what they set out to do.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; takes an entire day to make one screen because they are obsessed with moving pixels, but they are stuck. They can’t let go.
&lt;br /&gt;&lt;br /&gt;They end up doing less because of their own insecurities about their contribution.
&lt;br /&gt;&lt;br /&gt;They create the same thing over and over, they end up with unfinished design(s) or they go right back to the beginning.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; understands that there’s no ‘perfect’.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; believes ‘perfection’ exists, their belief of perfect is jaded by their own inability to understand the solution to the problem.
&lt;br /&gt;&lt;br /&gt;In some cases, they are making a solution for a non existent problem.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; thinks (differently).
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; overthinks.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt;’s contribution is greater because they think about the necessary.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt;’s contribution is lower because they think about the unnecessary.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; is a blocker. To themselves (and the rest of their team).
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; relies on what they know.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; relies on what they don’t know.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; releases early to learn. Then goes back to improve.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; releases late. They learn less because they believe they have perfected something, without testing.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; works with context.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; has no context.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer A&lt;/strong&gt; learns.
&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Designer B&lt;/strong&gt; thinks they don’t have to learn.
&lt;br /&gt;&lt;br /&gt;Both A and B are designers. However, there is a HUGE difference between the two of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I guess if I wanted to sum this up nicely for you it would be that value only has a value when it’s value is valued.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/value.jpg&quot; alt=&quot;Value only has a value when it&#39;s value is valued&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And in the case of enhancements, I am not so sure all the enhancements we go about adding are creating better experiences.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/boots.jpg&quot; alt=&quot;Boots logo&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;One example I have of this was when I was working on Boots.com back in 2008, in particular their checkout flow. It was designed as a single page checkout.&lt;/p&gt;

&lt;p&gt;It had all the enhancements including Accordions, AJAX, client-side validation, no page refreshes. As you go through each step, the accordions would expand and collapse.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/boots_single.jpg&quot; alt=&quot;Boots.com single-page checkout diagram&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Boots.com single-page checkout diagram&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We put in so much effort upfront in order to design, build, test, release and finally user test. When we did, we found out that it didn’t work well at all. The effort we put in was far greater than the value we got out.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/boots_page.jpg&quot; alt=&quot;Boots.com multi-page checkout diagram&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Boots.com multi-page checkout diagram&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So we ended up reverting to the basics. Each accordion step became it’s own page with very few enhancements. And the results were extremely positive.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/justeat.jpg&quot; alt=&quot;Just Eat logo&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And as history repeats itself, almost 6 years later, I was working at Just Eat. We had a single page checkout too and we were tasked with improving conversion within the checkout flow.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/justeat_checkout.jpg&quot; alt=&quot;Multi-page checkout on Just Eat&quot; width=&quot;100%&quot; /&gt;
		&lt;figcaption&gt;Multi-page checkout on Just Eat&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;So we did the same thing. We put each step onto its own page. Each page had plenty of white-space. Each page had a page refresh. And there was a very clear single focus per page. There was a sprinkling of client-side form validation to save a server round-trip.&lt;/p&gt;

&lt;p&gt;All of this resulted in almost 2 million extra orders per year. That’s orders, not revenue.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/twomillion.jpg&quot; alt=&quot;Two million extra orders per year&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And this is what 2 million people look like.&lt;/p&gt;

&lt;p&gt;Everyone benefited. The business and the users clearly benefited.&lt;/p&gt;

&lt;p&gt;You could say that I became less marketable because my CV was far less “wow” — instead of “Built rich single page checkout with all the fancies”, it became “Built 4 web pages with a form on each”.&lt;/p&gt;

&lt;p&gt;But it’s a little but like how the surgeons found it demeaning to do the most basic things and we saw what results they achieved. And afterall, it’s not about me or my CV, it’s about the results and the human being at the end of them.&lt;/p&gt;

&lt;p&gt;Then comes &lt;strong&gt;technology&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;Technology is easy to complicate. One very simple example of this is the use of Jekyll. For those unaware, Jekyll is a static website generator written in Ruby. It’s geared towards blogs so it basically produces a bunch of articles where each article is made of some simple HTML.&lt;/p&gt;

&lt;p&gt;It’s great because it is just static, has no moving parts. No need for an application server and to note I use it myself.&lt;/p&gt;

&lt;p&gt;The problem comes when we want to add dynamic content such as comments.&lt;/p&gt;

&lt;p&gt;What I typically see is the use of Disqus, a Javascript library that asynchronously loads and injects comments in as an enhancement.&lt;/p&gt;

&lt;p&gt;And of course this type of enhancement has many failure points and when it does fail there are no comments. Now, you could say that this is an acceptable degradation point in that at least everyone gets the article.&lt;/p&gt;

&lt;p&gt;But if you think about it, comments can be really valuable and a comment is just text like the article itself. So ultimately this type of enhancement is completely unnecessary and detrimental to the user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why do we do this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We do this because it makes our lives as developers easier — it’s so easy to throw a piece of Javascript at it.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/problem.jpg&quot; alt=&quot;Make it your problem, not your users.&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But ultimately we have put our needs before the needs of the user which as &lt;a href=&quot;https://adactio.com/links/10335&quot;&gt;Jeremy Keith&lt;/a&gt; says…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I had to choose between making something my problem and making something the users problem, I would make it mine every time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this for me is bang on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what can we do with just the basics?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well I have already alluded to this somewhat with the Boots and Just Eat case studies. But I am thinking about text, links, forms, pages, headings, paragraphs etc.&lt;/p&gt;

&lt;p&gt;And if we hone in on just text for a moment…&lt;/p&gt;

&lt;p&gt;Is the copy legible? Are we choosing the right font? The right font-size, letter spacing, line height? Are we humanising our copy, making it appropriate for the audience? Have we got too much or too little text? Are we showing it at the right time.&lt;/p&gt;

&lt;p&gt;You see, there is so much to explore with just the basics.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/essential.jpg&quot; alt=&quot;Mobile first is really just essential only&quot; width=&quot;100%&quot; /&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I am also thinking mobile first, which to &lt;em&gt;me&lt;/em&gt; just means small screen first, which to me just &lt;em&gt;really&lt;/em&gt; means essential first, which to me just really &lt;em&gt;really&lt;/em&gt; means essential only.&lt;/p&gt;

&lt;p&gt;And this has been a real boon for the industry because it has forced us to cater for small screens and picking what is truly essential to the experience which scales up easily to big screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We must stop fearing the page refresh and stop fearing white space.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we trim the fat for all, and when we build these things in the right way the page refresh (something we have always had) goes unnoticed and can be responsible for some amazingly simple experiences.&lt;/p&gt;

&lt;p&gt;And I am not saying that we should oversimplify, nor that there isn’t a place for complicated. But if “ten” is complicated, and “one” is simple, we spend way to much time near the ten mark and I think we need to bring it closer to one at least by default.&lt;/p&gt;

&lt;p&gt;With regards to Progressive Enhancement…&lt;/p&gt;

&lt;p&gt;Progressive Enhancement is not a prescription to enhance. It’s a wonderful strategy should we determine that an enhancement is going to add value. We don’t actually have to enhance — we can choose not to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how might we get this into our everyday processes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We all know the benefits of iterative development and user-testing and I think Progressive Enhancement lends itself perfectly to this.&lt;/p&gt;

&lt;p&gt;I suggest we design and develop the core experience. Then release and test with users. At this point, you might find that this core experience is all that is needed. Great — move on to the next feature.&lt;/p&gt;

&lt;p&gt;If it doesn’t work well enough, we can iterate. I suggest we practice thoughtful reduction rather than mindless addition by exploring the basics a little deeper. If it works now, great — now move on.&lt;/p&gt;

&lt;p&gt;If this still doesn’t work you have my permission to enhance.&lt;/p&gt;

&lt;p&gt;But the great thing here is that you have delivered little and often, learnt little often which is great for team morale and momentum. And of course we know along the way that our effort is adding value in terms of team knowledge and product user experience.&lt;/p&gt;

&lt;p&gt;It is also great because it can reduce the emotional attachment we are prone to. As designers and developers if we put a lot of upfront effort in then we get more attached to our work. If we let the results do the talking, then we remove this problem which again is great for morale and momentum.&lt;/p&gt;

&lt;p&gt;And small steps can result in small wins, and small wins are worth celebrating.&lt;/p&gt;

&lt;p&gt;But small steps can result in big wins, which are again well worth celebrating.&lt;/p&gt;

&lt;p&gt;Ultimately, this is what I want for us, this is what I want for the industry, and this is what I want for our users.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;It was a pleasure to speak and share my knowledge and experiences alongside the others who were there: &lt;a href=&quot;https://twitter.com/thatnatbuckley&quot;&gt;Nat Buckley&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/anna_debenham&quot;&gt;Anna Debenham&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/stilkov&quot;&gt;Stefan Tilkov&lt;/a&gt;, &lt;a href=&quot;Forbes Lindesay&quot;&gt;Forbes Lindesay&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/OliverJAsh&quot;&gt;Oliver Joseph Ash&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/StuCoxMedia&quot;&gt;Stu Cox&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil Hawksworth&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bruised_blood&quot;&gt;Stephen Waller&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jensimmons&quot;&gt;Jen Simmons&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/USA2DAY&quot;&gt;Robin Christopherson&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/radiomorillo&quot;&gt;Stephanie Morillo&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/AaronGustafson&quot;&gt;Aaron Gustafson&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/adactio&quot;&gt;Jeremy Keith&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally I want to thank &lt;a href=&quot;https://twitter.com/simonmcmanus&quot;&gt;Simon McManus&lt;/a&gt; for inviting me to talk and a brilliantly organised conference — thank you!&lt;/em&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>The design challenge</title>
			<link href="http://adamsilver.io/articles/the-design-challenge/"/>
			<updated>2016-01-08T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/the-design-challenge</id>
			<content type="html">&lt;p&gt;In &lt;a href=&quot;https://medium.com/intercom-inside/how-to-hire-designers-960663e3a3e6#.5het3jvgw&quot;&gt;How To Hire Designers&lt;/a&gt; Paul Adams the four main aspects of design: outcome, system, interaction and visual.&lt;/p&gt;

&lt;p&gt;We often spend too much time obsessing over the visual aspect. So much so that it becomes detrimental to the resulting experience.&lt;/p&gt;

&lt;p&gt;Here are some real examples:&lt;/p&gt;

&lt;h2 id=&quot;buttons-and-links-should-look-the-same&quot;&gt;1. “Buttons and links should look the same.”&lt;/h2&gt;

&lt;p&gt;Clarity trumps minimalism every time. &lt;a href=&quot;/articles/buttons-shouldnt-have-a-hand-cursor&quot;&gt;Buttons and links are different&lt;/a&gt;. We should design to accomodate those differences. Not ignore them.&lt;/p&gt;

&lt;h2 id=&quot;remove-the-outline-when-the-user-focuses-on-an-element-it-doesnt-look-good-most-people-dont-use-their-keyboard-anyway-we-cant-legislate-for-all-users-be-realastic&quot;&gt;2. “Remove the outline when the user focuses on an element. It doesn’t look good. Most people don’t use their keyboard anyway. We can’t legislate for all users. Be realastic.”&lt;/h2&gt;

&lt;p&gt;If we know there are people that use the keyboard then we should design for them. It’s not just about how something looks, it’s about how it works.&lt;/p&gt;

&lt;h2 id=&quot;most-people-with-large-screens-use-a-mouse-so-we-dont-need-to-make-it-touch-friendly&quot;&gt;3. “Most people with large screens use a mouse so we don’t need to make it touch friendly.”&lt;/h2&gt;

&lt;p&gt;Maybe more people use a mouse. But some people have large touch-enabled screens. Why not design the hit area so it is good for everyone? Then if they use a mouse it’s easy, if they use touch it’s easy.&lt;/p&gt;

&lt;h2 id=&quot;for-small-screens-lets-hide-the-arrow-buttons-on-the-carousel-small-screen-devices-allow-the-user-to-swipe&quot;&gt;4. “For small screens, let’s hide the arrow buttons on the carousel. Small screen devices allow the user to swipe.”&lt;/h2&gt;

&lt;p&gt;Maybe some browsers don’t support gestures. Maybe users don’t realise an interface is swipable. Including buttons helps.&lt;/p&gt;

&lt;h2 id=&quot;mobile-users-swipe-desktop-users-dont&quot;&gt;5. “Mobile users swipe, desktop users don’t”&lt;/h2&gt;

&lt;p&gt;There is no desktop, there is no mobile. There are browsers of varying sizes and capabilities. There are people with different preferences and abilities. They need our help and consideration.&lt;/p&gt;

&lt;h2 id=&quot;the-colour-contrasts-are-fine-they-work-great-on-most-new-devices-and-thats-our-target-audience&quot;&gt;6. “The colour contrasts are fine, they work great on most new devices and that’s our target audience”&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://backchannel.com/how-the-web-became-unreadable-a781ddc711b6#.c9zxfsiep&quot;&gt;You’re making the web unreadable&lt;/a&gt;. Your challenge is to use visually pleasing acceptable contrasts.&lt;/p&gt;

&lt;p&gt;This makes the clear clearer and the unclear clear. &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/improving-ux-for-color-blind-users/&quot;&gt;Not everyone can see like you can&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-select-box-without-a-label-is-fine-its-unnecessary-clutter&quot;&gt;7. “A select box without a label is fine, it’s unnecessary clutter.”&lt;/h2&gt;

&lt;p&gt;Every &lt;a href=&quot;/articles/always-use-a-label/&quot;&gt;form field needs a label&lt;/a&gt;. There are good reasons why. Legislate for this and make the design look good as well.&lt;/p&gt;

&lt;h2 id=&quot;most-users-are-on-a-fast-connection-10-high-resolution-images-on-one-page-is-essential&quot;&gt;8. “Most users are on a fast connection, 10 high resolution images on one page is essential”&lt;/h2&gt;

&lt;p&gt;People on low-speed connections don’t want to wait. Consider performance and how we can trim the fat for all. Faster connections become super fast, slow connections become satisfactory.&lt;/p&gt;

&lt;h2 id=&quot;fix-it-with-javascript-we-dont-need-to-worry-about-the-1-of-users-without-it-its-important-that-the-design-looks-good-for-the-99&quot;&gt;9. “Fix it with Javascript. We don’t need to worry about the 1% of users without it. It’s important that the design looks good for the 99%.”&lt;/h2&gt;

&lt;p&gt;First, &lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;this&lt;/a&gt;. Second,
it’s not the amount of &lt;em&gt;users&lt;/em&gt;, its the amount of *visits. *Javascript will fail to download/execute at some point. Embrace &lt;a href=&quot;http://adamsilver.io/articles/writing-javascript-that-conforms-to-progressive-enhancement/&quot;&gt;Progressive
Enhancement&lt;/a&gt;. Every time you fix something with Javascript you take a hit in performance, maintenance and usability.&lt;/p&gt;

&lt;h2 id=&quot;we-need-to-fix-that-by-disabling-zoom-on-mobile&quot;&gt;10. “We need to fix that by disabling zoom on mobile”&lt;/h2&gt;

&lt;p&gt;Zoom is essential. Not everyone has &lt;a href=&quot;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&quot;&gt;good vision like you do&lt;/a&gt;. Let go, be &lt;a href=&quot;http://blog.capwatkins.com/the-boring-designer&quot;&gt;boring&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-dont-like-the-way-the-text-wraps-on-small-screens-well-get-the-copywriter-to-make-the-words-fit&quot;&gt;11. “I don’t like the way the text wraps on small screens, we’ll get the copywriter to make the words fit.”&lt;/h2&gt;

&lt;p&gt;Again, clarity trumps minimalism. &lt;a href=&quot;https://medium.com/uie-brain-sparks/content-and-design-are-inseparable-work-partners-5e1450ac5bba&quot;&gt;Design for content&lt;/a&gt;. Not the other way around.&lt;/p&gt;

&lt;h2 id=&quot;website-x-does-it-so-we-should-do-it&quot;&gt;12. “Website X does it, so we should do it.”&lt;/h2&gt;

&lt;p&gt;Sometimes website X does things, sometimes those things are ill-advised. Take this opportunity to do it better. You’re probably testing the website in a cutting edge browser and &lt;a href=&quot;http://uxmyths.com/post/715988395/myth-you-are-like-your-users&quot;&gt;you’re not your users&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Isn’t this our challenge?&lt;/p&gt;

&lt;p&gt;The web has been designed so that anyone with an Internet connection and a browser can access your content/application. That’s the essence of the web — that’s a huge part of the web’s success.&lt;/p&gt;

&lt;p&gt;Design for everyone. Legislate for all kinds of devices, screen sizes, capabilities, people with different abilities and interaction preferences. Isn’t this the challenge we face as designers and engineers?&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Hover menus are problematic</title>
			<link href="http://adamsilver.io/articles/hover-menus-are-problematic/"/>
			<updated>2015-12-27T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/hover-menus-are-problematic</id>
			<content type="html">&lt;p&gt;Designers think hover menus are popular because they &lt;em&gt;aid discoverability&lt;/em&gt; and &lt;em&gt;save users a click&lt;/em&gt;, the latter of which is a common &lt;a href=&quot;http://uxmyths.com/post/654026581/myth-all-pages-should-be-accessible-in-3-clicks&quot;&gt;UX fallacy&lt;/a&gt;. The thing is, hover menus are problematic and here’s why:&lt;/p&gt;

&lt;h2 id=&quot;the-hover-tunnel-and-accidental-deactivation&quot;&gt;1. The hover tunnel and accidental deactivation&lt;/h2&gt;

&lt;p&gt;When a user opens a menu, they can’t intuitively move the mouse directly to a sub link because it accidentally closes the menu—either by leaving the menu or activating another one by accident. This frustrates users and drains their energy.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover1.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; style=&quot;max-width: 500px;&quot; /&gt;
		&lt;figcaption&gt;The menu accidentally closes when you move directly from Companies to the latest article.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover2.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; style=&quot;max-width: 500px;&quot; /&gt;
		&lt;figcaption&gt;To keep the menu open, you must move the mouse carefully down and then across.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;understanding-user-intention-and-accidental-activation&quot;&gt;2. Understanding user intention and accidental activation&lt;/h2&gt;

&lt;p&gt;Hovering is not an intention to activate. At most, it suggests that the user &lt;em&gt;might&lt;/em&gt; interact. Technically, the user is always hovering. This is why hover states are beneficial to the user, such as a &lt;a href=&quot;/articles/buttons-shouldnt-have-a-hand-cursor/&quot;&gt;change of cursor&lt;/a&gt; (browsers do this by default) and a change of style.&lt;/p&gt;

&lt;p&gt;With hover, a user can accidentally open a menu even though they never intended to do so. When this happens, it obscures the content behind disrupting the experience.&lt;/p&gt;

&lt;p&gt;Also, if a user wants to click a link within a page, when the menu opens  before clicking that link, the user may end up navigating to another page instead. This is a horrible experience.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover3.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; style=&quot;max-width: 500px;&quot; /&gt;
		&lt;figcaption&gt;User wants to click link below the menu but...&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/hover4.jpg&quot; alt=&quot;Hover&quot; width=&quot;100%&quot; style=&quot;max-width: 500px;&quot; /&gt;
		&lt;figcaption&gt;...the menu opens accidentally so the user clicks &quot;Energy&quot; instead.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To work around these issues, you can add a small delay before showing a menu. But, this creates another problem: when the user does intend to open the menu, they have to wait for the delay to finish which makes the menu feel unresponsive.&lt;/p&gt;

&lt;h2 id=&quot;accessibility-and-fine-motor-skills&quot;&gt;3. Accessibility and fine motor skills&lt;/h2&gt;

&lt;p&gt;Items on the bottom of the menu are hard to click because the user might accidentally move the mouse off, leaving the user to reopen the menu again.&lt;/p&gt;

&lt;h2 id=&quot;touch-enabled-devices-and-responsive-design&quot;&gt;4. Touch-enabled devices and Responsive Design&lt;/h2&gt;

&lt;p&gt;There is no hover on touch-enabled devices—unless the user plugs in a pointing device. Touch-enabled devices are everywhere and they come in all shapes and sizes.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Instead of focusing on device classification, we should focus on device capability. We can’t control who will access our website or with what device; it’s better to design for touch, mouse, finger and keyboard interchangeably.&lt;/p&gt;

&lt;p&gt;The most inclusive and simple approach is to show a menu via click. This works when the user:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;taps with a finger&lt;/li&gt;
  &lt;li&gt;clicks with a mouse&lt;/li&gt;
  &lt;li&gt;tabs via keyboard and presses enter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, once activated, it stays open &lt;em&gt;until&lt;/em&gt; the user clicks elsewhere which solves the tunnel problem altogether. Because clicking or tapping is a clear intention, there is no accidental activation or deactivation either.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>We stopped tasking</title>
			<link href="http://adamsilver.io/articles/we-stopped-tasking/"/>
			<updated>2015-12-15T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/we-stopped-tasking</id>
			<content type="html">&lt;p&gt;Scrum advocates breaking down stories into tasks because it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;makes story estimation easier;&lt;/li&gt;
  &lt;li&gt;encourages collaboration; and&lt;/li&gt;
  &lt;li&gt;enables the team to show granular progress during a sprint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When one of my colleagues convinced me and the team to stop it we increased our velocity significantly. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;we-didnt-need-to-spend-time-tasking&quot;&gt;1. We didn’t need to spend time tasking&lt;/h2&gt;

&lt;p&gt;At least 50% of our Sprint Planning sessions was spent breaking down stories into tasks. For our team of over 20 people, we gained almost 60 man-hours back per sprint.&lt;/p&gt;

&lt;h2 id=&quot;tasking-ahead-of-development-is-inaccurate&quot;&gt;2. Tasking ahead of development is inaccurate&lt;/h2&gt;

&lt;p&gt;Solutions change during development due to unforseen scenarios. Only through coding might you find opportunites for improvement. A lot of our tasks weren’t accurate which meant tasking had negative value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Weeks of programming can save you hours of planning.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t bother, give yourself more time to code instead.&lt;/p&gt;

&lt;h2 id=&quot;tasks-are-repetitive&quot;&gt;3. Tasks are repetitive&lt;/h2&gt;

&lt;p&gt;A lot of the stories required many of the same tasks. For example unit tests, a controller action, a template, some Javascript and styling enhancements etc. These things were always going to happen.&lt;/p&gt;

&lt;p&gt;Writing them as tasks wasn’t valuable. Instead we relied on a clear Definition of Done and Acceptance Criteria. Both of which ensured the smooth delivery of each story.&lt;/p&gt;

&lt;h2 id=&quot;many-tasks-are-carried-out-in-parallel&quot;&gt;4. Many tasks are carried out in parallel&lt;/h2&gt;

&lt;p&gt;Tasks are often carried out at the same time. For example, we would  write HTML &amp;amp; CSS together. Often the JS-enhanced version would need extra HTML and CSS.&lt;/p&gt;

&lt;p&gt;This meant that a lot of tasks moved from “in-progress” to “complete” at the same time. We never showed granular progress. In the end we just moved the Story card.&lt;/p&gt;

&lt;h2 id=&quot;estimates-didnt-improve&quot;&gt;5. Estimates didn’t improve&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://illustratedagile.com/2012/11/13/the-5-stages-of-user-story-sizing/&quot;&gt;Estimation is based on several things&lt;/a&gt;. Estimation comes from experience. Experience working together with a team you know well, on a particular project within a particular organisation. Only then will you have a predictable velocity.&lt;/p&gt;

&lt;h2 id=&quot;its-easier-to-understand-the-task-board&quot;&gt;6. It’s easier to understand the task board&lt;/h2&gt;

&lt;p&gt;Removing tasks decluttered the task board significantly. We no longer had to fit tasks into each swim lane. Instead we had a single card per story.&lt;/p&gt;

&lt;h2 id=&quot;we-wasted-less-paper&quot;&gt;7. We wasted less paper&lt;/h2&gt;

&lt;p&gt;We saved trees. We saved money. What’s not to like about that?&lt;/p&gt;

&lt;h2 id=&quot;the-overall-process-encouraged-us-to-collaborate&quot;&gt;8. The overall process encouraged us to collaborate&lt;/h2&gt;

&lt;p&gt;We didn’t need tasks to help us collaborate. We sat in close proximity. We had regular, useful and well-timed meetings. We paired when appropriate and had regular productive feedback loops. All of this added up to a collaborative environment.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;If you’re tasking and it works for you, good. But take some time and consider if it’s really helping.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Infinite scrolling is probably a bad idea</title>
			<link href="http://adamsilver.io/articles/infinite-scrolling-is-probably-a-bad-idea/"/>
			<updated>2015-11-24T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/infinite-scrolling-is-probably-a-bad-idea</id>
			<content type="html">&lt;p&gt;On more than one occasion I have found myself trying to convince team-mates that infinite scrolling and its close relative &lt;em&gt;show more&lt;/em&gt; is more likely to degrade the experience than improve upon it. I thought I would jot down my notes on the matter and share them with you. Here they are:&lt;/p&gt;

&lt;h2 id=&quot;the-footer-becomes-unusable&quot;&gt;1. The footer becomes unusable&lt;/h2&gt;

&lt;p&gt;People understand what a footer is and that it is likely to contain links to important secondary information. Infinite scrolling means the footer keeps getting pushed just out of reach by the freshly loaded content.&lt;/p&gt;

&lt;h2 id=&quot;performance-degrades&quot;&gt;2. Performance degrades&lt;/h2&gt;

&lt;p&gt;If you’re using infinite scrolling on a long page, you’re constantly loading more and more content into memory. This will have a negative impact on page performance, since the browser has much more work to do in order to render the page.&lt;/p&gt;

&lt;p&gt;Also, the page needs to listen constantly for scroll events which can cause client-side performance problems.&lt;/p&gt;

&lt;h2 id=&quot;analytics-is-harder-to-implement&quot;&gt;3. Analytics is harder to implement&lt;/h2&gt;

&lt;p&gt;Due to the way infinite scrolling works, dropping some Google Analytics code into the page isn’t going to give you much insight. Therefore you will need to write your own analytics implementation to track newly loaded content. This is then more costly to develop, maintain and test.&lt;/p&gt;

&lt;h2 id=&quot;bookmarking-and-the-back-button-become-problematic&quot;&gt;4. Bookmarking and the back button become problematic&lt;/h2&gt;

&lt;p&gt;You can’t easily bookmark a segment of results to come back to or share with your friends.&lt;/p&gt;

&lt;p&gt;Even if you do manage it and you end up bookmarking segment 15 (where each segment is say 40 items) then when you return to that bookmark, you suffer from long page-load times.
Similarly, you can’t use the back button as it doesn’t go back to the previous segment of results. Instead it goes back to the previous page.&lt;/p&gt;

&lt;h2 id=&quot;people-may-suffer-from-choice-paralysis&quot;&gt;5. People may suffer from choice paralysis&lt;/h2&gt;

&lt;p&gt;With very long pages people can feel paralysed by the amount of content and choices—infinite scrolling may well cause inaction and in-turn, lower click through rates. Just see &lt;a href=&quot;http://danwin.com/2013/01/infinite-scroll-fail-etsy/&quot;&gt;what happened to Etsy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-scrollbar-becomes-unusable-and-untrustworthy&quot;&gt;6. The scrollbar becomes unusable and untrustworthy&lt;/h2&gt;

&lt;p&gt;The scroll bar inevitably becomes very small and hard to use. It’s hard to place your mouse on the scrollbar and the slightest movement might scroll a large part of the page when you only wanted to scroll a little bit.&lt;/p&gt;

&lt;p&gt;Even worse, the scrollbar plays a trick on users as it displays the page length inaccurately — the scrollbar will be near the bottom and then suddenly when the items are loaded in, it will jump up and reveal there is now more content to scroll through. &lt;strong&gt;It’s dishonest design to tell people that they’re almost done when they’re not&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-generally-hard-to-use&quot;&gt;7. It’s generally hard to use&lt;/h2&gt;

&lt;p&gt;Design is about communication. When someone arrives at a set of results, they want to instantly be able to understand what’s going on…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What am I looking at?&lt;br /&gt;
How do I get to the next set of results?&lt;br /&gt;
How many results are there?&lt;br /&gt;
How long will it take me to browse through them all?&lt;br /&gt;
Should I bother to browse through them?&lt;br /&gt;
Or should I search again?&lt;br /&gt;
Or should I try filtering instead?&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the user doesn’t understand the answers to these questions, they will have a feeling of unrest, uncertainty and disorientation. When they do know the answers to these questions, they can make informed and quick decisions, without losing energy.&lt;/p&gt;

&lt;p&gt;With pagination, people can anticipate the effort required to browse through the results. There is a happy sense of completion when a page is finished. There is a clear end. Pagination gives people control to decide whether or not to continue to the next page.&lt;/p&gt;

&lt;p&gt;Also, smaller pages, means a faster, more focused, less overwhelming experience with none of the pitfalls described above. People don’t mind clicking links (to new pages) as long as each click is meaningful and leads them closer to their desired goal.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Designing a bad experience on purpose</title>
			<link href="http://adamsilver.io/articles/designing-a-bad-experience-on-purpose/"/>
			<updated>2015-11-14T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/designing-a-bad-experience-on-purpose</id>
			<content type="html">&lt;p&gt;Who, in their right mind would design something that’s hard-to-use on purpose? That’s what happened to me once. Let’s just say the website sold stuff. And they wanted users to be able to pay using PayPal. Here’s the design that the business blocked:&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/paymentchoice.png&quot; alt=&quot;Payment choice page&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Payment choice page&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The problem with this design is that it was too simple. The reason this was a problem for the business was because when users paid by card, they received fifty pence as a transaction fee. If the user paid by Paypal they would get nothing.&lt;/p&gt;

&lt;p&gt;The business took about 750,000 orders per week, which made fifty pence a big deal. The business wanted us to make PayPal hard to find. Perhaps by hiding it behind an expand or collapse panel or something.&lt;/p&gt;

&lt;p&gt;I just thought, why bother providing a feature if we don’t want people to use it. We knew our users &lt;em&gt;wanted&lt;/em&gt; PayPal and many people &lt;em&gt;only&lt;/em&gt; shop with PayPal for security and convenience reasons.&lt;/p&gt;

&lt;p&gt;We also knew that users drop off during checkout for many reasons. Each order lost costs the business a lot more than fifty pence.&lt;/p&gt;

&lt;h2 id=&quot;what-if-we-added-paypal-as-originally-designed&quot;&gt;What if we added PayPal as originally designed?&lt;/h2&gt;

&lt;p&gt;It’s hard to know but I think that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a small percentage of existing users would’ve started using PayPal; and&lt;/li&gt;
  &lt;li&gt;we would’ve attracted new users to the site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If lots of people switched over to Paypal, I would assume they did so because it’s their preference. Because it’s easier for them. In which case they would be happier customers.&lt;/p&gt;

&lt;p&gt;A happy customer is one that purchases more frequently. Or at least continues to use the service at the same frequency. Also, a happy user is more likely to recommend the service to friends. That must be worth massive amounts in marketing terms.&lt;/p&gt;

&lt;p&gt;Mid-to-late adopters need a nudge before they make the jump. PayPal could’ve
provided a welcome tipping point to attract new users.&lt;/p&gt;

&lt;p&gt;And, if our competitors offered PayPal, users may decide to switch.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keep users happy (plus attract new users), business thrives.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-if-the-worst-happened&quot;&gt;What if the worst happened?&lt;/h2&gt;

&lt;p&gt;The worse case scenario might include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all existing users switching to Paypal (no transaction free received); and&lt;/li&gt;
  &lt;li&gt;no new users signing up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, both of these points contradict each other. If Paypal makes existing
users switch I would imagine the service would attract new users.&lt;/p&gt;

&lt;p&gt;Second, all of our users would be happier using Paypal. That’s why they
switched.&lt;/p&gt;

&lt;p&gt;Third, there is no need to offer the ability to pay by card. This reduces the cost of development.&lt;/p&gt;

&lt;p&gt;Fourth, the checkout flow is even easier to use as there is no choice in payment type. This would likely result in an uptick in conversion.&lt;/p&gt;

&lt;p&gt;All of this to say, this is worth a lot more than fifty pence per order.&lt;/p&gt;

&lt;p&gt;If you’re going to provide a feature, always make it easy-to-use. Or don’t bother.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Designing honestly for the web</title>
			<link href="http://adamsilver.io/articles/designing-honestly-for-the-web/"/>
			<updated>2015-10-09T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/designing-honestly-for-the-web</id>
			<content type="html">&lt;p&gt;I’ve been working on websites for more than half my life. During this time I’ve witnessed designers, developers and businesses designing dishonestly over and over again.&lt;/p&gt;

&lt;p&gt;There are many aspects of dishonest design. This article hones in on just one of these. The aspect that ignores the platform you are designing for. In the context of the web, I call it “bending the web”.&lt;/p&gt;

&lt;p&gt;I must admit, I have been known to bend it on more than a few occasions myself over the course of my career. I think that’s okay though because only by experiencing or reading about the mistakes we make, can we avoid them in the future. Here are some examples of how I’ve bent the web:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I used tables for layout.&lt;/li&gt;
  &lt;li&gt;I’ve given &lt;a href=&quot;/articles/buttons-shouldnt-have-a-hand-cursor/&quot;&gt;submit buttons the hand cursor&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I’ve made a custom looking file input to make it look “nicer”.&lt;/li&gt;
  &lt;li&gt;I have hidden labels to “declutter” UI.&lt;/li&gt;
  &lt;li&gt;I have used a &lt;a href=&quot;/articles/misusing-the-select-control&quot;&gt;select box for navigation&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://alistapart.com/article/dao&quot;&gt;A Dao of Web Design&lt;/a&gt; written by John Allsopp over one and half decades ago, gives us some timeless insights that tell us why this happens and continues to happen today.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If you’ve never watched early television programs, it’s instructive viewing. Television was at that time often referred to as “radio with pictures,” and that’s a pretty accurate description. Much of television followed the format of popular radio at that time.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And just like the relationship between television and radio, there is a relationship between print and web.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In print the designer is god. An enormous industry has emerged from WYSIWYG, and many of the web’s designers are grounded in the beliefs and practices, the ritual of that medium. As designers we need to rethink this role, to abandon control, and seek a new relationship with the page.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We don’t like change and we can’t let go of control. We take our long, deep-rooted belief and experience in a previous medium, and try and make the new one conform to it, however misguided and problematic it is.&lt;/p&gt;

&lt;p&gt;When the web came along, we believed we should have the same visual control as we did in print design. Today, it seems, we still have this same, misguided belief. Today we don’t just think it should behave like print, but also more app like whatever that means.&lt;/p&gt;

&lt;p&gt;But what does this have to do with dishonest design? When we bend the web we are designing dishonestly. And when we design dishonestly we tend to design an unfriendly, often unintuitive experience — which can actually break the inherent features of the web. The very same features which make the web so simple, so powerful, so amazing.&lt;/p&gt;

&lt;p&gt;And truth be told, it comes down to ignorance. I was ignorant. You have been ignorant. The question is are you still?&lt;/p&gt;

&lt;p&gt;The web and the web browser gives us an amazing set of tools, not to be trifled with. Elements such as links, buttons, pages, forms, back buttons, bookmarking, images, videos, headings, paragraphs and focus outlines etc.&lt;/p&gt;

&lt;p&gt;Do you understand what all these elements mean to the browser? And how different browsers utilise these elements to the benefit of the user? Or do you see visual manifestations of these features and try to change them or trample over them?&lt;/p&gt;

&lt;p&gt;Do you look at what other websites do on your Macbook Pro and iPhone 6 and think “if it’s good enough for them, it’s good enough for me”?
Do you sometimes design without a thought for how the browser does it?&lt;/p&gt;

&lt;p&gt;Sometimes a solution works well for a mobile app, but works terribly on the web. I think &lt;a href=&quot;/articles/why-infinite-scrolling-is-probably-a-bad-idea/&quot;&gt;infinite scroll&lt;/a&gt; is an example of this.&lt;/p&gt;

&lt;p&gt;Have you ever used, designed or built a drop down select menu without a submit button? I have. When you select an option, the page refreshes and this simple bending comes with a host of problems for the user. The point is, a select box is meant to be used for input, not for navigation; that is what links are for.&lt;/p&gt;

&lt;p&gt;Another useful thing about the web, is that browsers and devices get better all the time. When we design honestly, the experience gets better and better all by itself with zero effort from us — for proof just interact with a form on your phone and notice how it helps you do that.&lt;/p&gt;

&lt;p&gt;Designing dishonestly not only costs the user, but costs the developer time and the business money. You might get away with the odd bit of dishonest design, but why would you want to?&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Designing a responsive menu without a hamburger</title>
			<link href="http://adamsilver.io/articles/designing-a-responsive-menu-without-a-hamburger/"/>
			<updated>2015-09-14T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/designing-a-responsive-menu-without-a-hamburger</id>
			<content type="html">&lt;p&gt;I’m not going to tell you &lt;em&gt;why&lt;/em&gt; the hamburger sucks. James Archer has &lt;a href=&quot;http://deep.design/the-hamburger-menu/&quot;&gt;done that&lt;/a&gt; for me. Instead, I’ll provide some alternative responsive menus that avoid the hamburger.&lt;/p&gt;

&lt;h2 id=&quot;medium&quot;&gt;1. Medium&lt;/h2&gt;

&lt;p&gt;A big part of Medium’s success is in its simplicity and it can be seen in its menu. If you’re reading this on a small screen you will see the menu takes up a little more space by dropping down below the header.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/medium.png&quot; alt=&quot;Medium menu&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Medium&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You probably &lt;em&gt;didn’t&lt;/em&gt; notice this.&lt;/p&gt;

&lt;p&gt;That’s because like most people, you don’t care about the fine detail of
Medium’s design, you just want to use the site for its content.&lt;/p&gt;

&lt;h2 id=&quot;product-hunt&quot;&gt;2. Product Hunt&lt;/h2&gt;

&lt;p&gt;Product Hunt always displays the menu below the header, regardless of screen
size.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/producthunt.png&quot; alt=&quot;Product Hunt menu&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Product Hunt&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;As there is not enough room for all the links, they wrap on to two lines. Whilst I am sure this menu could look a little nicer with a tad more effort, the menu is still very user-friendly on small and big screens.&lt;/p&gt;

&lt;p&gt;And, this particular website has a target audience of highly critical, industry designers and developers, and it is still a very much loved website.&lt;/p&gt;

&lt;h2 id=&quot;node&quot;&gt;3. Node&lt;/h2&gt;

&lt;p&gt;You might be thinking “this guy is only show sites with small
menus”. So, I give you Nodejs.org with &lt;strong&gt;eight&lt;/strong&gt; links!&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/node.png&quot; alt=&quot;Node menu&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Node&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When in big screens the links are on one line, and when there is not enough
room, the links are simply put into two columns.&lt;/p&gt;

&lt;p&gt;Out of all the examples this one takes up the most space. A few pixels could be trimmed via reducing the size and space around the logo. But they needn’t bother, this works.&lt;/p&gt;

&lt;h2 id=&quot;adamsilverio&quot;&gt;4. Adamsilver.io&lt;/h2&gt;

&lt;p&gt;Shamefully, I include my own site for your pleasure :)&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/adamsilver.png&quot; alt=&quot;Adam Silver menu&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Adamsilver.io&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;google-design&quot;&gt;5. Google Design&lt;/h2&gt;

&lt;p&gt;Google Design allows users to horizontally scroll through the options.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/googledesign.png&quot; alt=&quot;Google Design menu&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;Google Design&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Horizontal scrolling is normally ill-advised but on mobile devices this simple approach works well. And it scales pretty nicely too.&lt;/p&gt;

&lt;h2 id=&quot;the-minimalists&quot;&gt;6. The Minimalists&lt;/h2&gt;

&lt;p&gt;The Minimalists website is designed true to their message. When there’s not enough room, the links wrap on to the next line. No biggie.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;http://adamsilver.io/assets/img/hamburger/minimalists.png&quot; alt=&quot;The Minimalists&quot; width=&quot;100%&quot; style=&quot;max-width: 400px;&quot; /&gt;
		&lt;figcaption&gt;The Minimalists&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;What I love about these examples is how &lt;em&gt;boringly simple&lt;/em&gt; and
&lt;em&gt;user-friendly&lt;/em&gt; they are. &lt;a href=&quot;http://uxmyths.com/post/654047943/myth-people-dont-scroll&quot;&gt;User’s don’t mind scrolling&lt;/a&gt; and it’s wise not to exert too much energy trying to fit everything above an imaginary fold.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Progressively enhanced Javascript</title>
			<link href="http://adamsilver.io/articles/progressively-enhanced-javascript/"/>
			<updated>2015-08-16T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/progressively-enhanced-javascript</id>
			<content type="html">&lt;p&gt;The Javascript element of Progressive Enhancement, is quite possibly the most important and misunderstood aspect of client-side Javascript development, period.&lt;/p&gt;

&lt;p&gt;This article addresses these misunderstandings and provides techniques that can be considered cutting-edge, even though they have been around for a very long time and have been forgotten.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The problems we have with websites are ones we create ourselves”
&lt;br /&gt;— &lt;cite&gt;Motherfuckingwebsite.com&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The beauty of the web is that by default, it is accessible to &lt;em&gt;everyone&lt;/em&gt;. It’s us developers that come along and ruin it. I think most people have the right intention, which is to serve the users first, but often we fail in implementation which we’ll explore shortly.&lt;/p&gt;

&lt;p&gt;But before we do, what is the best way to define what Progressive Enhancement &lt;em&gt;really&lt;/em&gt; is? I think the following description does it justice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Progressive Enhancement is the approach of providing a baseline &lt;strong&gt;core&lt;/strong&gt; experience for everyone; and creating a better &lt;strong&gt;enhanced&lt;/strong&gt; experience for people who use a more capable browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst Progressive Enhancement doesn’t just pertain to Javascript, it is definitely the technology that developers tend to struggle with the most. We just can’t seem to answer the following question with sophistication:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“How am I meant to write Javascript in a Progressive Enhancement way?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whilst this question is not the easiest one to answer, answers do exist, and they are not &lt;em&gt;that&lt;/em&gt; difficult once you have taken the time to truly understand them.&lt;/p&gt;

&lt;h2 id=&quot;progressive-enhancement-myths&quot;&gt;Progressive Enhancement Myths&lt;/h2&gt;

&lt;p&gt;There are many &lt;a href=&quot;http://www.sitepoint.com/javascript-dependency-backlash-myth-busting-progressive-enhancement/&quot;&gt;myths about Progressive Enhancement&lt;/a&gt;. I want to point out 3 in particular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Unobtrusive Javascript is not Progressive Enhancement&lt;/strong&gt;. Simply placing your Javascript code in external files, does not, in any way, address the problem of Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prepraring for users that disable Javascript is barely scratching the surface&lt;/strong&gt;. It’s true — some people disable Javascript but there are so many other reasons why Javascript &lt;em&gt;is&lt;/em&gt; going to fail as &lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;Everyone has Javascript, Right?&lt;/a&gt; explains. The last point in that article is most common and most important: &lt;strong&gt;using Javascript that the browser doesn’t recognise&lt;/strong&gt;. Which leads on to…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Unlike HTML and CSS, Javascript does not degrade gracefully without developer intervention.&lt;/strong&gt; HTML and CSS degrade (or enhance depending on the way you see things) without any extra effort. Consider &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;border-radius&lt;/code&gt;. When unsupported, the input reverts to a standard text control and forgoes curved borders. With Javascript, the browser will error when it tries to execute code it doesn’t understand. As an example, try running the following in IE8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var form = document.forms[0];
form.attachEvent(&#39;submit&#39;, function() {
    window.event.returnValue = false;
    var widgets = document.getElementsByClassName(&#39;widget&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above errors because IE8 doesn’t support the retrieving of elements by class name. The problem here is that the page didn’t &lt;em&gt;fully&lt;/em&gt; enhance. The user didn’t get the enhanced experience. Nor did they get the core experience. &lt;em&gt;No&lt;/em&gt;, instead they got the &lt;em&gt;fuck you&lt;/em&gt; experience.&lt;/p&gt;

&lt;p&gt;The browser and feature in this example is not the relevant point here. It could be &lt;em&gt;any&lt;/em&gt; browser and &lt;em&gt;any&lt;/em&gt; feature. It makes no difference how new a browser is or what cutting-edge features it claims to support.&lt;/p&gt;

&lt;h2 id=&quot;what-shouldnt-you-do&quot;&gt;What shouldn’t you do?&lt;/h2&gt;

&lt;p&gt;Sometimes, it can be helpful to explore how others are tackling the problem, because when you find flaws, you can avoid them and explore a more successful path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Some ignore the problem exists.&lt;/strong&gt; If they haven’t experienced a problem, then they often think one does not exist. Or perhaps, they believe it to be an edge case. Regardless, this is unfortunate to the people using the website and the potential loss to the business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Some also abdicate responsibility by using 3rd party libraries without checking under the hood for quality.&lt;/strong&gt; And often, these libraries support a subset of browsers i.e. it’s &lt;a href=&quot;https://gist.github.com/david-mark/06b9879f963ebb0eed62&quot;&gt;multi-browser as opposed to cross-browser&lt;/a&gt; — a sure sign that the library does not practice Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;People who use &lt;em&gt;other&lt;/em&gt; browsers get the aforementioned &lt;em&gt;fuck you&lt;/em&gt; experience, often at times when it would be straightforward to provide a &lt;em&gt;core&lt;/em&gt; experience. The same thing happens when a library releases a new version and happens to drop support for more browsers — this of course is a never ending cycle.&lt;/p&gt;

&lt;h2 id=&quot;cutting-the-mustard-falls-short&quot;&gt;Cutting The Mustard falls short&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://responsivenews.co.uk/post/18948466399/cutting-the-mustard&quot;&gt;Cutting The Mustard&lt;/a&gt; (CTM) is a relatively new approach to Progressive Enhancement, one which has the premise of a reliable solution and is based on the concept of a core and an enhanced experience. However, it’s implementation (shown below) falls short.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(document.querySelector &amp;amp;&amp;amp; window.addEventListener &amp;amp;&amp;amp; window.localStorage) {
    // bootstrap application
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works by &lt;em&gt;detecting&lt;/em&gt; a few &lt;em&gt;choice&lt;/em&gt; browser APIs, in order to &lt;em&gt;infer&lt;/em&gt; that the browser is “modern” — something that is impossible to determine and irrelevant anyway.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Impossible&lt;/em&gt;, considering the sheer amount of new browsers being released and &lt;em&gt;irrelevant&lt;/em&gt;, because release date does not determine capability. Besides, every browser was new once, so it’s quite obvious that an inference for modernity provides little value.&lt;/p&gt;

&lt;p&gt;Once CTM determines it’s “modern”, the Javascript application starts and (attempts to) provide the enhanced experience. The emphasis on &lt;em&gt;browsers&lt;/em&gt; as opposed to &lt;em&gt;features&lt;/em&gt;, suggests this technique is frail. And, inference is little better than User Agent sniffing, which is something that Richard Cornford explains superbly in &lt;a href=&quot;http://jibbering.com/faq/notes/detect-browser/&quot;&gt;Browser Detection (and What To Do Instead)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More specifically, CTM has the following problems of note:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Detecting host objects like this is dangerous&lt;/strong&gt;. &lt;a href=&quot;http://www.cinsoft.net/host.html&quot;&gt;H is for Host&lt;/a&gt; explains why this is dangerous and provides a simple solution to the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Detecting the presence of an API is not enough&lt;/strong&gt;. CTM only &lt;em&gt;detects&lt;/em&gt; host methods but often APIs are buggy. This is why feature &lt;em&gt;testing&lt;/em&gt; is important. Nicholas Zakas provides an excellent case study in his short ebook &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001655/index.html&quot;&gt;The Problem with Native JavaScript APIs&lt;/a&gt;. Additionally, Peter Michaux’s article &lt;a href=&quot;http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting&quot;&gt;Feature Detection: State of the Art Browser Scripting&lt;/a&gt; explains everything you need to know about feature detection and feature testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. CTM degrades the experience unnecessarily&lt;/strong&gt;. CTM can easily suppress a perfectly capable browser from providing the enhanced experience. For example, if you wanted client-side form validation, something that say IE8 (or 6 for that matter) is perfectly capable of, CTM disregards IE8 and will only give those users the &lt;em&gt;core&lt;/em&gt; experience — resorting to server round trips  which is an &lt;em&gt;unnecessarily&lt;/em&gt; poor experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Some CTM implementations rely on Javascript polyfills to plug missing gaps&lt;/strong&gt;. Ignoring the fact that &lt;a href=&quot;/articles/the-disadvantages-of-javascript-polyfills/&quot;&gt;polyfills are full of problems&lt;/a&gt;, it is clear that if developers are mixing them in with CTM, this more than indicates CTM is not enough on its own to determine whether the browser is capable of delivering an enhanced experience (or not).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. The CTM condition needs constant maintenance as new browsers are released&lt;/strong&gt;. Again it’s that same old problem — when can you drop support for a browser? This question doesn’t really ever have to be asked. Either the browser has the required working features or it doesn’t — that is, it’s about features, not browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. It’s unreliable&lt;/strong&gt;. If the application uses any API that is not within the CTM test, the chance of a &lt;em&gt;fuck you&lt;/em&gt; experience is high. As an  example, it will break in browsers where &lt;code&gt;matchMedia&lt;/code&gt; isn’t provided, or even in browsers where it is provided but it’s buggy. Furthermore, &lt;code&gt;querySelector&lt;/code&gt; itself has many bugs depending on context and arguments supplied, further reducing the reliability of CTM. An example follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(document.querySelector &amp;amp;&amp;amp; window.addEventListener &amp;amp;&amp;amp; window.localStorage) {
    // application that uses other APIs

    window.addEventListener(&quot;load&quot;, function(e) {
        // FAIL = ANOTHER FUCK YOU
        var matches = window.matchMedia(...);
        // ...other stuff...
    }, false);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had a little chat with Jeremy Keith about this and he rightly says that you can use CTM better by detecting all the APIs. He is definitely right of course.&lt;/p&gt;

&lt;p&gt;My point is that this is how the technique is advertised and often implemented, and that in addition to this there are several other points of failure to consider anyway.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-solution&quot;&gt;What &lt;em&gt;is&lt;/em&gt; the solution?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I’ve always maintained that, given the choice between making something my problem, and making something the user’s problem, I’ll choose to make it my problem every time.”
&lt;br /&gt;— &lt;cite&gt;Jeremy Keith&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have made it this far, you probably believe in people &lt;em&gt;first&lt;/em&gt;, whether it’s the users or the client. And, that Progressive Enhancement is the way to enable that belief.&lt;/p&gt;

&lt;p&gt;In order to provide a core experience, the site &lt;em&gt;must&lt;/em&gt; work without Javascript. Why? Because that is the experience a user will get, when Javascript &lt;em&gt;is&lt;/em&gt; enabled, but incapable of running (for whatever reason).&lt;/p&gt;

&lt;p&gt;Then, in order to determine that the browser can provide the enhanced experience, you must detect and where necessary, test &lt;em&gt;all&lt;/em&gt; of the features used by your application &lt;em&gt;before&lt;/em&gt; your application  uses them. This will ensure the page doesn’t end up irrevocably broken, which is something your users will thank you for.&lt;/p&gt;

&lt;p&gt;The only way to reliably do this is through wrappers, or &lt;em&gt;facades&lt;/em&gt; if jargon is your thing. A library that employs Progressive Enhancement &lt;em&gt;must&lt;/em&gt; provide a dynamic API. Dynamic, in that it adapts and changes based on the host environment i.e. the browser. This is what it basically looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(lib.hasFeatures(&#39;find&#39;, &#39;addListener&#39;, &#39;storeValue&#39;)) {
    var el = lib.find(&#39;.whatever&#39;);
    lib.addListener(el, &quot;click&quot;, function() {
	    lib.storeValue(&#39;key&#39;, &#39;value&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1. Notice how remarkably similar CTM &lt;em&gt;looks&lt;/em&gt; in comparison.&lt;/strong&gt; The difference is that the application doesn’t directly interface with browser APIs. Facades provide a leaner, context-specific API, that allows you to iron out bugs, all of which reliably enables Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Also note, the one-to-one mapping between what is &lt;em&gt;checked&lt;/em&gt; in the condition and what is &lt;em&gt;used&lt;/em&gt; by the application.&lt;/strong&gt; This is &lt;em&gt;vital&lt;/em&gt;. If you break this rule, you significantly increase the chance of providing the &lt;em&gt;fuck you&lt;/em&gt; experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. There is no need for polyfills.&lt;/strong&gt; The library either provides the method or it doesn’t, no halfway houses, no caveats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Application logic is completely decoupled from browser logic.&lt;/strong&gt; This is something Nicholas Zakas writes about in many of his articles and books. Basically this is good for sanity and maintainability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. In the event that Javascript is enabled and that the condition does &lt;em&gt;not&lt;/em&gt; pass, the user gets the degraded experience.&lt;/strong&gt; In Cutting The Mustard lingo, it simply doesn’t cut it.&lt;/p&gt;

&lt;p&gt;At this point, some might say they don’t concern themselves with browser problems, as libraries take care of them (the majority unfortunately don’t). They might even portray themselves as application developers, but just because responsibility is abdicated, doesn’t mean the problem isn’t there.&lt;/p&gt;

&lt;p&gt;The idea of abstractions are good, the idea of several abstractions i.e. a library, is also good. But if that library is monolithic in nature, context-less, lacks feature detection and feature testing, leans on polyfills (or browser sniffing or object inferences etc) and does &lt;strong&gt;not&lt;/strong&gt; expose a dynamic API, then ultimately you are unable to Progressively Enhance your application and your users and the business you work for, will suffer for it.&lt;/p&gt;

&lt;p&gt;At the very least, it is beneficial to be able to spot code that does not conform to the principles of Progressive Enhancement. Particularly, the kind that doesn’t even attempt to degrade gracefully in the face of danger.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-build-a-library-like-this&quot;&gt;How do I build a library like this?&lt;/h2&gt;

&lt;p&gt;To explain how to build a library that conforms to Progressive Enhancement would likely require a book of its own. Fortunately, Peter Michaux’s article &lt;a href=&quot;http://peter.michaux.ca/articles/cross-browser-widgets&quot;&gt;Cross-Browser Widgets&lt;/a&gt; provides a detailed walkthrough all in one article. However, &lt;em&gt;this&lt;/em&gt; article wouldn’t be complete without a short example of its own would it?&lt;/p&gt;

&lt;p&gt;This example will also demonstrate that Progressive Enhancement is not a drag in the way of “having to support old irrelevant browsers”. Quite the opposite in-fact. The words “drops support for” changes to “degrades gracefully in”. You also get to determine an appropriate degradation point suitable for your project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// library.js
var lib = {};

// Note: use isHostMethod - H is for Host.
if(document.documentElement.classList.add) {
	lib.addClass = function(el, className) {
		return el.classList.add(className);
	};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then the calling application code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
if(lib.addClass) {
	// some application that must provide the ability to add a class to an element, in order to provide the enhanced experience

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice, that this application only enhances where the browser supports &lt;code&gt;classList&lt;/code&gt;, which generally speaking are cutting edge browsers (at time of writing), meaning that this application will degrade in IE9 (and below) as well as a bunch of other browsers. That’s not a problem though, they will just get the &lt;em&gt;core&lt;/em&gt; experience. If you wanted to support those browsers, something which in this case is easy to achieve, then you could add another fork:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// library.js
var lib = {};

// Note: use isHostMethod - Peter&#39;s article covers this
if(document.documentElement.classList.add) {
	lib.addClass = function(el, className) {
		return el.classList.add(className);
	};
} else if(typeof html.className === &quot;string&quot;) {
	lib.addClass = function(el, className) {
		var re;
		if (!el.className) {
			el.className = className;
		} else {
			re = new RegExp(&#39;(^|\\s)&#39; + className + &#39;(\\s|$)&#39;);
			if (!re.test(el.className)) {
				el.className += &#39; &#39; + className;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method now supports more browsers and your application code didn’t change. Equally, you could remove this fork again in the future, when you think it’s more acceptable to give those browsers the &lt;em&gt;core&lt;/em&gt; experience. Perhaps the number of visitors naturally dropped for a particular set of browsers. Or maybe, it’s not worth the development effort to write a second fork etc.&lt;/p&gt;

&lt;p&gt;Regardless, a library never &lt;em&gt;has&lt;/em&gt; to drop support in the traditional sense — it can simply drop &lt;em&gt;enhanced&lt;/em&gt; support.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Progressive Enhancement is something that puts users first. The misunderstandings of Progressive Enhancement, when broken down piece by piece are easy to understand, but if just one of those pieces falls down, technical implementations tend to fall short of the mark.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is quite common in the industry and it’s the people that suffer the most, the same people that are interested in your business or content. It’s just not good enough to let them endure the &lt;em&gt;fuck you&lt;/em&gt; experience, they don’t deserve it and it’s circumventable.&lt;/p&gt;

&lt;p&gt;Fortunately, when the real meaning of Progressive Enhancement is understood, the execution can be implemented correctly. This allows for robust, future-friendly, backwards-compatible Javascript code. This allows you to &lt;em&gt;responsibly&lt;/em&gt; use cutting-edge browser APIs, leaving the majority of other browsers to degrade to the core experience.&lt;/p&gt;

&lt;!--

Cornford:
The combination of the facts that it is impossible to determine which browser is executing the script, and that it is impossible to be familiar with all browser DOMs can be rendered insignificant by using feature detection to match code execution with any browser&#39;s ability to support it. But there is still going to be a diversity of outcomes, ranging from total failure to execute any scripts (on browsers that do not support javascript, or have it disabled) to full successful execution on the most capable javascript enabled browsers.

Veal:
I would add - and with a mobile connection you have no choice but to use the proxy because that is the way the network is configured. They are not as open as your home broadband and companies often employ a proxy to save bandwidth, and again you cannot avoid this
--&gt;
</content>
		</entry>
	
		<entry>
			<title>Addendum to the boring front-end developer</title>
			<link href="http://adamsilver.io/articles/addendum-to-the-boring-front-end-developer/"/>
			<updated>2015-07-15T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/addendum-to-the-boring-front-end-developer</id>
			<content type="html">&lt;p&gt;Thanks to everyone who took the time to read &lt;a href=&quot;/articles/the-boring-front-end-developer/&quot;&gt;The Boring Front-end
Developer&lt;/a&gt;. There were some outrageous and funny comments which I found entertaining and there were also some points worth addressing.&lt;/p&gt;

&lt;h2 id=&quot;css-preprocessors&quot;&gt;1. CSS preprocessors&lt;/h2&gt;

&lt;p&gt;I know I’m in the minority here.&lt;/p&gt;

&lt;p&gt;I know a lot of developers who like them, I know a lot of developers who don’t.
I can see advantages in them too.&lt;/p&gt;

&lt;p&gt;But I have worked on enough projects to know that these things come with very
real and painful disadvantages.&lt;/p&gt;

&lt;p&gt;Important issues like performance, maintainability (the thing they’re trying to
&lt;a href=&quot;http://adamsilver.io/articles/the-disadvantages-of-css-preprocessors/&quot;&gt;more&lt;/a&gt;.
It’s relatively easy (read: cheap) to add a CSS preprocessor to the tech stack,
but it’s relatively hard (read: costly) to remove it down the line.&lt;/p&gt;

&lt;p&gt;I just advise, as with everything else, to be conscious of the issues before
deciding to use one and putting that on to your current and future team mates.&lt;/p&gt;

&lt;h2 id=&quot;new--good--new--bad&quot;&gt;2. New != good &amp;amp;&amp;amp; New != bad&lt;/h2&gt;

&lt;p&gt;I use a lot of “new” technology and I use a lot of “old” technology.&lt;/p&gt;

&lt;p&gt;FWIW I use Github, Jekyll, Grunt, Node and Bower to name a few.&lt;/p&gt;

&lt;p&gt;I choose to use these things for many good reasons. Those reasons are not to do
with popularity, newness or how many stars they have on Github. At most these
are secondary reasons.&lt;/p&gt;

&lt;p&gt;Unfortunately, I don’t believe this to be the case for the majority of
developers in the front-end space right now.&lt;/p&gt;

&lt;p&gt;I am simply advocating critical and deliberate analysis, so that any decision is a &lt;em&gt;conscious&lt;/em&gt; one.&lt;/p&gt;

&lt;h2 id=&quot;bfeds-dont-get-paid-well&quot;&gt;3. BFEDs don’t get paid well&lt;/h2&gt;

&lt;p&gt;I know several developers that would be classed as “boring”, all of which are
paid very well.&lt;/p&gt;

&lt;h2 id=&quot;change-isnt-necessarily-progress&quot;&gt;4. Change isn’t necessarily progress&lt;/h2&gt;

&lt;p&gt;(Disclaimer: this is not my own thought)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I also find people touting “progress” don’t realise that a lot of the time they &amp;gt; just mean “change”. I mean, sure, if a new way of doing things is demonstrably better, by all means let’s use it. But a lot of the time you’re just swapping one (well-understood) set of tradeoffs and considerations for a new, less understood set, because “That’s what we’re doing now”. — qu4z-2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s a &lt;em&gt;lot&lt;/em&gt; of “change” going on in the industry, developers are having a
whale of a time in doing so.&lt;/p&gt;

&lt;p&gt;But is this &lt;em&gt;really&lt;/em&gt; adding value to the user or business?&lt;/p&gt;

&lt;h2 id=&quot;people-first-developers-second&quot;&gt;5. People first, developers second&lt;/h2&gt;

&lt;p&gt;It is very common to hear developers berating old browsers and dropping support
in the name of cost and security but &lt;em&gt;your&lt;/em&gt; users don’t care and are unaware,
and sometimes not in control of what browsers they use. Corporations locking
down IE6 is a common example.&lt;/p&gt;

&lt;p&gt;Heck some people don’t even know what a browser *is *and yet, these people
manage to surf and buy shit using one.&lt;/p&gt;

&lt;p&gt;These users arrive at your site because they can, and they leave because you
have unnecessarily and irresponsibly not given a thought to them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: Has browser usage dropped because the browser is “old” &lt;strong&gt;or&lt;/strong&gt; because the website doesn’t work in that browser anymore?
&lt;a href=&quot;http://motherfuckingwebsite.com/&quot;&gt;Motherfuckingwebsite.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, it’s true that you probably shouldn’t be testing your site in IE1 or
Mosaic, but there are front-end engineering approaches that ensure “any” browser can be used to access a website (for the most part anyway). These techniques serve new browsers just as much as old browsers.&lt;/p&gt;

&lt;p&gt;It’s our job to serve the user first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People first, developers second.&lt;/strong&gt;&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of Javascript polyfills</title>
			<link href="http://adamsilver.io/articles/the-disadvantages-of-javascript-polyfills/"/>
			<updated>2015-06-22T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/the-disadvantages-of-javascript-polyfills</id>
			<content type="html">&lt;p&gt;A polyfill, also known as a shim, is a user-defined implementation of an API that some browsers provide natively, normalising browser differences.&lt;/p&gt;

&lt;p&gt;As a proponent of &lt;a href=&quot;/articles/developing-templates-using-an-outside-in-approach&quot;&gt;outside-in development&lt;/a&gt;, I see the lure of trying to develop websites as if all browsers are the same. The problem is that &lt;a href=&quot;/articles/browsers-are-different-but-so-what/&quot;&gt;browsers are not the same&lt;/a&gt;. And tackling the “problem” with a polyfill is problematic. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;they-augmenting-host-objects&quot;&gt;1. They augmenting host objects&lt;/h2&gt;

&lt;p&gt;Polyfills augment host and native objects. Experts such as Richard Cornford, David Mark, Thomas Lahn and Kangax have told us this is a bad idea. The latter of which published two articles on the matter: &lt;a href=&quot;http://perfectionkills.com/whats-wrong-with-extending-the-dom/&quot;&gt;What’s wrong with extending the DOM?&lt;/a&gt; and &lt;a href=&quot;http://perfectionkills.com/extending-native-builtins/&quot;&gt;Extending native built-ins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a choice snippet if you don’t have time to read the articles:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“DOM extension seemed so temptingly useful […]. But what hides behind this seemingly innocuous practice is a huge load of trouble. […] the downsides of this approach far outweigh any benefits.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;feature-detection-is-not-enough&quot;&gt;2. Feature detection is not enough&lt;/h2&gt;

&lt;p&gt;As Peter Michaux shows us in &lt;a href=&quot;http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting&quot;&gt;Feature Detection: State of the art browser scripting&lt;/a&gt;, the mere presence of an API is not always enough to determine its reliablity. This is where feature &lt;em&gt;testing&lt;/em&gt; comes in.&lt;/p&gt;

&lt;p&gt;Polyfills tend to just detect the presence of an API. They do not iron out the bugs or inconsistencies found in different browsers. Even if they did, they would have to override the original, whereby the override may contain a reference to it. This is dangerous and unnecessary. Instead, we should use facades as we’ll discuss shortly.&lt;/p&gt;

&lt;h2 id=&quot;they-intertwine-browser-and-application-logic-together&quot;&gt;3. They intertwine browser and application logic together&lt;/h2&gt;

&lt;p&gt;As Nicholas Zakas says in &lt;a href=&quot;https://www.youtube.com/watch?v=vXjVFPosQHw&quot;&gt;Scalable JavaScript Application Architecture&lt;/a&gt;, it is important to decouple application and browser logic. He states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Application logic should be written one way for all browsers in order to keep the code maintainable. If you’re using native APIs in your application logic, you can’t help but know what browser is being used because you need to account for browser differences. That means your application logic will always need to be updated as new browsers and new browser versions are released. &lt;strong&gt;That’s a recipe for disaster&lt;/strong&gt;”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;we-rarely-need-need-the-full-api&quot;&gt;4. We rarely need need the full API&lt;/h2&gt;

&lt;p&gt;We may not need the full API to solve the problem. We may not even be &lt;em&gt;able&lt;/em&gt; to implement a polyfill because there’s just no way to do it. This is why context is important.&lt;/p&gt;

&lt;p&gt;We should first look to understand the problem precisely. And then solve &lt;em&gt;that&lt;/em&gt; problem only. We rarely need &lt;em&gt;all&lt;/em&gt; of an API, which is something we’ll discuss shortly. With polyfills it’s all or nothing.&lt;/p&gt;

&lt;h2 id=&quot;they-come-with-caveats&quot;&gt;5. They come with caveats&lt;/h2&gt;

&lt;p&gt;It takes little effort to find problematic polyfills. Take the &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;ES5 Shim&lt;/a&gt; documentation. In describing the &lt;code&gt;Object.create&lt;/code&gt; polyfill it states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“For the case of simply “begetting” an object that inherits prototypically from another, this &lt;strong&gt;should&lt;/strong&gt; work fine across legacy engines.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Emphasis mine. The word &lt;em&gt;should&lt;/em&gt; doesn’t instill confidence. We should, of course, build atop of reliable foundations—we are only as good as our lowest level functions. It continues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The second argument is passed to Object.defineProperties which will &lt;strong&gt;probably fail either silently or with extreme prejudice&lt;/strong&gt;.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Emphasis mine. We shouldn’t expect our team to rely on code like this, much less our users. Any code we write around this is just &lt;em&gt;polishing a turd&lt;/em&gt;, as the saying goes.&lt;/p&gt;

&lt;h2 id=&quot;what-should-we-do-instead&quot;&gt;What should we do instead?&lt;/h2&gt;

&lt;p&gt;A facade or wrapper, is a design pattern that simplifies an interface to something more complex. This allows us to abstract away the differing browser implementations and bugs. And with the added bonus of being able to simplify the method signature.&lt;/p&gt;

&lt;p&gt;Inside the facade there is nothing to stop us using bits of an API, and feature testing various implementations and acting accordingly, much like Peter Michaux shows us in his other article &lt;a href=&quot;http://peter.michaux.ca/articles/cross-browser-widgets&quot;&gt;Cross browser Widgets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cloning an object is pertinent to this article because &lt;code&gt;Object.create&lt;/code&gt; solves this problem. If we want to support &lt;em&gt;modern&lt;/em&gt; browsers only i.e ones that provide &lt;code&gt;Object.create&lt;/code&gt;, then an implementation might be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var lib = {};
if(Object.create) {
  lib.cloneObject = function(obj) {
    return Object.create(obj);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As this implementation only uses a small part of the entire API, the exposed method signature has just one argument, solving the precise problem and no more. But what about browsers lacking &lt;code&gt;Object.create&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If we want to degrade gracefully, we don’t have to do anything. If we want to support other browsers add a second fork as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Code credited to David Mark. Thanks.
var lib = {};
if(Object.create) {
  lib.cloneObject = function(obj) {
    return Object.create(obj);
  };
} else {
  lib.cloneObject = (function() {
    var Fn = function() {};
      return function(obj) {
        Fn.prototype = obj;
        return new Fn();
    };
  })();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The context of the problem changed. It got a little harder — but the implementation is still lean and the method signature still works well. But, we didn’t need to worry about recreating &lt;code&gt;Object.create&lt;/code&gt; in its entirety.&lt;/p&gt;

&lt;p&gt;But, what if we did need the full API? We would need two simple changes: change the name of the function to something more appropriate and expand the method signature to allow for property descriptors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var lib = {};
if(Object.create) {
  lib.createObject = function(obj, props) {
    return Object.create(obj, props);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about browsers lacking &lt;code&gt;Object.create&lt;/code&gt;? Same as before. Either degrade gracefully or add another fork. This is the very essence of Progressive Enhancement.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Having discussed polyfills in detail, it’s clear that, at best, they are hard to implement and they intertwine browser and application logic. This intertwining is complicated and costly.&lt;/p&gt;

&lt;p&gt;At their worst, polyfills have caveats and gaps that cause pain for the developer and broken experiences for users.&lt;/p&gt;

&lt;p&gt;Instead, we should use facades, which enable us to build reliable, progressively enhanced, and in inclusive experiences. This, of course, results in happy users.&lt;/p&gt;

&lt;!--

* ADDED IMPLEMENTATION Just because an API is implemented in a browser doesn&#39;t mean it&#39;s trustworthy. Sometimes, the spec is simply misunderstood and implemented differently across browser vendors. Adding a polyfill to the mix just adds complexity in the form of another user-defined implementation.

* CONSISTENCY Then there is the question of consistency. Do you want to use some polyfills and some facades. Probably not. Just use a consistent abstraction, a facade.

--&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of CSS preprocessors</title>
			<link href="http://adamsilver.io/articles/the-disadvantages-of-css-preprocessors/"/>
			<updated>2015-05-05T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/the-disadvantages-of-css-preprocessors</id>
			<content type="html">&lt;p&gt;CSS preprocessors are well lauded in our industry. But, like all technology on offer, it comes with trade-offs. Trade-offs that need our consideration before accepting the added complexity they bring.&lt;/p&gt;

&lt;h2 id=&quot;debugging-is-harder&quot;&gt;1. Debugging is harder&lt;/h2&gt;

&lt;p&gt;Preprocessors have a compilation step, meaning that CSS line numbers are irrelevant when trying to debug our code. But debugging is twice as hard as programming, so this alone is a &lt;em&gt;huge&lt;/em&gt; downside.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Debugging is twice as hard as programming”
&lt;br /&gt;— &lt;cite&gt;Brian Kernighan&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://thesassway.com/intermediate/using-source-maps-with-sass&quot;&gt;Source maps&lt;/a&gt; provide one solution, but this needs extra work to setup. Plus they only work in a limited set of &lt;em&gt;modern&lt;/em&gt; browsers. But, as we know, bugs often crop up in &lt;em&gt;old&lt;/em&gt; browsers.&lt;/p&gt;

&lt;p&gt;Without source maps, we are left to search for rules in the hope that we find what we’re looking for.&lt;/p&gt;

&lt;h2 id=&quot;compilation-slows-down-development&quot;&gt;2. Compilation slows down development&lt;/h2&gt;

&lt;p&gt;Compilation times can be &lt;em&gt;painfully&lt;/em&gt; slow, even when using the fastest techniques on a cutting edge machine. You know that feeling you get when you refresh and don’t see any changes? &lt;em&gt;That&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;performance-is-compromised&quot;&gt;3. Performance is compromised&lt;/h2&gt;

&lt;p&gt;Source files may be small, but the &lt;a href=&quot;http://jaketrent.com/post/cons-css-preprocessors/&quot;&gt;generated CSS could be huge&lt;/a&gt;. And it’s the generated CSS that counts.&lt;/p&gt;

&lt;p&gt;We should be aware that in using a CSS preprocessor, we’re losing some inportant control.&lt;/p&gt;

&lt;h2 id=&quot;maintainence-and-overengineering&quot;&gt;4. Maintainence and overengineering&lt;/h2&gt;

&lt;p&gt;It’s common to see developers employing a &lt;code&gt;red&lt;/code&gt; variable, for example. But this is of little value in terms of maintainability.&lt;/p&gt;

&lt;p&gt;If the colour changes, then we need to update the name and the value, making the abstraction pointless.&lt;/p&gt;

&lt;p&gt;Not only are there alternatives to variables and mixins (which we’ll cover later), but a search and replace maybe all we need.&lt;/p&gt;

&lt;h2 id=&quot;tooling-and-developer-convenience&quot;&gt;5. Tooling and developer convenience&lt;/h2&gt;

&lt;p&gt;CSS preprocessors require extra tooling. Developers shouldn’t be forced to use a particular editor just to be able to use the tool. That’s the tail wagging the dog.&lt;/p&gt;

&lt;p&gt;Also, extra stuff adds complexity. This needs to be understood, upgraded and maintained—all of which increases cost and the chance of issues.&lt;/p&gt;

&lt;h2 id=&quot;saving-generated-files-or-not&quot;&gt;6. Saving generated files (or not)&lt;/h2&gt;

&lt;p&gt;Whether we should &lt;a href=&quot;http://stackoverflow.com/questions/13185170/using-less-and-version-control-should-generated-css-be-included-in-a-repo&quot;&gt;save the generated CSS&lt;/a&gt; or not is something we don’t agree on as a community. In which case, it’s time for some &lt;a href=&quot;http://www.nczonline.net/blog/2015/04/14/consensus-driven-development/&quot;&gt;Concensus Driven Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;capability-and-understanding&quot;&gt;7. Capability and understanding&lt;/h2&gt;

&lt;p&gt;Whilst CSS preprocessors and the workflows around them have become widespread, there is still a knowledge gap. Particularly, when it comes to understanding the trade-offs.&lt;/p&gt;

&lt;p&gt;There’s a big difference between understanding a tool, and using it effectively without introducing other problems.&lt;/p&gt;

&lt;h2 id=&quot;what-about-variables-mixins-and-nesting&quot;&gt;What about variables, mixins, and nesting?&lt;/h2&gt;

&lt;p&gt;A solid approach to writing &lt;a href=&quot;http://maintainablecss.com&quot;&gt;maintainable CSS&lt;/a&gt; solves most problems. In anycase, we can mimick &lt;em&gt;variables&lt;/em&gt; and &lt;em&gt;mixins&lt;/em&gt; by using comma-delimited CSS selectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selector,
anotherSelector {
  /* common rules */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, whilst we can repetitively qualify our selectors to mimick &lt;em&gt;nesting&lt;/em&gt;, it’s not something that makes for performant CSS. Instead, we should &lt;a href=&quot;http://maintainablecss.com/chapters/conventions/&quot;&gt;use a convention&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s &lt;em&gt;easy&lt;/em&gt; to add a CSS preprocessor to the tech stack. But, it’s not easy to remove it down the line, should we so choose.&lt;/p&gt;

&lt;p&gt;It’s our responsibility to consider the impact they have on our work flow before making the &lt;em&gt;easy&lt;/em&gt; decision to install one.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>The role of the Front-end Developer</title>
			<link href="http://adamsilver.io/articles/the-role-of-the-front-end-developer/"/>
			<updated>2015-03-11T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/the-role-of-the-front-end-developer</id>
			<content type="html">&lt;p&gt;The role of the Front-end developer extends far beyond translating  designs into code. They should be heavily involved in many other aspects of the design and development process…&lt;/p&gt;

&lt;h2 id=&quot;user-experience-amp-interaction-design&quot;&gt;User Experience &amp;amp; Interaction Design&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.disambiguity.com/there-is-no-ux/&quot;&gt;Everyone is responsible for UX&lt;/a&gt; and &lt;a href=&quot;http://www.smashingmagazine.com/2014/11/21/why-you-should-include-your-developer-in-the-design-process/&quot;&gt;Front-end Developers play an essential role&lt;/a&gt; due to their intimate relationship with a huge range browsers, across devices and operating systems. &lt;strong&gt;How can you design for the web if you don’t understand the platforms’ constraints and powers?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;front-end-architecture&quot;&gt;Front-end architecture&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;experienced&lt;/em&gt; Front-end developer should be able to design a suitable front-end architecture which includes the consideration of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Design patterns&lt;/li&gt;
  &lt;li&gt;Architectural patterns&lt;/li&gt;
  &lt;li&gt;Bootstrapping strategies&lt;/li&gt;
  &lt;li&gt;Bundling and compression&lt;/li&gt;
  &lt;li&gt;Modularity and semantics&lt;/li&gt;
  &lt;li&gt;Technical contracts between backend and front-end. Namely view models and XmlHttpRequest end-points&lt;/li&gt;
  &lt;li&gt;Code style and convention&lt;/li&gt;
  &lt;li&gt;Testing and automation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;The beauty of the web is one of reach; deploy once and access everywhere; there are just two requirements: a browser and an Internet connection. Oh and a competent Front-end developer who won’t &lt;a href=&quot;http://www.motherfuckingwebsite.com&quot;&gt;fuck up your website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Front-end developers are responsible and should take pride in the fact that, the UIs they build, are accessible to everyone, no matter their age, ability, user interaction preferences and, choice of device, Operating System and browser.&lt;/p&gt;

&lt;p&gt;Front-end developers are &lt;em&gt;normally&lt;/em&gt; speaking, the only advocates of accessibility and as accessibility is intertwined with usability, it’s vital to be knowledgeable and to champion it readily.&lt;/p&gt;

&lt;h2 id=&quot;front-end-feature-writing&quot;&gt;Front-end feature writing&lt;/h2&gt;

&lt;p&gt;Given a well defined and suitable front-end architecture, adding new features and updating existing features will include the writing of HTML, CSS and Javscript. This should include writing unit tests and (at least helping to write) automated functional tests.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-optimisation&quot;&gt;Search Engine Optimisation&lt;/h2&gt;

&lt;p&gt;Much like Accessibility, it is imperative Front-end developers understand how to build web pages that are search-engine friendly, so that appropriate indexing can take place in order to surface the content of the web page to their users.&lt;/p&gt;

&lt;h2 id=&quot;front-end-performance&quot;&gt;Front-end performance&lt;/h2&gt;

&lt;p&gt;It is important Front-end developers understand various facets of performance ensuring that web pages are served and &lt;a href=&quot;/articles/dont-use-ajax-for-personalised-content&quot;&gt;run as fast as possible without degrading the UX&lt;/a&gt;. This includes a good knowledge of browser caching, compression, bundling and runtime performance.&lt;/p&gt;

&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility&lt;/h2&gt;

&lt;p&gt;Front-end developers should endeavour to test in as many browsers as is reasonable when developing, but will understand there is a balance to be had, as testing all browsers, in all compatibilities, on all devices is a sisyphean task.&lt;/p&gt;

&lt;p&gt;The balance can only be struck through experience of knowing which spread of browsers should be tested and at which frequency. Leaning on &lt;a href=&quot;/articles/progressively-enhanced-javascript/&quot;&gt;cross-browser scripting&lt;/a&gt; minimises the worry behind a lack of manual browser testing coverage.&lt;/p&gt;

&lt;h2 id=&quot;development-process-and-methodologies&quot;&gt;Development process and methodologies&lt;/h2&gt;

&lt;p&gt;It is very important to be able to work as part of a team in a given process. This means an understanding of various Agile methodologies. Furthermore, it’s highly beneficial to you and your team to be able to spot friction and implement improvements to that process.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Technical wanking</title>
			<link href="http://adamsilver.io/articles/technical-wanking/"/>
			<updated>2015-02-09T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/technical-wanking</id>
			<content type="html">&lt;p&gt;Technical Wanking is the practice of using cool and new technology because — well — it’s &lt;em&gt;cool&lt;/em&gt; and &lt;em&gt;new&lt;/em&gt;. Of course, we should choose technology on its technical merit and technical merit alone.&lt;/p&gt;

&lt;p&gt;I first heard this term in 2010 when I was building my first Single Page Application (SPA). We were using various “cutting-edge” libraries for DOM stuff and client-side templating, and we rolled our own client-side router.&lt;/p&gt;

&lt;p&gt;The administration system we were building didn’t need to consider SEO, and was only to be used in Chrome. It was a CRUD application with a bunch of rich interactions.&lt;/p&gt;

&lt;p&gt;I couldn’t wait to get my teeth into this, get the experience under my belt and propel my career accordingly. How could anyone resist my talent, with all the new buzzwords littering my CV?&lt;/p&gt;

&lt;p&gt;At about six months into the project, my friend James Norton joined the team. I accompanied him on one of his fag breaks. It didn’t take long for us to get talking about the codebase. James was quite scathing and questioned the need and benefit of the architecture. He decided this was the time to call me a Technical Wanker (thanks James).&lt;/p&gt;

&lt;p&gt;Fortunately, he didn’t just call me names. He went on to constructively explain how all the not-so-good aspects of the code and UX were self-induced. Here are a few of the problems we were solving:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Writing a client-side Javascript router.&lt;/strong&gt; Server-side technology (in our case Rails) has perfectly reliable routing. Let the browser handle the browsing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Writing a client-side Javascript view renderer to rebuild/render only parts of the DOM tree that changed.&lt;/strong&gt; Again server-side frameworks have you covered. The browser is an expert at parsing and rendering HTML. Script will never do it better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Writing client-side Javascript to massage and work with generic REST APIs.&lt;/strong&gt; It’s standard practice for a server-side framework to compose beautiful fit-for-purpose view-models ready for consumption by server-side view templates.&lt;/p&gt;

&lt;p&gt;James went on to explain the application could have been better had we used a traditional architecture, without all the inherent &lt;a href=&quot;/articles/the-disadvantages-of-single-page-applications/&quot;&gt;problems with SPAs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whilst I was still quite chuffed with all the clever things I appeared to be doing, I couldn’t help but realise he was right. I was solving self-induced problems to assist my team in get ting their work done, as opposed to delivering a great and reliable experience for our users.&lt;/p&gt;

&lt;p&gt;If we had avoided the lure of the coolness behind building a SPA, the end result would have been just as slick. Just as beautiful. Just as rich. And it would have taken half the time to build, with a far nicer split of responsibilities between the server and client, meaning we could iterate faster. Not to mention it would have had better performance and accessibility. All of which contributes to the &lt;a href=&quot;/articles/hello-ux-designer/&quot;&gt;overall UX&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-did-all-this-nonsense-become-standard-practice&quot;&gt;When did all this nonsense become standard practice?&lt;/h2&gt;

&lt;p&gt;“Everyone’s building them”, they say. The problem is, when everyone is doing something, that &lt;em&gt;something&lt;/em&gt; is usually a bad idea. This follows in all walks of life — &lt;strong&gt;most people eat McDonalds, but it doesn’t make it good for you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a paid profession, it is your duty to serve the client and their users to the very best of your ability. Not to use tech in order to improve your CV etc.&lt;/p&gt;

&lt;p&gt;I know many developers scattered across the industry, who are in the trenches having to use this cutting-edge tech that causes more problems than it solves.&lt;/p&gt;

&lt;p&gt;In many ways I wish I hadn’t participated in Technical Wanking back then, but then again, I wouldn’t be where I am today having learnt many lessons about what &lt;em&gt;not&lt;/em&gt; to do.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Don't use AJAX for personalised content</title>
			<link href="http://adamsilver.io/articles/dont-use-ajax-for-personalised-content/"/>
			<updated>2014-12-29T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/dont-use-ajax-for-personalised-content</id>
			<content type="html">&lt;p&gt;You may be trying to reduce page-load time by using &lt;a href=&quot;https://developer.akamai.com/stuff/Caching/Content_Caching.html&quot;&gt;content caching&lt;/a&gt; to improve UX.&lt;/p&gt;

&lt;p&gt;If your page contains personalised content this technique doesn’t work. This is because one user may receive another user’s personalised content. This is obviously dangerous and no good.&lt;/p&gt;

&lt;p&gt;Next, somebody says we should use AJAX to pull in the personalised content. This is problematic for many reasons. Before discussing them, let’s first discuss exactly what personalised content is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-personalised-content&quot;&gt;What is personalised content?&lt;/h2&gt;

&lt;p&gt;Personalised content is content that is specific to a user. The most basic example would be a “Logout” link. This is because the page knows that &lt;em&gt;you&lt;/em&gt; are logged in and that &lt;em&gt;you&lt;/em&gt; may want to logout.&lt;/p&gt;

&lt;p&gt;Even though this is personal, this can be cached because you can group users into two buckets: logged out users and logged in users. So you can serve the correct cached page to each bucket.&lt;/p&gt;

&lt;p&gt;Personalised content that can’t be cached is content that is unique to a specific user. For example, a users name or the contents of their shopping basket.&lt;/p&gt;

&lt;p&gt;Okay, so now we’ve cleared that up. What’s the problem with using AJAX to load in personalised content?&lt;/p&gt;

&lt;h2 id=&quot;the-architecture-becomes-complex&quot;&gt;1. The architecture becomes complex&lt;/h2&gt;

&lt;p&gt;What seems like a simple use of AJAX has a significant effect on architecture.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is there one extra request for personalised content or multiple?&lt;/li&gt;
  &lt;li&gt;Do you serve it as JSON and then parse that on the client?&lt;/li&gt;
  &lt;li&gt;How do you organise your scripts for this?&lt;/li&gt;
  &lt;li&gt;How do you organise the view partials for this on the server?&lt;/li&gt;
  &lt;li&gt;At what point is personalised content not essential to the UX and how does that affect architecture?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-people-will-have-a-broken-experience&quot;&gt;2. Some people will have a broken experience&lt;/h2&gt;

&lt;p&gt;If the user doesn’t have Javascript (and there are &lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;many reasons why they won’t&lt;/a&gt;), then they’ll get an incomplete and broken web page. Not being able to logout, or not being able to see their basket equates to a broken experience.&lt;/p&gt;

&lt;p&gt;This goes against Progressive Enhancement which in-turn goes against the spirit of the web. We shouldn’t unnecessarily exclude people.&lt;/p&gt;

&lt;h2 id=&quot;replacing-browser-behaviour-degrades-the-experience&quot;&gt;3. Replacing browser behaviour degrades the experience&lt;/h2&gt;

&lt;p&gt;When we use AJAX to load in content, we stop using the inherent functionality browsers provide for free. This functionality is an intuitive aspect of the browsing experience.&lt;/p&gt;

&lt;p&gt;This includes displaying a loading indicator that accurately indicates the progress of the request. It also includes handling response and timeout errors.&lt;/p&gt;

&lt;p&gt;Using AJAX and content-caching like this, means at first the page is only half rendered. Then, sometime later, the personalised content is injected into the page. This will be at least a little bit jarring as the page fills in the gaps.&lt;/p&gt;

&lt;p&gt;You’ll need to implement loading spinners, and hide content, and show the content perhaps with a transition. These things are rarely smooth and they differ from site to site. All of which does not help the user.&lt;/p&gt;

&lt;p&gt;Sometimes the second request might finish after the user has scrolled down the page and started interacting. This means the user may not notice this new personalised content.&lt;/p&gt;

&lt;h2 id=&quot;extra-work-is-needed&quot;&gt;4. Extra work is needed&lt;/h2&gt;

&lt;p&gt;First, a designed needs to provide a loading indicator. Then they might need to design transitions.&lt;/p&gt;

&lt;p&gt;Second, developers will need to implement this functionality and ensure this content is accessible to screen readers.&lt;/p&gt;

&lt;p&gt;Third testers will need to test all this and using AJAX makes functional tests harder to write.&lt;/p&gt;

&lt;h2 id=&quot;performance-actually-degrades&quot;&gt;5. Performance actually degrades&lt;/h2&gt;

&lt;p&gt;Instead of a single HTTP request that contains the whole response there will now be multiple. The first would be for the Document containing non-personalised content. The subsequent request will be via AJAX and &lt;em&gt;will&lt;/em&gt; hit your web server, therefore subject to the same latency as always.&lt;/p&gt;

&lt;p&gt;And any performance increase is negated by the extra JS and CSS which needs to download and execute (reflows and repaints) in the browser. This includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;making a JSON request;&lt;/li&gt;
  &lt;li&gt;parsing the response;&lt;/li&gt;
  &lt;li&gt;handling errors;&lt;/li&gt;
  &lt;li&gt;finding elements;&lt;/li&gt;
  &lt;li&gt;traversing the Document tree;&lt;/li&gt;
  &lt;li&gt;updating the Document; and&lt;/li&gt;
  &lt;li&gt;loading spinners and whatever else.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Content-caching &lt;em&gt;is&lt;/em&gt; a very useful technique when used responsibly and for pages that don’t contain personalised content. For pages that &lt;em&gt;do&lt;/em&gt; contain personalised content, a &lt;a href=&quot;https://blogs.akamai.com/2014/05/and-you-thought-your-page-could-not-be-cached.html&quot;&gt;cookie check can determine whether the cached version should be served or not&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is ill-advised to misuse Javascript in this way as there are several negative side effects in doing so. AJAX should not break the web, it should enhance the experience where necessary.&lt;/p&gt;

&lt;p&gt;AJAX seems like an innocent and beneficial solution, but in reality it encourages bad practice that creates several self-induced problems for users and the development team.&lt;/p&gt;

&lt;!--

## Todo:

* https://remysharp.com/2012/04/25/mobile-battery-performance
* http://itamarst.org/writings/dynamiccaching.html
* cache invalidated means it goes to server anyway

## Comment from blog covers it off:

&gt; I think this would be a useful technique in only special situations. It does accomplish what you want but will require multiple downloads and will make a portion of your page unaccessible to those who have disabled JS (from what I have heard that is 10% of the intenet population).

&gt; Plus I am dubious of the savings. The reason for the caching to not have a web brower contact the website. It can just retrieve the content from cache. But if it is having to retrieve a portion of the content anyway you still have to make a HTTP request. Might as well make that response a bit bigger and get rid of the multiple requests and more complex code.

&gt; Sounds to me like this is going a little overboard on caching. Some pages are just not designed for caching. If that is the case then implement your application to use the “If-Modified-Since” header. That way the user can make their request but get back a small response in most cases.

&gt; I think this is premature optimization.

--&gt;
</content>
		</entry>
	
		<entry>
			<title>The boring front-end developer</title>
			<link href="http://adamsilver.io/articles/the-boring-front-end-developer/"/>
			<updated>2014-10-01T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/the-boring-front-end-developer</id>
			<content type="html">&lt;p&gt;&lt;em&gt;Cool&lt;/em&gt; front-end developers are always &lt;em&gt;pushing the envelope&lt;/em&gt;, jumping out of their seat to use the latest and greatest and shiniest of UI frameworks and libraries.&lt;/p&gt;

&lt;p&gt;They’re often found bridging the gap between native apps and web and so will strive to make the UI look and behave like an app. &lt;em&gt;Which app?&lt;/em&gt; you may ask. &lt;em&gt;iPhone? Android? What version?&lt;/em&gt; All good questions, alas another topic altogether.&lt;/p&gt;

&lt;p&gt;However, there’s another kind of front-end developer, the &lt;em&gt;boring&lt;/em&gt; front-end developer. Here’s an ode to the &lt;em&gt;boring&lt;/em&gt; front-end developer, &lt;em&gt;BFED&lt;/em&gt; if you will.&lt;/p&gt;

&lt;h2 id=&quot;browser-support&quot;&gt;Browser support&lt;/h2&gt;

&lt;p&gt;The BFED realises that while not all experiences will be identical, all browsers &lt;em&gt;can&lt;/em&gt; be used to consume a website, even &lt;em&gt;gasp&lt;/em&gt;, IE6 and below. He/she will promote Progressive Enhancement and Cross-browser (not Multi-browser) scripting at any given opportunity.&lt;/p&gt;

&lt;p&gt;The BFED also realises it is not a feat to drop support for a particular (set of) browser(s) and understands that forgetting about the existence of those users hurts them and their perception of the company/product.&lt;/p&gt;

&lt;h2 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;The BFED realises that users have different abilities and preferred ways of using a computer, whether it’s a mouse, finger, thumb, screen reader, keyboard or a combination of all, websites should be consumable no matter the audience, screen size or capability of the browser.&lt;/p&gt;

&lt;h2 id=&quot;preprocessors&quot;&gt;Preprocessors&lt;/h2&gt;

&lt;p&gt;When given the choice to add a preprocessor (e.g. LESS, SASS, CoffeeScript etc) to the tech stack, the BFED knows there’s a much deeper impact beyond just “writing less code”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Will debugging code be more difficult?”&lt;/em&gt;, &lt;em&gt;“Might performance degrade?”&lt;/em&gt; and &lt;em&gt;“Will I be slowed down due to compile times?”&lt;/em&gt; are just some of the &lt;a href=&quot;/articles/the-disadvantages-of-css-preprocessors/&quot;&gt;questions&lt;/a&gt; the BFED will consider to avoid problems in the future.&lt;/p&gt;

&lt;h2 id=&quot;ui-design&quot;&gt;UI design&lt;/h2&gt;

&lt;p&gt;The BFED embraces the constraints and limitations of the browser so that he/she doesn’t find him/herself in a world of Adaptive Design and UA sniffing because that world is horrible, ill-advised and costly.&lt;/p&gt;

&lt;p&gt;It is best to include the BFED early on in the UX design process to save wasting time designing a UI that should ultimately be avoided (see &lt;em&gt;&lt;a href=&quot;http://bradfrostweb.com/blog/mobile/fixed-position/&quot;&gt;Fixed Position&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;/articles/misusing-the-select-control/&quot;&gt;Misusing The Select Control&lt;/a&gt;&lt;/em&gt; for more on that) and that can likely be designed more simply.&lt;/p&gt;

&lt;p&gt;The BFED will also suggest the use of native form controls realising that browsers will enhance the experience where possible, particularly on mobile, and doesn’t try to control the look and feel too much as he/she knows that the brand will &lt;em&gt;not&lt;/em&gt; suffer because of that decision.&lt;/p&gt;

&lt;p&gt;The BFED will also suggest that links are styled as such, and with underlines, so that users can identify them within copy.&lt;/p&gt;

&lt;h2 id=&quot;third-party-css-and-javascript-libraries-and-frameworks&quot;&gt;Third party CSS and Javascript libraries and frameworks&lt;/h2&gt;

&lt;p&gt;The BFED will carefully select third party code based on the quality of the code itself by reviewing source code, &lt;em&gt;not&lt;/em&gt; based on the popularity of said code. He/she favours reliability over popularity every time.&lt;/p&gt;

&lt;h2 id=&quot;ui-architecture&quot;&gt;UI architecture&lt;/h2&gt;

&lt;p&gt;The BFED will adhere to the following quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As a Lead JavaScript Engineer, I try to get my team to write as little JavaScript as possible.”
&lt;br /&gt;— &lt;cite&gt;James Norton&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Furthermore, the BFED realises that &lt;a href=&quot;/articles/the-disadvantages-of-single-page-applications/&quot;&gt;Single Page Applications cause severe problems&lt;/a&gt; and that avoiding them and leaning on the server appropriately, provides a better experience and reach.&lt;/p&gt;

&lt;h2 id=&quot;cv&quot;&gt;CV&lt;/h2&gt;

&lt;p&gt;The BFED will develop a site based on the context of the problem and provide a solution accordingly. He/she will not just use [insert buzz word here] to improve his/her chances of finding another job based on the current technology fad in order to increase their day rate.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Be a great front-end developer. Be boring.&lt;/p&gt;

&lt;h2 id=&quot;addendum&quot;&gt;Addendum&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/simple-human/addendum-to-the-boring-front-end-developer-468dfc75d896#.1umggvug5&quot;&gt;My response&lt;/a&gt; to Hacker News comments.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href=&quot;http://blog.capwatkins.com/the-boring-designer&quot;&gt;The Boring Designer&lt;/a&gt; by Cap Watkins’ — thank you.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Misusing the select control</title>
			<link href="http://adamsilver.io/articles/misusing-the-select-control/"/>
			<updated>2014-09-17T00:00:00+01:00</updated>
			<id>http://adamsilver.io/articles/misusing-the-select-control</id>
			<content type="html">&lt;p&gt;I’ve seen many designers misuse the select menu by using it as a form of navigation. One example of this approach is with a Sort By form which many ecommerce sites use to allow users to sort a list of products.&lt;/p&gt;

&lt;!-- &lt;div class=&quot;image&quot; style=&quot;max-width: 320px;margin: 0 auto;&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/sortby.png&quot; alt=&quot;Sort by select&quot; width=&quot;100%&quot;&gt;
		&lt;figcaption&gt;Sort by select box missing a submit button&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt; --&gt;

&lt;p&gt;This technique is appealing because removing the button declutters the UI. And submitting the form when the user changes selection saves the user an extra click.&lt;/p&gt;

&lt;p&gt;Whilst this seems sensible it’s actually problematic. And in fact aiming for a &lt;a href=&quot;http://uxmyths.com/post/115783813605/myth-34-simple-minimal&quot;&gt;minimal UI&lt;/a&gt; and &lt;a href=&quot;http://idyeah.com/blog/2012/06/stop-counting-clicks/&quot;&gt;counting clicks&lt;/a&gt; doesn’t always lead to an agreeable User Experience. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;keyboard-users-find-them-difficult&quot;&gt;1. Keyboard users find them difficult&lt;/h2&gt;

&lt;p&gt;Some browsers will immediately submit the form when the user selects an option. As a user moves from the first to the second option, the form will submit before the user had a chance to move further down the list.&lt;/p&gt;

&lt;p&gt;To experience this for yourself visit &lt;a href=&quot;http://html.cita.illinois.edu/script/onchange/onchange-example.php&quot;&gt;the demo&lt;/a&gt; in an offending browser such as:
Chrome (Windows), Opera (Windows), IE6, IE7, IE8 or IE9.&lt;/p&gt;

&lt;h2 id=&quot;screen-reader-users-find-them-difficult&quot;&gt;2. Screen reader users find them difficult&lt;/h2&gt;

&lt;p&gt;Sarah Miller’s research found that dropdown lists without submit buttons were confusing to screen reader users. The act of reading an option meant that it was selected. Therefore the user could never get past the first option.&lt;/p&gt;

&lt;h2 id=&quot;users-expect-to-use-links-for-navigation&quot;&gt;3. Users expect to use links for navigation&lt;/h2&gt;

&lt;p&gt;Links are for navigation. Forms are for submitting data—in our case filtering a set of search results. We should use the right element. In doing so we conform to the third of Henny Swan’s &lt;a href=&quot;https://www.smashingmagazine.com/2015/02/bbc-iplayer-accessibility-case-study/#ux-principles&quot;&gt;UX principles&lt;/a&gt;, &lt;em&gt;design with familiarity in mind&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;users-expect-selection-and-submission-to-be-separate&quot;&gt;4. Users expect selection and submission to be separate&lt;/h2&gt;

&lt;p&gt;There is a difference between selecting something and submitting it to the server for processing. Users can check and amend their entries before submitting them. In fact this is a WCAG 2.0 recommendation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Changing the setting of any user interface component does not automatically cause a change of context”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The button invites the user to make an explicit action at their convenience, and therefore conforms to the second of Henny Swan’s UX principles, &lt;em&gt;to give users control&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;users-find-it-disorientating&quot;&gt;5. Users find it disorientating&lt;/h2&gt;

&lt;p&gt;Larry Marinem’s usability research found that users are prone to mis-selecting an option. So when it launches them off somewhere else, users found this disorientating.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Reducing clicks and decluttering a UI &lt;em&gt;might&lt;/em&gt; be the results of a well-designed solution, but they should not be objectives in and of themselves.&lt;/p&gt;

&lt;p&gt;We should consider people with different preferences and browsers so that they can effectively use the websites we put in front of them.&lt;/p&gt;

&lt;p&gt;Our solutions should be familiar wherever possible and keep the user in control of their actions. In this case, we must always include a button.&lt;/p&gt;

&lt;!-- &lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rnKDDSo9Omk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
</content>
		</entry>
	
		<entry>
			<title>Javascript inheritance</title>
			<link href="http://adamsilver.io/articles/javascript-inheritance/"/>
			<updated>2014-09-09T10:00:59+01:00</updated>
			<id>http://adamsilver.io/articles/javascript-inheritance</id>
			<content type="html">&lt;p&gt;ECMAScript doesn’t have an &lt;em&gt;inherit&lt;/em&gt; function. But you can mimic the functionality yourself if you need to.&lt;/p&gt;

&lt;p&gt;Here’s a ready made inherit function you can use in your project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**** The namespace ****/
var lib = {};

/**** The cloneObject function ****/

// For browsers that have Object.create
if(Object.create) {
    lib.cloneObject = function(o) {
        return Object.create(o);
    };
} else {
    lib.cloneObject = (function() {
        var Fn = function() {};

        return function(o) {
            Fn.prototype = o;
            return new Fn();
        };
    })();
}

/**** The inherit function which uses cloneObject ****/

lib.inherit = function(Sub, Super) {
    // Clone the parent&#39;s prototype object and assign to child&#39;s prototype object
    Sub.prototype = lib.cloneObject(Super.prototype);

    // Assign reference to super constructor onto the child constructor
    Sub.superConstructor = Super;

    // Assign child as the child constructor
    Sub.prototype.constructor = Sub;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example you might want a superhero to inherit the features of a regular person. A person constructor might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Person(name) {
    this.name = name;
}

Person.prototype.sayName = function() {
    return &quot;My name is:&quot; + this.name;
};

var bob = new Person(&#39;Bob&#39;);
bob.sayName(); // &quot;My name is Bob&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A superhero has some differences. They won’t tell you their identity. Instead they will tell you their alias. The code for this is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Superhero(name, alias) {
    // call parent constructor so that Superheros have a name
    Superhero.superConstructor.call(this, name);
    this.alias = alias;
}

// Inherit the features of a Person
lib.inherit(Superhero, Person);

// Override method so that Superheros only tell you their alias
Superhero.prototype.sayName = function() {
    return &quot;Can&#39;t tell you that but my alias is: &quot; + this.alias;
}

// Call parent method if you need to
Superhero.prototype.revealIdentity = function() {
    return Superhero.superConstructor.prototype.sayName();
};

var batman = new Superhero(&quot;Bruce Wayne&quot;, &quot;Batman&quot;);
batman.sayName(); // &quot;Can&#39;t tell you that but my alias is Batman&quot;
batman.revealIdentity(); // &quot;My name is Bruce Wayne&quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
		</entry>
	
		<entry>
			<title>The disadvantages of single page applications</title>
			<link href="http://adamsilver.io/articles/the-disadvantages-of-single-page-applications/"/>
			<updated>2014-08-11T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/the-disadvantages-of-single-page-applications</id>
			<content type="html">&lt;p&gt;Many people think single page applications (SPAs) provide a better user experience. But, not only do they cause usability problems, they are significantly harder to design and build.&lt;/p&gt;

&lt;p&gt;Before getting into the issues, let’s first clarify what an SPA is.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-an-spa&quot;&gt;What exactly is an SPA?&lt;/h2&gt;

&lt;p&gt;We might associate MVC, AJAX and client-side templating with an SPA. But these are not the defining characteristics of an SPA. We can use all of these things to build a rich, &lt;a href=&quot;http://roca-style.org/&quot;&gt;ROCA-style&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;What really defines an SPA as such, is the fact that client-side Javascript handles the routing &lt;em&gt;instead&lt;/em&gt; of the browser. That is, the application hijacks the behaviour that browsers inherently provide natively for &lt;em&gt;free&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When it’s put like that, it’s hardly surprising they cause so many problems:&lt;/p&gt;

&lt;h2 id=&quot;history-and-fast-back&quot;&gt;1. History and fast back&lt;/h2&gt;

&lt;p&gt;Browsers store history so that pages load quickly when the user clicks &lt;em&gt;back&lt;/em&gt;. Daniel Puplus explains in &lt;a href=&quot;https://medium.com/joys-of-javascript/4353246f4480&quot;&gt;Building Single Page Applications&lt;/a&gt; that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“When a user presses the browser’s back button they expect the change to happen quickly and for the page to be in a similar state to how it was last time they saw it.&lt;br /&gt;&lt;br /&gt;
“In the traditional web model the browser will typically be able use a cached version of the page and linked resources.&lt;br /&gt;&lt;br /&gt;
“In a naive implementation of a SPA hitting back will do the same thing as clicking a link, resulting in a server request, additional latency, and possibly visual data changes.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want users to enjoy the same, fast experience, we’ll need to mimic the native browser behaviour in Javascript. The application will need to store pages in a cache by using memory, local storage, client-side databases or cookies.&lt;/p&gt;

&lt;p&gt;The application will also need to determine &lt;em&gt;when&lt;/em&gt; to retrieve these pages. As part of this it will need to differentiate between:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a user changing the URL (by clicking a link or typing a URL in the location bar); and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2008806/how-to-detect-if-the-user-clicked-the-back-button&quot;&gt;manually pressing back or forward&lt;/a&gt; which is not easy to solve.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scroll-position&quot;&gt;2. Scroll position&lt;/h2&gt;

&lt;p&gt;Browsers remember the scroll position of pages you have visited. Daniel Puplus explains how SPAs have trouble here:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Lots of sites get this wrong and it’s really annoying. When the user navigates using the browser’s forward or back button the scroll position should be the same as it was last time they were on the page. This sometimes works correctly on Facebook but sometimes doesn’t. Google+ always seems to lose your scroll position.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SPAs don’t navigate in the traditional sense. Therefore the application must store the scroll position and apply it when the user hits back or forward.&lt;/p&gt;

&lt;h2 id=&quot;cancelling-navigation&quot;&gt;3. Cancelling navigation&lt;/h2&gt;

&lt;p&gt;Consider what a browser gives us for free:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When a user clicks the &lt;em&gt;cancel&lt;/em&gt; button, the browser will stop any in-flight requests.&lt;/li&gt;
  &lt;li&gt;When a user clicks a link, the browser will again, stop any in-flight requests and make a new request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As SPAs retrieve pages (or data for a page) via AJAX, there could be several requests in-flight. The first page request could finish last. And, a user may click (and therefore request) the same link twice. This is problematic because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it’s inefficient;&lt;/li&gt;
  &lt;li&gt;the user’s data allowance could be eaten up unnecessarily; and&lt;/li&gt;
  &lt;li&gt;it causes visual glitches as a subsequent page request finishes (when the browser would normally have cancelled it).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application will need to handle duplicate requests. And the UI will need a cancel button, which is highly undesirable.&lt;/p&gt;

&lt;h2 id=&quot;unsaved-changes&quot;&gt;4. Unsaved changes&lt;/h2&gt;

&lt;p&gt;On occasion an application, upon leaving the page, will warn users about losing any unsaved changes. The browser allows us to use the &lt;code&gt;beforeunload&lt;/code&gt; event to do just this.&lt;/p&gt;

&lt;p&gt;However, the application cannot use this feature because users don’t request real pages. Meaning, the application will need to reimplement this behaviour if needed.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-ranking&quot;&gt;5. Search engine ranking&lt;/h2&gt;

&lt;p&gt;For many SPAs SEO is an afterthought, which is problematic because retro fitting server side rendering is not trivial. The alternative is to create a &lt;em&gt;special&lt;/em&gt; website just for bots which isn’t ideal either. Either way, it’s another problem that needs consideration and action.&lt;/p&gt;

&lt;h2 id=&quot;loading-css-amp-javascript&quot;&gt;6. Loading CSS &amp;amp; Javascript&lt;/h2&gt;

&lt;p&gt;If an SPA grows to a significant size, loading the entire application on page load will be slow. This leads to conditionally loading CSS and JS with a script loader.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;a href=&quot;http://blog.getify.com/labjs-script-loading-the-way-it-should-be/&quot;&gt;script loading is notoriously difficult and contains  hacks&lt;/a&gt;. This slows down development and reduces the reliability of the application.&lt;/p&gt;

&lt;h2 id=&quot;analytics&quot;&gt;7. Analytics&lt;/h2&gt;

&lt;p&gt;Analytics tools track page views by default. But SPA pages aren’t really pages. This means the application will have to notify the analytics tool that a pseudo page has been loaded.&lt;/p&gt;

&lt;h2 id=&quot;automated-functional-testing&quot;&gt;8. Automated functional testing&lt;/h2&gt;

&lt;p&gt;Selenium knows when a page has finished loading. However, SPAs load pages with AJAX. This means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tests are more complicated and must handle timeouts; and&lt;/li&gt;
  &lt;li&gt;the tests will be slower to execute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-leaks&quot;&gt;9. Memory leaks&lt;/h2&gt;

&lt;p&gt;Pages are “long lived” increasing the chance of memory leak issues. This can degrade UX and cause battery drain on mobile devices.&lt;/p&gt;

&lt;h2 id=&quot;loading-indicators&quot;&gt;10. Loading indicators&lt;/h2&gt;

&lt;p&gt;Browsers show a loading indicator during page load. SPAs use AJAX to load pages and so we need to implement a custom one. This requires extra work.&lt;/p&gt;

&lt;p&gt;Also, the browser’s indicator displays &lt;em&gt;progress&lt;/em&gt;. That is, a user can tell how long until the request finishes. Javascript can only state that something is loading, not how long left there is. This leads users to request the link again.&lt;/p&gt;

&lt;p&gt;Furthermore, the user’s browser provides a predictable and familiar loading indicator, no matter which website they visit. When we use Javascript to do this, we break the third of Henny Swan’s &lt;a href=&quot;https://www.smashingmagazine.com/2015/02/bbc-iplayer-accessibility-case-study/#ux-principles&quot;&gt;UX principles&lt;/a&gt;, &lt;em&gt;design with familiarity in mind&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;its-going-to-fail&quot;&gt;11. It’s going to fail&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;Everyone has Javascript, Right?&lt;/a&gt; explains that Javascript loading or executing will fail. SPAs &lt;em&gt;depend&lt;/em&gt; on many different enhancements, and they tend not to conform to &lt;a href=&quot;/articles/writing-javascript-that-conforms-to-progressive-enhancement/&quot;&gt;Progressive Enhancement&lt;/a&gt;. This means when it does fail, the resulting experience will be a blank page.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Ironically, SPAs are harder to design and harder to build. And yet, they typically produce slow, disagreeable experiences for users.&lt;/p&gt;

&lt;p&gt;Twitter, Lifehacker and Delicious have reverted to traditional architectures because of these issues which you can read about in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.twitter.com/2012/improving-performance-on-twittercom&quot;&gt;Improving performance on Twitter&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://isolani.co.uk/blog/javascript/BreakingTheWebWithHashBangs&quot;&gt;Breaking The Web With Hash Bangs&lt;/a&gt;; and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.del.icio.us/?p=1174&quot;&gt;Delicious changes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Javascript is never going to beat the browser at what it does best—&lt;em&gt;browsing&lt;/em&gt;. We can still give users rich and enhanced experiences without cramming an entire site into one document.&lt;/p&gt;

&lt;p&gt;We should let the browser manage the browsing experience, and spend our time solving &lt;em&gt;real&lt;/em&gt; user problems.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Javascript namespacing</title>
			<link href="http://adamsilver.io/articles/javascript-namespacing/"/>
			<updated>2014-07-11T10:00:01+01:00</updated>
			<id>http://adamsilver.io/articles/javascript-namespacing</id>
			<content type="html">&lt;p&gt;Namespaces help you organise code so that it’s easy for others to find their way around it. In Javascript, they also minimise the number of &lt;a href=&quot;http://www.yuiblog.com/blog/2006/06/01/global-domination/&quot;&gt;global variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Javascript doesn’t (at the time of writing) have a dedicated way to namespace components. But we can do it using object literals.&lt;/p&gt;

&lt;p&gt;I’ll show you how to namespace your components with an example application. The application represents a zoo. The zoo has a couple of animals plus some additional information.&lt;/p&gt;

&lt;p&gt;This is the directory structure for the zoo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zoo/
  zoo.js
  zoo.information.js
  animals/
    zoo.animals.js
    zoo.animals.Penguin.js
    zoo.animals.Tiger.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The root namespace resides inside &lt;code&gt;zoo.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var zoo = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The animals need a sub level namespace too which resides inside &lt;code&gt;zoo.animals.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// zoo.animals.js
zoo.animals = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice that the namespace matches the name of the file. This consistency helps you find the relevant component later.&lt;/p&gt;

&lt;p&gt;The zoo has a penguin and a tiger definition which reside inside &lt;code&gt;zoo.animals.Penguin.js&lt;/code&gt; and &lt;code&gt;zoo.animals.Tiger.js&lt;/code&gt; respectively. The penguin definition is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zoo.animals.Penguin = function() {
  // constructor
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to store some information in the zoo you can do so as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// zoo.information.js
zoo.information = {
  name: &quot;My Awesome Zoo&quot;,
  address: &quot;52 Zoo Lane, ZA1 2AP&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where possible, you should avoid deeply nested hierarchies. But don’t worry about having a lot of files. You should be concatenating them for production anyway.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Forms with multiple submit buttons are problematic</title>
			<link href="http://adamsilver.io/articles/forms-with-multiple-submit-buttons-are-problematic/"/>
			<updated>2014-03-20T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/forms-with-multiple-submit-buttons-are-problematic</id>
			<content type="html">&lt;p&gt;Forms with multiple submit buttons are problematic for keyboard users because of how submission works. A user can submit a form by pressing &lt;em&gt;enter&lt;/em&gt;, when the focus is within a field (as opposed to a button).&lt;/p&gt;

&lt;p&gt;If there are multiple buttons, the form will behave as if the user pressed the &lt;em&gt;first&lt;/em&gt; button. This is not always desirable. For example, you might have an address form with a postcode look-up.&lt;/p&gt;

&lt;div class=&quot;image&quot;&gt;
	&lt;figure&gt;
		&lt;img src=&quot;/assets/img/multiplesubmit.png&quot; alt=&quot;Delivery address form&quot; width=&quot;100%&quot; style=&quot;max-width: 320px;&quot; /&gt;
		&lt;figcaption&gt;Delivery address form with multiple submit buttons.&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Pressing enter will always perform a postcode look-up because it’s first in the document flow. There are two solutions at our disposal.&lt;/p&gt;

&lt;h2 id=&quot;split-up-the-forms&quot;&gt;1. Split up the forms&lt;/h2&gt;

&lt;p&gt;The best course of action is to split your form into two. This means each form will have a single button removing any ambiguity during submission.&lt;/p&gt;

&lt;p&gt;All users benefit from this approach, not just keyboard users. Breaking down one big form into two small ones reduces the cognitive load on users. And having one call-to-action helps users make the next step.&lt;/p&gt;

&lt;p&gt;If for some reason, you can’t split up your forms then there is another, less-than-ideal option.&lt;/p&gt;

&lt;h2 id=&quot;choose-a-primary-button&quot;&gt;2. Choose a primary button&lt;/h2&gt;

&lt;p&gt;If you &lt;em&gt;really&lt;/em&gt; can’t split the forms into two, then you’ll need to choose a primary action. This isn’t always easy because some forms have two buttons with similar weighting.&lt;/p&gt;

&lt;p&gt;If the primary button doesn’t naturally come first then, if possible, you should modify the design so it does. If it doesn’t come first, then you’ll need to duplicate it and place it at the top of the form.&lt;/p&gt;

&lt;p&gt;You’ll need to ensure it is visually hidden with CSS but this is problematic. As the user tabs to the hidden button, the UI will seem unresponsive. This is because the button is in focus, but is visually hidden. This can  disorientate users.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Forms with multiple submit buttons are problematic. But it’s easy to design this problem out of the system. To do this, split the large form into separate smaller forms. In doing so each form has a single call-to-action which will help users progress easily, whether they use the keyboard or otherwise.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>How to create accessible forms</title>
			<link href="http://adamsilver.io/articles/how-to-create-accessible-forms/"/>
			<updated>2014-01-22T09:00:01+00:00</updated>
			<id>http://adamsilver.io/articles/how-to-create-accessible-forms</id>
			<content type="html">&lt;p&gt;Interacting with forms is one of the most important interactions a person can have on the web. The great news is, forms can be made to be accessible and in-turn more human-friendly with very little effort. This article describes the simple techniques you can utilise to ensure your forms are accessible.&lt;/p&gt;

&lt;h2 id=&quot;labels&quot;&gt;Labels&lt;/h2&gt;

&lt;p&gt;Labels provide information about each control. Visual users will see the label and visually impaired users may use a screen reader which will read out the label. Labels are only needed for controls that provide a vessel for input e.g. submit buttons are fine without.&lt;/p&gt;

&lt;p&gt;Additionally, browsers may provide the ability to click a label which will either move focus to the control or even mark the control as checked in the case of a checkbox or radio control.&lt;/p&gt;

&lt;p&gt;Associating a control with a label as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;label for=&quot;username&quot;&amp;gt;Username&amp;lt;/label&amp;gt;
&amp;lt;input id=&quot;username&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: the &lt;code&gt;for&lt;/code&gt; attribute associates a label with another control explicitly by matching the id attribute of the control.&lt;/p&gt;

&lt;h2 id=&quot;fieldsets-and-related-controls&quot;&gt;Fieldsets and related controls&lt;/h2&gt;

&lt;p&gt;Fieldsets provide information about a group of related controls. Typically this is useful for controls with a type attribute &lt;em&gt;radio&lt;/em&gt; or &lt;em&gt;checkbox&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a form control which allows the user to choose their favourite colour. The choices are represented as radios with associated labels: Red, Yellow and Blue.&lt;/p&gt;

&lt;p&gt;“Red” doesn’t convey enough information on its own. However, wrapping the group of radios in a fieldset with a legend of “Favourite colour” will ensure the control can be read out by a screen reader as “Favourite colour, Red”.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
	&amp;lt;legend&amp;gt;Favourite colour&amp;lt;/legend&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourRed&quot; value=&quot;red&quot;&amp;gt;
	&amp;lt;label for=&quot;colourRed&quot;&amp;gt;Red&amp;lt;/label&amp;gt;
	&amp;lt;!-- ... --&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;optional-radio-group-control&quot;&gt;Optional radio group control&lt;/h2&gt;

&lt;p&gt;Radio controls can not be toggled; once marked as checked they cannot be unchecked until a different radio control is checked. Therefore it is imperative that an additional radio control is added with a ‘None selected’ option so that the user may change their mind. An example follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
	&amp;lt;legend&amp;gt;Favourite colour&amp;lt;/legend&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourNone&quot; value=&quot;none&quot;&amp;gt;
	&amp;lt;label for=&quot;colourNone&quot;&amp;gt;None selected&amp;lt;/label&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourRed&quot; value=&quot;red&quot;&amp;gt;
	&amp;lt;label for=&quot;colourRed&quot;&amp;gt;Red&amp;lt;/label&amp;gt;
	&amp;lt;input type=&quot;radio&quot; name=&quot;colour&quot; id=&quot;colourBlue&quot; value=&quot;blue&quot;&amp;gt;
	&amp;lt;label for=&quot;colourBlue&quot;&amp;gt;Blue&amp;lt;/label&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;option-groups-and-options&quot;&gt;Option groups and options&lt;/h2&gt;

&lt;p&gt;The optgroup element can improve accessibility of the options within a select control by adding information to groups of options. If a user had to select their favourite fruit including variety then adding an optgroup named “Apple” containing options such as “Pink Lady” would be advisable as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select&amp;gt;
	&amp;lt;optgroup label=&quot;Apples&quot;&amp;gt;
		&amp;lt;option&amp;gt;Pink lady&amp;lt;/option&amp;gt;
		&amp;lt;!-- ... --&amp;gt;
	&amp;lt;/optgroup&amp;gt;
	&amp;lt;!-- ... --&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dont-abuse-select-controls&quot;&gt;Don’t abuse select controls&lt;/h2&gt;

&lt;p&gt;The select control provides a list of options of which one can be selected for input. An &lt;a href=&quot;/articles/misusing-the-select-control/&quot;&gt;accessibility/usability issue can arise when script is used to submit the form when the select’s change event fires&lt;/a&gt;. Keyboard users may struggle. If a user wants to select the 4th option this would then require 3 form submissions which would be a terribly frustrating experience.&lt;/p&gt;

&lt;h2 id=&quot;avoid-multiple-select-controls&quot;&gt;Avoid multiple select controls&lt;/h2&gt;

&lt;p&gt;Multiple select controls allow the user to select multiple options but it’s recommended that these controls are avoided due to users not understanding how to use them. Checkboxes provide a better alternative.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So there you have it; three things you should do, one thing you can do, and two things you shouldn’t do. With very little effort you can make your forms accessible and human-friendly to everyone.&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>An introduction to DOM scripting forms</title>
			<link href="http://adamsilver.io/articles/an-introduction-to-dom-scripting-forms/"/>
			<updated>2014-01-02T09:00:59+00:00</updated>
			<id>http://adamsilver.io/articles/an-introduction-to-dom-scripting-forms</id>
			<content type="html">&lt;p&gt;The HTML DOM has dedicated APIs for retrieving and manipulating form controls. The &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/816-6408-10/&quot;&gt;DOM0&lt;/a&gt; Forms Collection API is perfect for this but unfortunately often forgotten. This article describes how to use this API.&lt;/p&gt;

&lt;h2 id=&quot;accessing-a-form&quot;&gt;Accessing a form&lt;/h2&gt;

&lt;p&gt;Accessing a form with a Name attribute value of &lt;em&gt;login&lt;/em&gt; is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loginForm = document.forms.login;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;accessing-form-controls&quot;&gt;Accessing form controls&lt;/h2&gt;

&lt;p&gt;Accessing the controls within the form is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loginControls = loginForm.elements;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If the login form contained a username and password control then &lt;code&gt;loginControls&lt;/code&gt; would be a collection of two controls.&lt;/p&gt;

&lt;h2 id=&quot;accessing-a-control-by-name&quot;&gt;Accessing a control by name&lt;/h2&gt;

&lt;p&gt;There are several types of control including input, select, textarea, etc. Having retrieved the controls earlier we can loop over each control or retrieve a particular control by index or name. Retrieving a control by name is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var usernameControl = loginControls.username;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;inspecting-a-control-value&quot;&gt;Inspecting a control value&lt;/h2&gt;

&lt;p&gt;Once we have a control we can interrogate its value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var usernameValue = usernameControl.value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is useful if you want to perform client side validation, for example.&lt;/p&gt;
</content>
		</entry>
	
</feed>